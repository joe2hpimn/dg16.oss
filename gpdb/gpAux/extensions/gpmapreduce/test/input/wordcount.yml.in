%YAML 1.1
---
VERSION:         1.0.0.1
DATABASE:        @db_user@
USER:            @db_user@

DEFINE:
  - INPUT:
      NAME:      email
      FILE:
        - @hostname@:@abs_srcdir@/data/email/mailfiles

  - OUTPUT:
      NAME:     out_1
      FILE:     @abs_srcdir@/output/wordcount.1
      DELIMITER: '|'

  # The original example for this used nltk for word stemming and
  # tokenization, but it was simplified for testing to simply due
  # whitespace tokenization and no stemming.
  #
  # The reason for the simplification is that not all test machines
  # have nltk installed.
  - MAP:
      NAME:      wordsplit_python
      FUNCTION:  |
        from email import message_from_file
        text      = message_from_file(open(value)).get_payload()

        # Old nltk version
        #import nltk
        #tokenizer = nltk.WordTokenizer()
        #stemmer   = nltk.PorterStemmer()
        #stopwords = nltk.corpus.stopwords.words()
        #tokens    = tokenizer.tokenize(text) 
        #stems     = map(lambda(x): stemmer.stem(x.lower()), tokens)
        

        # New version
        #  Results are obviously not the same as the above since the stemming
        #  in particular is pretty dumb, but it gets the right general idea
        #  across
        from string import maketrans
        stopwords  = ["at", "aft", "ar", "is", "be", "it",
                      "to", "for", "from", "few", "ha", "last", "lik",
                      "now", "no", "not", "on", "ov", "se", "up", "who",
                      "which", "within", "what", "if", "into", "out",
                      "som", "soon", "they", "that", "you", "with", "of", "will",
                      "her", "him",
                      "or", "in", "thes", "ther", "all", "any", "th", "away",
                      "could", "each", "end", "should", "help", "next"]
        trailing   = ["ation", "ments",
                      "ated", "able", "ment",
                      "ent", "ers", "ing", "ful", "ion",
                      "al", "ed", "er", "es", "ly",
                      "e", "s"]
        tokens     = ''.join(map(lambda(x): x.isalnum() and x or ' ', text.lower())).split()
        def remove_trailing(x):
          for ending in trailing:
            if x.endswith(ending):
              return x[0:-len(ending)]
          return x
        stems = map(remove_trailing, tokens)
        stems = filter(lambda(x): len(x) > 1, stems)

        
        # filter stopwords and return results
        words      = filter(lambda(x): x not in stopwords and not x.isdigit(), stems)

        return map(lambda(x): [x, 1], words)
      LANGUAGE:   python
      OPTIMIZE:   STRICT IMMUTABLE
      PARAMETERS: value text
      RETURNS:
        - key text
        - value integer

  - MAP:
      NAME:      reverse_python
      FUNCTION:  |
        return (value, key)
      LANGUAGE:  python
      OPTIMIZE:  STRICT IMMUTABLE
      MODE:      SINGLE
      RETURNS:
        - key integer
        - value text
      
  - TASK:
      NAME:      email_histogram
      SOURCE:    email
      MAP:       wordsplit_python
      REDUCE:    SUM
        
EXECUTE:
  - RUN:
      SOURCE:    email_histogram
      MAP:       reverse_python
      TARGET:    out_1