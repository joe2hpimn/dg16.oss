-- --------------------------------------
-- caql
-- --------------------------------------

-- *********************************************************************
-- *********************************************************************
-- This script will produce diffs if you add or change caql/cql
-- definitions in src/. If you want to change the results, you must
-- make the changes in regress/output/caql.source, not
-- regress/expected, and use gpsourcify.pl to generate a ".source"
-- file.
--
-- From the regress directory invoke the command:
--
--    gpsourcify.pl results/caql.out  > output/caql.source
--
-- *********************************************************************
-- *********************************************************************
-- *********************************************************************
-- *********************************************************************

-- extra catalog coverage

create user caql_luser;
create user caql_super_luser SUPERUSER;

set role caql_luser;

-- create a role as an unpriv user (shouldn't work)
create role caql_fff;

drop role if exists caql_fff ;

-- create and comment on an operator and an operator class

create operator #~#~#
(
   rightarg = int8,              -- right unary
   procedure = numeric_fac
);

comment on operator #~#~# (int8, NONE) is 'bad operator';
comment on operator #~#~# (NONE, int8) is 'bad operator';

drop operator #~#~# (int8, NONE);
drop operator #~#~# (NONE, int8 );

-- try (and fail) renaming a language

alter LANGUAGE plpgsql RENAME TO funky;

select has_language_privilege('caql_luser', 14, 'USAGE');

select has_language_privilege('caql_luser', 14, 'USAGE WITH GRANT OPTION');


-- need privs to create op class and comment on language

set role caql_super_luser;
create operator class myi2ops
 for type int2 using btree as
        OPERATOR        1       < ,
        OPERATOR        2       <= ,
        OPERATOR        3       = ,
        OPERATOR        4       >= ,
        OPERATOR        5       > ,
        FUNCTION        1       btint2cmp(int2, int2);

comment on operator class myi2ops using btree is 'wow';

drop operator class myi2ops using btree;

comment on language sql is 'wow';
comment on language sql is null;

select has_language_privilege('caql_luser', 14, 'USAGE');

select has_language_privilege('caql_luser', 14, 'USAGE WITH GRANT OPTION');

select has_language_privilege('caql_super_luser', 14, 'USAGE');

select has_language_privilege('caql_super_luser', 14, 'USAGE WITH GRANT OPTION');

-- no privs
set role caql_luser;

CREATE or replace FUNCTION caql_timestamp(float8)
RETURNS pg_catalog.timestamptz
LANGUAGE sql CONTAINS SQL
IMMUTABLE STRICT AS $$select ('epoch'::timestamptz + $1 * '1 second'::interval)$$;

CREATE or replace FUNCTION caql_timestamp(float8)
RETURNS pg_catalog.timestamptz
LANGUAGE sql CONTAINS SQL
IMMUTABLE STRICT AS $$select ('epoch'::timestamptz + $1 * '1 second'::interval)$$;

CREATE TABLE log_table (tstamp timestamp default timeofday()::timestamp);

CREATE TABLE main_table (a int, b int);

CREATE FUNCTION trigger_func() RETURNS trigger LANGUAGE plpgsql NO SQL AS '
BEGIN
        RAISE NOTICE ''trigger_func() called: action = %, when = %, level = %'',
		TG_OP, TG_WHEN, TG_LEVEL;
        RETURN NULL;
END;';

CREATE TRIGGER before_ins_stmt_trig BEFORE INSERT ON main_table
FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();

comment on trigger before_ins_stmt_trig on main_table is 'wow';

-- rename of columns recurses to triggers

alter table main_table rename a to aaa;

alter table main_table rename b to bbb;

drop trigger before_ins_stmt_trig on main_table;

create table rtest_t1 (a int4, b int4);

create view rtest_v1 as select * from rtest_t1;
create rule rtest_v1_ins as on insert to rtest_v1 do instead
        insert into rtest_t1 values (new.a, new.b);

comment on rule rtest_v1_ins is 'wow';
comment on rule rtest_v1_ins on rtest_v1 is 'ok';

set constraints all deferred;

set constraints funky deferred;

-- start_ignore

-- need to ignore warnings for objects caql_luser does not own...

vacuum;

-- end_ignore

vacuum main_table;

vacuum full main_table;

analyze main_table;

CREATE TYPE funkytype AS (
       i int
);


CREATE FUNCTION toint(funkytype)
  RETURNS integer
  STRICT IMMUTABLE LANGUAGE SQL CONTAINS SQL AS
'SELECT 1;';

CREATE CAST (funkytype AS integer) WITH FUNCTION toint(funkytype);

comment on cast (funkytype AS integer) is 'wow';

grant all on language sql to caql_luser;

set role caql_super_luser;

grant all on language sql to caql_luser;

revoke usage on language sql from caql_luser;

CREATE FUNCTION caql_bootstrap_regproc() RETURNS text
  AS '@abs_builddir@/regress@DLSUFFIX@', 'caql_bootstrap_regproc'
  LANGUAGE C READS SQL DATA;
SELECT caql_bootstrap_regproc();
DROP FUNCTION caql_bootstrap_regproc();

CREATE FUNCTION check_get_atttypmod(oid, int) RETURNS integer
  AS '@abs_builddir@/regress@DLSUFFIX@', 'check_get_atttypmod'
  LANGUAGE C READS SQL DATA;
SELECT * FROM check_get_atttypmod(1255, 1);
DROP FUNCTION check_get_atttypmod(oid, int);

CREATE FUNCTION check_get_opname(oid) RETURNS text
  AS '@abs_builddir@/regress@DLSUFFIX@', 'check_get_opname'
  LANGUAGE C READS SQL DATA;
SELECT * FROM check_get_opname(15);
SELECT * FROM check_get_opname(0);
DROP FUNCTION check_get_opname(oid);

CREATE FUNCTION check_get_typ_typrelid(oid) RETURNS oid
  AS '@abs_builddir@/regress@DLSUFFIX@', 'check_get_typ_typrelid'
  LANGUAGE C READS SQL DATA;
SELECT * FROM check_get_typ_typrelid(1000);
DROP FUNCTION check_get_typ_typrelid(oid);

CREATE FUNCTION check_get_base_element_type(oid) RETURNS oid
  AS '@abs_builddir@/regress@DLSUFFIX@', 'check_get_base_element_type'
  LANGUAGE C READS SQL DATA;
SELECT * FROM check_get_base_element_type(1000);
DROP FUNCTION check_get_base_element_type(oid);

CREATE FUNCTION check_SPI_gettype(int4) RETURNS text
  AS '@abs_builddir@/regress@DLSUFFIX@', 'check_SPI_gettype'
  LANGUAGE C READS SQL DATA;
SELECT * FROM check_SPI_gettype(1);
DROP FUNCTION check_SPI_gettype(int4);

CREATE FUNCTION check_master_standby_dbid() RETURNS int2
  AS '@abs_builddir@/regress@DLSUFFIX@', 'check_master_standby_dbid'
  LANGUAGE C READS SQL DATA;
SELECT * FROM check_master_standby_dbid();
DROP FUNCTION check_master_standby_dbid();

CREATE FUNCTION check_my_mirror_dbid() RETURNS int2
  AS '@abs_builddir@/regress@DLSUFFIX@', 'check_my_mirror_dbid'
  LANGUAGE C READS SQL DATA;
SELECT * FROM check_my_mirror_dbid();
DROP FUNCTION check_my_mirror_dbid();

CREATE FUNCTION check_dbid_get_dbinfo(int2) RETURNS int2
  AS '@abs_builddir@/regress@DLSUFFIX@', 'check_dbid_get_dbinfo'
  LANGUAGE C READS SQL DATA;
SELECT * FROM check_dbid_get_dbinfo(1::int2);
DROP FUNCTION check_dbid_get_dbinfo(int2);

CREATE FUNCTION check_contentid_get_dbid(int2, "char", bool) RETURNS int2
  AS '@abs_builddir@/regress@DLSUFFIX@', 'check_contentid_get_dbid'
  LANGUAGE C READS SQL DATA;
SELECT * FROM check_contentid_get_dbid(-1::int2, 'p', true);
SELECT * FROM check_contentid_get_dbid(-1::int2, 'p', false);
DROP FUNCTION check_contentid_get_dbid(int2, "char", bool);

CREATE FUNCTION check_FtsFindSuperuser(bool) RETURNS text
  AS '@abs_builddir@/regress@DLSUFFIX@', 'check_FtsFindSuperuser'
  LANGUAGE C READS SQL DATA;
-- start_ignore
SELECT * FROM check_FtsFindSuperuser(false);
-- end_ignore
DROP FUNCTION check_FtsFindSuperuser(bool);

-- ---------------------------------------------------------------------
-- coverage for segadmin.c/filespace.c
-- ---------------------------------------------------------------------
CREATE FUNCTION check_gp_activate_standby(int2) RETURNS text
  AS '@abs_builddir@/regress@DLSUFFIX@', 'check_gp_activate_standby'
  LANGUAGE C READS SQL DATA;

-- we need configuration, but reading the table would hold a lock on it,
-- which blocks the subsequent remove/add operation.
create table gp_segment_configuration_copy as select * from gp_segment_configuration;
create or replace function gp_add_remove_segment() returns text as $$
declare
  lastseg_conf record;
  lastseg_fsentry record;
  newdbid smallint;
  result text;
begin
  select * into lastseg_conf
    from gp_segment_configuration_copy
    where role = 'p' order by dbid desc limit 1;
  select * into lastseg_fsentry
    from pg_filespace_entry
    where fsedbid = lastseg_conf.dbid;

  set gp_role = utility;
  select gp_add_segment(
    lastseg_conf.hostname,
    lastseg_conf.address,
    lastseg_conf.port + 1,
    array['pg_system', lastseg_fsentry.fselocation])
    into newdbid;
  perform gp_remove_segment(newdbid);

  result := 'ok';
  return result;
end;
$$ language plpgsql READS SQL DATA;
select gp_add_remove_segment();

-- restore from utility mode
\c regression

drop function gp_add_remove_segment();

create or replace function gp_add_remove_master_standby() returns int2 as $$
declare
  master_conf record;
  master_fsentry record;
  result int2;
begin
  select * into master_conf
    from gp_segment_configuration_copy
    where role = 'p' and dbid = 1;
  select * into master_fsentry
    from pg_filespace_entry
    where fsedbid = 1;

  set gp_role = utility;
  perform gp_add_master_standby(
    master_conf.hostname,
    master_conf.address,
    array[['pg_system', master_fsentry.fselocation]]);
  perform gp_remove_master_standby();

  -- for gp_activate_standby, add it once more
  select gp_add_master_standby(
    master_conf.hostname,
    master_conf.address,
    array[['pg_system', master_fsentry.fselocation]])
    into result;

  return result;
end;
$$ language plpgsql READS SQL DATA;
select check_gp_activate_standby(gp_add_remove_master_standby());

-- restore from utility mode
\c regression

drop table gp_segment_configuration_copy;

drop function gp_add_remove_master_standby();
DROP FUNCTION check_gp_activate_standby(int2);

CREATE FUNCTION check_GetResqueueName(oid) RETURNS text
  AS '@abs_builddir@/regress@DLSUFFIX@', 'check_GetResqueueName'
  LANGUAGE C READS SQL DATA;
select check_GetResqueueName(6055);
DROP FUNCTION check_GetResqueueName(oid);

CREATE FUNCTION check_GetFuncSQLDataAccess(oid) RETURNS text
  AS '@abs_builddir@/regress@DLSUFFIX@', 'check_GetFuncSQLDataAccess'
  LANGUAGE C READS SQL DATA;
select check_GetFuncSQLDataAccess('check_GetFuncSQLDataAccess'::regproc);
DROP FUNCTION check_GetFuncSQLDataAccess(oid);

-- cleanup (as caql_super_luser)

drop type funkytype;

-- need the cascade to the cast
drop type funkytype cascade;

-- should be superfluous after the cascade
DROP CAST (funkytype AS integer) ;

drop table main_table cascade;
drop table log_table cascade;

drop table rtest_t1 cascade;

drop function trigger_func();

drop function caql_timestamp(float8);

-- back to "normal"
reset role;

drop role caql_luser;
drop role caql_super_luser;




