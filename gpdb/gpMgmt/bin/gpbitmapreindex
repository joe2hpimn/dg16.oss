#!/usr/bin/env python
#
# Copyright (c) Greenplum Inc 2008. All Rights Reserved.
#

try:
    import signal
    import sys
    from optparse import OptionGroup
    from gppylib.gpparseopts import OptParser, OptChecker
    from gppylib.gplog import *
    from gppylib.db import dbconn
    from gppylib.db import catalog
    from gppylib.commands.unix import *
    from gppylib.commands.base import *
    from gppylib.userinput import *
    from pygresql.pg import DatabaseError
except ImportError, e:
    sys.exit('ERROR: Cannot import modules.  Please check ' \
             'that you have sourced greenplum_path.sh.  Detail: ' + str(e))

_description = ("""Reindexes all bitmap indexes in a Greenplum Database.""")
_help = ['']

EXECNAME = os.path.split(__file__)[-1]

MAX_PARALLEL_REINDEX=16

GET_BITMAP_INDEXES_SQL="""
SELECT pg_class.oid, relname 
FROM pg_class, pg_am 
WHERE pg_class.relam = pg_am.oid 
AND pg_am.amname = 'bitmap'
"""

GET_BITMAP_INDEX_DEF_SQL="""
SELECT pg_get_indexdef(%s)
"""

REINDEX_SQL="""
REINDEX INDEX "%s"
"""

DROP_INDEX_SQL="""
DROP INDEX "%s"
"""

class DropIndexCommand(SQLCommand):
    """This command issues a DROP INDEX SQL statement to a Greenplum database."""
    
    def __init__(self,name,hostname, port, db_name, idx_name):
        self.db_name = db_name
        self.idx_name = idx_name
        self.hostname = hostname
        self.port = port
        # The cmdStr isn't actually used except for logging in this class
        self.cmdStr = DROP_INDEX_SQL % idx_name

        SQLCommand.__init__(self,name)
        pass

    def run(self,validateAfter=False):
        dburl = dbconn.DbURL(hostname=self.hostname, port=self.port, 
                             dbname=self.db_name)

        try:
            conn = dbconn.connect(dburl)
            # Have to set this so SQLCommand can cancel if needed.
            self.cancel_conn = conn
        except DatabaseError, ex:
            logger.error('Failed to connect to database %s' % self.db_name)
            if options.verbose:
                logger.exception(ex)
            logger.error('Drop of index %s in database %s failed' % (self.idx_name, self.db_name))
            return

        try:
            logger.info('Dropping index %s in database %s...' % 
                        (self.idx_name, self.db_name))
            # do the actual reindex
            dbconn.execSQL(conn, DROP_INDEX_SQL % self.idx_name)
            conn.commit()
        except Exception, ex:
            logger.error('Failed to drop index %s in database %s' % 
                         (self.idx_name, self.db_name))
        finally:
            conn.close()



class ReindexCommand(SQLCommand):
    """This command issues a REINDEX SQL statement to a Greenplum database."""
    
    def __init__(self,name,hostname, port, db_name, idx_name):
        self.db_name = db_name
        self.idx_name = idx_name
        self.hostname = hostname
        self.port = port
        # The cmdStr isn't actually used except for logging in this class
        self.cmdStr = REINDEX_SQL % idx_name

        SQLCommand.__init__(self,name)
        pass

    def run(self,validateAfter=False):
        dburl = dbconn.DbURL(hostname=self.hostname, port=self.port, 
                             dbname=self.db_name)

        try:
            conn = dbconn.connect(dburl)
            # Have to set this so SQLCommand can cancel if needed.
            self.cancel_conn = conn
        except DatabaseError, ex:
            logger.error('Failed to connect to database %s' % self.db_name)
            if options.verbose:
                logger.exception(ex)
            logger.error('Reindex of %s in database %s failed' % (self.idx_name, self.db_name))
            return

        try:
            logger.info('Reindexing %s in database %s...' % 
                        (self.idx_name, self.db_name))
            # do the actual reindex
            dbconn.execSQL(conn, REINDEX_SQL % self.idx_name)
            conn.commit()
        except Exception, ex:
            logger.error('Failed to reindex %s in database %s' % 
                         (self.idx_name, self.db_name))
        finally:
            conn.close()


def parseargs():
    """Parses command line options and validates them."""
    
    parser = OptParser(option_class=OptChecker,
                description=' '.join(_description.split()),
                version='%prog version $Revision$')

    parser.setHelp(_help)
    parser.remove_option('-h')

    optgrp = OptionGroup(parser, 'Database Options')
    optgrp.add_option('-h', '--hostname', type='string', default='localhost',
                      help='Master hostname.')
    optgrp.add_option('-p', '--port', type='int', default='0',
                      help='Master port.')
    parser.add_option_group(optgrp)
    
    optgrp = OptionGroup(parser, 'Concurrency Options')
    optgrp.add_option('-n', '--parallel', type="int", default=1, 
                      metavar="<parallel_processes>",
                      help='number of bitmap indexes to re-index at a time. ' \
                      'Valid values are 1-%d. (Default: 1)' % MAX_PARALLEL_REINDEX)
    parser.add_option_group(optgrp)
    
    optgrp = OptionGroup(parser, 'Mode Options')
    optgrp.add_option('-m', '--mode', type='choice', choices=['d','drop','r','reindex', 'l', 'list'],
                      help='Mode of operation.  Can be either r[eindex], d[rop] or l[ist].  '
                      '\'list\' can be used with --outfile to dump the CREATE INDEX sql file')
    parser.add_option_group(optgrp)
    
    optgrp = OptionGroup(parser, 'Logging Options')
    optgrp.add_option('-o', '--outfile', type='string', metavar='<outfile>', 
                      help='Create a sql file containing the CREATE INDEX sql of all bitmap indexes.' 
                      'These statements will be written as the indexes are dropped or reindexed.')
    optgrp.add_option('-v','--verbose', action='store_true', help='Debug output.')
    parser.add_option_group(optgrp)

    optgrp = OptionGroup(parser, 'Help Options')
    optgrp.add_option('-?', '--help', action='store_true', 
                      help='Display this message and exit.')
    parser.add_option_group(optgrp)

    parser.set_defaults(hostname=None, port=0, verbose=False, mode='reindex',
                        filters=[], slice=(None, None))

    # Parse the command line arguments
    (options, args) = parser.parse_args()
    
    if options.help:
        parser.print_help()
        parser.exit(0)

    # validate the options
    if options.parallel < 1 or options.parallel > MAX_PARALLEL_REINDEX:
        logger.error('Invalid -n option given.  Value must be from 1 to 16.')
        parser.exit(1)
        
    if options.port >= 65535:
        logger.error('Invalid port given.  Value must be less than 65535.')
        parser.exit(1)
        
    if options.mode not in ['d', 'drop', 'r', 'reindex', 'l', 'list']:
        logger.error('Invalid mode option.  Must be either \'drop\', \'reindex\', or \'list\'.')
        parser.exit(1)
        
    if options.mode == 'drop' or options.mode == 'd':
        logger.warn('The drop mode of operation will drop all bitmap indexes that exist.')
        logger.warn('This is not a recoverable operation.  You will need to recreate all')
        logger.warn('bitmap indexes if you want to restore them.')
        yn = ask_yesno('', "Are you sure you want to drop all bitmap indexes?",'N')
        if not yn:
            logger.info('Operation canceled by user.')
            parser.exit(1)
        
    return options, args


def get_bitmap_indexes(options):
    """Gets a list of all bitmap indexes on the system"""
    
    bitmap_indexes = []
    
    dburl = dbconn.DbURL(hostname=options.hostname,port=options.port)
    conn = dbconn.connect(dburl)
    
    try:
        # note: catalog.getUserDatabaseList returns an array of arrays of len 1.
        # That should probably be fixed at some point...
        databases = catalog.getUserDatabaseList(conn)
        conn.close()
        for db in databases:
            logger.info('Retrieving bitmap indexes from database %s...' % db[0])
            dburl = dbconn.DbURL(hostname=options.hostname,
                                 port=options.port,dbname=db[0])
            conn = dbconn.connect(dburl)
            cur = dbconn.execSQL(conn, GET_BITMAP_INDEXES_SQL)
            for idx in cur:
                logger.debug('Adding bitmap index %s from database %s' % 
                             (idx[0], db[0]))
                bitmap_indexes.append((db[0], idx[0], idx[1]))
            conn.close()
    except:
        raise
    
    return bitmap_indexes


def get_bitmap_index_def(options, db_name, oid):
    conn = None
    try:
        dburl = dbconn.DbURL(hostname=options.hostname, port=options.port, dbname=db_name)
        conn = dbconn.connect(dburl)
        index_def = dbconn.execSQL(conn, GET_BITMAP_INDEX_DEF_SQL % oid).fetchall()
        if len(index_def) == 1:
            return index_def[0][0]
        else:
            return None
    except:
        pass
    finally:
        if conn:
            conn.close()

def update_bitmap_indexes(options, bitmap_indexes):
    """Creates a worker pool and adds a command for every index
    that needs to be reindexed or dropped."""
    
    pool = WorkerPool(numWorkers=options.parallel)
    fp = None
    dburl = dbconn.DbURL(hostname=options.hostname, port=options.port)
    try:
        if options.outfile:
            fp = open(options.outfile, 'w')
        for (db_name, idx_oid, idx_name) in bitmap_indexes:
            logger.debug('Adding reindex command for %s in database %s to pool.' % 
                         (idx_name, db_name))
            if options.outfile:
                index_def = get_bitmap_index_def(options, db_name, idx_oid)
                if index_def:
                    fp.write("\\c %s;\n" % db_name)
                    fp.write("%s;\n\n" % index_def)
            if options.mode == 'reindex' or options.mode == 'r':
                cmd = ReindexCommand('Reindex %s' % idx_name, dburl.pghost, 
                                     dburl.pgport, db_name, idx_name)
                pool.addCommand(cmd)
            elif options.mode == 'drop' or options.mode == 'd':
                cmd = DropIndexCommand('Drop Index %s' % idx_name, dburl.pghost,
                                       dburl.pgport, db_name, idx_name)
                pool.addCommand(cmd)
            elif options.mode == 'list' or options.mode == 'l':
                logger.info('Bitmap index: %s.%s' % (db_name, idx_name))
            else:
                # just a safety check, but this should have been caught in the 
                # option parser.
                logger.error('Invalid mode.  Exiting...')
                sys.exit(1)
            
    except Exception, ex:
        pool.haltWork()
        pool.joinWorkers()
        raise ex

    logger.info('Waiting for workers to finish...')
    try:
        # Sit in a loop waiting for cancel or completion
        while not pool.isDone():
            time.sleep(.5)
    except KeyboardInterrupt:
        logger.info('User canceled')
        pool.haltWork()
        
    try:
        # We are done
        pool.haltWork()
        pool.joinWorkers()
    except:
        # Ok to ignore this, we are done.
        pass
    
    if fp:
        fp.close()


logger = get_default_logger()
setup_tool_logging(EXECNAME,getLocalHostname(),getUserName())

options, args = parseargs()

try:
    if options.verbose:
        enable_verbose_logging()
        
    bitmap_indexes = get_bitmap_indexes(options)
    update_bitmap_indexes(options, bitmap_indexes)
    logger.info('Done.')
except Exception, ex:
    logger.error('There was an error during reindexing: %s' % ex.__str__())
    if options.verbose:
        logger.exception(ex)
finally:
    pass