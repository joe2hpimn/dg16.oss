%YAML 1.1
---
VERSION:         1.0.0.1
DATABASE:        @db_user@
USER:            @db_user@

DEFINE:
  - INPUT:
      NAME:      mp
      TABLE:     member_summary

  - INPUT:
      NAME:      kw
      TABLE:     keywords

  # Original example used nltk to do word stemming and tokenization
  # this version for testing simply does a brain dead space delimited
  # tokenization and does no stemming.
  #
  # The reason for this simplification is that we do not have nltk
  # installed on all machines.
  - MAP:
      NAME:       mp_map
      LANGUAGE:   python
      FUNCTION:  |
        i         = 0
        terms     = {}
        for token in text.lower().split():
          i = i + 1
          stem = token
          if stem in terms:
            terms[stem].append(i)
          else:
            terms[stem] = [i]
        for term in terms:
          yield([member_id, term, terms[term]])
      OPTIMIZE:   STRICT IMMUTABLE
      MODE:       MULTI
      PARAMETERS:
        - member_id integer
        - text      text
      RETURNS:
        - member_id integer
        - term      text
        - positions text

  - MAP:
      NAME:       kw_map
      LANGUAGE:   python
      FUNCTION:  |
        i         = 0
        terms     = {}
        for token in keyword.lower().split():
          i = i + 1
          stem = token
          if stem in terms:
            terms[stem].append(i)
          else:
            terms[stem] = [i]
        for term in terms:
          yield([keyword_id, i, term, terms[term]])
      OPTIMIZE:   STRICT IMMUTABLE
      MODE:       MULTI
      PARAMETERS:
        - keyword_id   integer
        - keyword      text
      RETURNS:
        - keyword_id integer
        - nterms     integer
        - term       text
        - positions  text

  - TASK:
      NAME:      mp_prep
      SOURCE:    mp
      MAP:       mp_map
      
  - TASK:
      NAME:      kw_prep
      SOURCE:    kw
      MAP:       kw_map

  - INPUT:
      NAME:      term_join
      QUERY:     |
        SELECT mp.member_id, kw.keyword_id, mp.term, kw.nterms,
               mp.positions as mp_positions,
               kw.positions as kw_positions
          FROM mp_prep mp INNER JOIN kw_prep kw ON (mp.term = kw.term)

  - REDUCE:
      NAME:       term_reducer
      TRANSITION: term_transition
      FINALIZE:   term_finalizer

  - TRANSITION:
      NAME:       term_transition
      LANGUAGE:   python
      PARAMETERS:
        - state   text
        - term    text
        - nterms  integer
        - mp_positions  text
        - kw_positions  text
      FUNCTION:   |
        # STATE initialized to: ''
        # STATE is: 'member positions:member positions: ...'
        # STATE can be '1,3,2:4:'
        if state:
          kw_split = state.split(':')
        else:
          kw_split = []
          for i in range(0,nterms):
            kw_split.append('')
            
        # add mp_positions for the current term
        for kw_p in kw_positions[1:-1].split(','):
          kw_split[int(kw_p)-1] = mp_positions

        # reconstruct the delimited state
        outstate = kw_split[0]
        for s in kw_split[1:]:
          outstate = outstate + ':' + s
        return outstate

  - FINALIZE:
      NAME:      term_finalizer
      LANGUAGE:  python
      MODE:      SINGLE
      RETURNS:
        - count integer
      FUNCTION:  |
        if not state:
          return 0
        kw_split = state.split(':')

        # We adjust each member position list based on
        # the offset of the term in the keyword and then
        # intesect all resulting lists
        previous = None
        for i in range(0,len(kw_split)):
          isplit   = kw_split[i][1:-1].split(',')
          if any(map(lambda(x): x == '', isplit)):
            return 0
          adjusted = set(map(lambda(x): int(x)-i, isplit))
          if (previous):
            previous = adjusted.intersection(previous)
          else:
            previous = adjusted

        # return the final count
        if previous:
          return len(previous)
        return 0

  - TASK:
      NAME:    term_match
      SOURCE:  term_join
      REDUCE:  term_reducer

  - INPUT:
      NAME:  final_join
      QUERY:  |
        SELECT ms.*, kw.*, tm.count 
        FROM member_summary ms, keywords kw, term_match tm
        WHERE ms.member_id = tm.member_id
          AND kw.keyword_id = tm.keyword_id
          AND tm.count > 0

  - OUTPUT:
      NAME:      final_output_replace
      TABLE:     member_keywords_1
      MODE:      REPLACE

  - OUTPUT:
      NAME:      final_output_append
      TABLE:     member_keywords_2
      MODE:      APPEND

EXECUTE:
  - RUN:
      SOURCE:    final_join
      TARGET:    final_output_replace

  - RUN:
      SOURCE:    final_join
      TARGET:    final_output_replace

  - RUN:
      SOURCE:    final_join
      TARGET:    final_output_append

  - RUN:
      SOURCE:    final_join
      TARGET:    final_output_append      