%YAML 1.1
---  
VERSION:   1.0.0.1
USER:      @db_user@

DEFINE:

# A sample of www link data
#      137,941 distinct source pages
#      325,729 distinct linked pages
#    1,497,135 total links
  - INPUT:
      NAME:      network
      FILE:      @hostname@:@abs_srcdir@/data/www.small.dat
      COLUMNS:
        - key integer
        - value integer
      DELIMITER: '|'

  - OUTPUT:
      NAME:     out_1
      FILE:     @abs_srcdir@/output/graph.1
      DELIMITER: '|'
      
  - OUTPUT:
      NAME:     out_2
      FILE:     @abs_srcdir@/output/graph.2
      DELIMITER: '|'
      
  - OUTPUT:
      NAME:     out_3
      FILE:     @abs_srcdir@/output/graph.3
      DELIMITER: '|'
            
# One thing about the Greenplum MapReduce is that it allows you to
# express calculations in whatever method is easiest.  Here we use
# SQL to transform the above input from key, value pairs to sparse
# matrix representation.
#  - INPUT:
#      NAME:    sparse_network
#      QUERY: |
#        SELECT key, 0.85 as pagerank, array_accum(value) as value
#        FROM network
#        GROUP BY key
        
# Reverse()
#   Takes a (key, value) tuple and produces a new tuple of (value, key)
#   taking the input graph and producing the reverse graph
#   => It would be faster to have simply reversed the names in the input
  - MAP:
      NAME:     reverse
      LANGUAGE: python
      PARAMETERS:
        - key integer
        - value integer
      RETURNS:
        - key integer
        - value integer
      MODE: SINGLE
      FUNCTION:     |
        return {'key': value, 'value': key}
        
# pcount()
#   Implements a count aggregator in python
#   => native sql count is about 12x faster
  - TRANSITION:
      NAME:       pcount
      LANGUAGE:   python
      PARAMETERS:
        - state integer
        - value integer
      RETURNS:
        - state integer
      FUNCTION:    return state + 1      

  - REDUCE:
      NAME:        traverse
      INITIALIZE:  0
      TRANSITION:  pcount

      
EXECUTE:

# This counts the number of links coming FROM a page
  - RUN:
      SOURCE:  network
      REDUCE:  traverse
      TARGET:  out_1
      
# This counts the number of links going TO a page.  
  - RUN:
      SOURCE:  network
      MAP:     reverse
      REDUCE:  traverse
      TARGET:  out_2

  - RUN:
      SOURCE:  network
      TARGET:  out_3