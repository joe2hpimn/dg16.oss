<?xml version="1.0" encoding="UTF-8"?>
<project name="gphdfs" default="all" xmlns:ivy="antlib:org.apache.ivy.ant">

  <property file="build.properties" />
  <property environment="env" />

  <!-- Compiler options -->
  <property name="src.dir" value="${basedir}/src/java/${gpgnet.src}" />
  <property name="test.dir" value="${basedir}/src/test" />
  <property name="lib.dir" value="${basedir}/build/lib" />
  <property name="build.dir" value="${basedir}/build" />
  <property name="javadoc.dir" value="${basedir}/${gphdgnet.version}-javadoc" />
  <property name="dist.dir" value="${basedir}/dist" />
  <property name="test.src.dir" value="${basedir}/src/test"/>
  <property name="test.build.dir" value="${build.dir}/test"/>
  
  <!-- Java Doc -->
  <property name="javadoc.link.java" value="http://java.sun.com/javase/6/docs/api/"/>
  <property name="javadoc.link.hadoop" value="http://hadoop.apache.org/common/docs/r0.20.2/api/"/>

  <!--Apache Ivy(http://ant.apache.org/ivy/history/latest-milestone/install.html) -->
  <loadproperties srcfile="${basedir}/ivy/libraries.properties" />
  <property name="build.ivy.lib.dir" value="${build.dir}/lib" />
  <property name="ivy.artifact.retrieve.pattern" value="[artifact]-[revision](-[classifier]).[ext]" />
  <property name="ivy.install.version" value="2.2.0" />
  <condition property="ivy.home" value="${env.IVY_HOME}">
    <isset property="env.IVY_HOME" />
  </condition>
  <property name="ivy.home" value="${user.home}/.ant" />
  <property name="ivy.jar.dir" value="${ivy.home}/lib" />
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

  <patternset id="library.patterns">
    <include name="*.jar" />
    <include name="hadoop-${hadoop.version}/*.jar" />
  </patternset>

  <property name="gpgnet.configuration" value="compile"/>
  <!-- Project Libraries -->
  
  <path id="pig.classpath">
    <fileset file="${lib.dir}/hadoop-${hadoop.version}/pig-*-core.jar" />
  </path>

  <path id="library.commons.classpath">
    <fileset dir="${lib.dir}">
      <patternset refid="library.patterns" />
    </fileset>
    <path refid="ivy-classpath" />
  </path>

  <target name="init" description="Build initialization">
  </target>

  <target name="clean">
    <delete dir="${build.dir}" />
  </target>

  <target name="compile" depends="ivy-retrieve-hadoop">
    <mkdir dir="${build.dir}/classes" />
    <javac classpathref="library.commons.classpath"
           destdir="${build.dir}/classes"
           includeantruntime="${compiler.includeantruntime}"
           debug="${compiler.debug}"
           deprecation="${compiler.deprecation}"
           nowarn="${compiler.generate.no.warnings}"
           fork="yes"
           verbose="${compiler.verbose}"
           memoryMaximumSize="${compiler.max.memory}">
      <src path="${src.dir}" />
    </javac>

  </target>

  <target name="dist" depends="compile">
    <mkdir dir="${dist.dir}" />
    <tstamp>
        <format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss" />
    </tstamp>

    <jar destfile="${dist.dir}/${gphdgnet.version}.jar">
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-Date" value="${TODAY}"/> 
      </manifest>
      <fileset dir="${build.dir}/classes" includes="**/*.class"/>
    </jar>
  </target>

  <target name="all" depends="dist" description="build all" />

  <!-- Ivy -->
  <target name="ivy-probe-antlib">
    <condition property="ivy.found">
      <typefound uri="antlib:org.apache.ivy.ant" name="cleancache" />
    </condition>
  </target>

  <target name="download-ivy" unless="offline">
    <mkdir dir="${ivy.jar.dir}" />
    <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true" />
  </target>

  <target name="ivy-init" depends="download-ivy">
    <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar" />
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
  </target>

  <target name="ivy-retrieve-hadoop" depends="ivy-init"
          description="--> Retrieve Ivy-managed artifacts for the compile configurations">
    <ivy:settings id="basic.settings" file="ivysettings.xml"/>
	<ivy:retrieve settingsRef="basic.settings" pattern="${build.ivy.lib.dir}/${ivy.artifact.retrieve.pattern}" sync="true" conf="${gpgnet.configuration}"/>
	<ivy:cachepath pathid="ivy-classpath" conf="${gpgnet.configuration}"/>
  </target>

  <target name="ivy-retrieve-checkstyle"
          description="Retrieve Ivy-managed artifacts for the checkstyle configurations">
    <ivy:retrieve pattern="${build.ivy.lib.dir}/${ivy.artifact.retrieve.pattern}"/>
    <ivy:cachepath pathid="checkstyle-classpath" conf="checkstyle"/>
  </target>

  <!-- ================================================================== -->
  <!-- Run optional third-party tool targets                              --> 
  <!-- ================================================================== -->

  <target name="checkstyle" depends="ivy-retrieve-checkstyle,check-for-checkstyle" if="checkstyle.present" description="Run optional third-party tool targets">
       <taskdef resource="checkstyletask.properties">
         <classpath refid="checkstyle-classpath"/>
       </taskdef>
  
	<mkdir dir="${test.build.dir}"/>
  	
  	<checkstyle config="${test.src.dir}/sun_checks.xml"
  		failOnViolation="false">
      <fileset dir="${src.dir}" includes="*.java"/>
      <formatter type="xml" toFile="${test.build.dir}/checkstyle-errors.xml"/>
  	</checkstyle>

  	<xslt style="${test.src.dir}/checkstyle-noframes-sorted.xsl"
        in="${test.build.dir}/checkstyle-errors.xml"
        out="${test.build.dir}/checkstyle-errors.html"/>
  </target>
	
  <target name="check-for-checkstyle">
    <available property="checkstyle.present" resource="checkstyletask.properties">
       <classpath refid="checkstyle-classpath"/>
    </available>  	
  </target>

  <target name="javadoc" depends="ivy-retrieve-hadoop" description="Create Javadocs">
    <delete dir="${javadoc.dir}" />
    <mkdir dir="${javadoc.dir}"/>
    <javadoc destdir="${javadoc.dir}"
             author="false"
             classpathref="library.commons.classpath"
             additionalparam="-J-Dorg.apache.commons.attributes.javadoc.CATaglet.sources=${basedir}">
      <fileset dir="${src.dir}/com/emc/greenplum/gpdb/hadoop" includes="**/*.java" excludes="**/test/*.java"/>
      <link href="${javadoc.link.hadoop}"/>
      <link href="${javadoc.link.java}"/>
    </javadoc>
  </target>

  <!-- Following targets are used to run UT -->

  <target name="compile-ut" depends="ivy-retrieve-hadoop">
    <mkdir dir="${build.dir}/classes" />
    <javac classpathref="library.commons.classpath"
           destdir="${build.dir}/classes"
           includeantruntime="${compiler.includeantruntime}"
           debug="${compiler.debug}"
           deprecation="${compiler.deprecation}"
           nowarn="${compiler.generate.no.warnings}"
           fork="yes"
           verbose="${compiler.verbose}"
           memoryMaximumSize="${compiler.max.memory}">
      <src path="${test.dir}" />
    </javac>

  </target>



  <target name="test" depends="compile, compile-ut"> 

    <condition property="result.home" value="${env.BLDWRAP_TOP}/src/result" else="./result">
        <isset property="env.BLDWRAP_TOP" />
    </condition>

    <mkdir dir="${result.home}"/>
    <junit>
        <formatter type="plain" usefile="false" />
        <formatter type="xml" />
        <classpath>
            <pathelement path="${build.dir}/classes"/>
        </classpath>
        <classpath refid="library.commons.classpath" />
        <batchtest todir="${result.home}">
            <fileset dir="${build.dir}/classes" includes="**/Test*.class" />
        </batchtest>
    </junit>
  </target>
</project>
