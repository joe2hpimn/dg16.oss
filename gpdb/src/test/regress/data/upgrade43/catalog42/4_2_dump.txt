CREATE AGGREGATE pg_catalog.array_agg(pg_catalog.anyelement) (   SFUNC     = array_agg_transfn,   STYPE     = pg_catalog.internal,   FINALFUNC = array_agg_finalfn );
CREATE AGGREGATE pg_catalog.array_sum(pg_catalog._int4) (   SFUNC     = array_add,   STYPE     = pg_catalog._int4,   PREFUNC   = array_add,   INITCOND  = '{}' );
CREATE AGGREGATE pg_catalog.avg(pg_catalog."interval") (   SFUNC     = interval_accum,   STYPE     = pg_catalog._interval,   PREFUNC   = interval_amalg,   FINALFUNC = interval_avg,   INITCOND  = '{0 second,0 second}' );
CREATE AGGREGATE pg_catalog.avg(pg_catalog."numeric") (   SFUNC     = numeric_avg_accum,   STYPE     = pg_catalog.bytea,   PREFUNC   = numeric_avg_amalg,   FINALFUNC = numeric_avg,   INITCOND  = '' );
CREATE AGGREGATE pg_catalog.avg(pg_catalog.float4) (   SFUNC     = float4_avg_accum,   STYPE     = pg_catalog.bytea,   PREFUNC   = float8_avg_amalg,   FINALFUNC = float8_avg,   INITCOND  = '' );
CREATE AGGREGATE pg_catalog.avg(pg_catalog.float8) (   SFUNC     = float8_avg_accum,   STYPE     = pg_catalog.bytea,   PREFUNC   = float8_avg_amalg,   FINALFUNC = float8_avg,   INITCOND  = '' );
CREATE AGGREGATE pg_catalog.avg(pg_catalog.int2) (   SFUNC     = int2_avg_accum,   STYPE     = pg_catalog.bytea,   PREFUNC   = int8_avg_amalg,   FINALFUNC = int8_avg,   INITCOND  = '' );
CREATE AGGREGATE pg_catalog.avg(pg_catalog.int4) (   SFUNC     = int4_avg_accum,   STYPE     = pg_catalog.bytea,   PREFUNC   = int8_avg_amalg,   FINALFUNC = int8_avg,   INITCOND  = '' );
CREATE AGGREGATE pg_catalog.avg(pg_catalog.int8) (   SFUNC     = int8_avg_accum,   STYPE     = pg_catalog.bytea,   PREFUNC   = int8_avg_amalg,   FINALFUNC = int8_avg,   INITCOND  = '' );
CREATE AGGREGATE pg_catalog.bit_and(pg_catalog."bit") (   SFUNC     = bitand,   STYPE     = pg_catalog."bit",   PREFUNC   = bitand );
CREATE AGGREGATE pg_catalog.bit_and(pg_catalog.int2) (   SFUNC     = int2and,   STYPE     = pg_catalog.int2,   PREFUNC   = int2and );
CREATE AGGREGATE pg_catalog.bit_and(pg_catalog.int4) (   SFUNC     = int4and,   STYPE     = pg_catalog.int4,   PREFUNC   = int4and );
CREATE AGGREGATE pg_catalog.bit_and(pg_catalog.int8) (   SFUNC     = int8and,   STYPE     = pg_catalog.int8,   PREFUNC   = int8and );
CREATE AGGREGATE pg_catalog.bit_or(pg_catalog."bit") (   SFUNC     = bitor,   STYPE     = pg_catalog."bit",   PREFUNC   = bitor );
CREATE AGGREGATE pg_catalog.bit_or(pg_catalog.int2) (   SFUNC     = int2or,   STYPE     = pg_catalog.int2,   PREFUNC   = int2or );
CREATE AGGREGATE pg_catalog.bit_or(pg_catalog.int4) (   SFUNC     = int4or,   STYPE     = pg_catalog.int4,   PREFUNC   = int4or );
CREATE AGGREGATE pg_catalog.bit_or(pg_catalog.int8) (   SFUNC     = int8or,   STYPE     = pg_catalog.int8,   PREFUNC   = int8or );
CREATE AGGREGATE pg_catalog.bool_and(pg_catalog.bool) (   SFUNC     = booland_statefunc,   STYPE     = pg_catalog.bool,   PREFUNC   = booland_statefunc );
CREATE AGGREGATE pg_catalog.bool_or(pg_catalog.bool) (   SFUNC     = boolor_statefunc,   STYPE     = pg_catalog.bool,   PREFUNC   = boolor_statefunc );
CREATE AGGREGATE pg_catalog.corr(pg_catalog.float8, pg_catalog.float8) (   SFUNC     = float8_regr_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_regr_amalg,   FINALFUNC = float8_corr,   INITCOND  = '{0,0,0,0,0,0}' );
CREATE AGGREGATE pg_catalog.count() (   SFUNC     = int8inc,   STYPE     = pg_catalog.int8,   PREFUNC   = int8pl,   INITCOND  = '0' );
CREATE AGGREGATE pg_catalog.count(pg_catalog."any") (   SFUNC     = int8inc_any,   STYPE     = pg_catalog.int8,   PREFUNC   = int8pl,   INITCOND  = '0' );
CREATE AGGREGATE pg_catalog.covar_pop(pg_catalog.float8, pg_catalog.float8) (   SFUNC     = float8_regr_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_regr_amalg,   FINALFUNC = float8_covar_pop,   INITCOND  = '{0,0,0,0,0,0}' );
CREATE AGGREGATE pg_catalog.covar_samp(pg_catalog.float8, pg_catalog.float8) (   SFUNC     = float8_regr_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_regr_amalg,   FINALFUNC = float8_covar_samp,   INITCOND  = '{0,0,0,0,0,0}' );
CREATE AGGREGATE pg_catalog.every(pg_catalog.bool) (   SFUNC     = booland_statefunc,   STYPE     = pg_catalog.bool,   PREFUNC   = booland_statefunc );
CREATE AGGREGATE pg_catalog.max(pg_catalog."interval") (   SFUNC     = interval_larger,   STYPE     = pg_catalog."interval",   PREFUNC   = interval_larger,   SORTOP    = ">" );
CREATE AGGREGATE pg_catalog.max(pg_catalog."numeric") (   SFUNC     = numeric_larger,   STYPE     = pg_catalog."numeric",   PREFUNC   = numeric_larger,   SORTOP    = ">" );
CREATE AGGREGATE pg_catalog.max(pg_catalog."time") (   SFUNC     = time_larger,   STYPE     = pg_catalog."time",   PREFUNC   = time_larger,   SORTOP    = ">" );
CREATE AGGREGATE pg_catalog.max(pg_catalog."timestamp") (   SFUNC     = timestamp_larger,   STYPE     = pg_catalog."timestamp",   PREFUNC   = timestamp_larger,   SORTOP    = ">" );
CREATE AGGREGATE pg_catalog.max(pg_catalog.abstime) (   SFUNC     = int4larger,   STYPE     = pg_catalog.abstime,   PREFUNC   = int4larger,   SORTOP    = ">" );
CREATE AGGREGATE pg_catalog.max(pg_catalog.anyarray) (   SFUNC     = array_larger,   STYPE     = pg_catalog.anyarray,   PREFUNC   = array_larger,   SORTOP    = ">" );
CREATE AGGREGATE pg_catalog.max(pg_catalog.bpchar) (   SFUNC     = bpchar_larger,   STYPE     = pg_catalog.bpchar,   PREFUNC   = bpchar_larger,   SORTOP    = ">" );
CREATE AGGREGATE pg_catalog.max(pg_catalog.date) (   SFUNC     = date_larger,   STYPE     = pg_catalog.date,   PREFUNC   = date_larger,   SORTOP    = ">" );
CREATE AGGREGATE pg_catalog.max(pg_catalog.float4) (   SFUNC     = float4larger,   STYPE     = pg_catalog.float4,   PREFUNC   = float4larger,   SORTOP    = ">" );
CREATE AGGREGATE pg_catalog.max(pg_catalog.float8) (   SFUNC     = float8larger,   STYPE     = pg_catalog.float8,   PREFUNC   = float8larger,   SORTOP    = ">" );
CREATE AGGREGATE pg_catalog.max(pg_catalog.gpxlogloc) (   SFUNC     = gpxlogloclarger,   STYPE     = pg_catalog.gpxlogloc,   PREFUNC   = gpxlogloclarger,   SORTOP    = ">" );
CREATE AGGREGATE pg_catalog.max(pg_catalog.int2) (   SFUNC     = int2larger,   STYPE     = pg_catalog.int2,   PREFUNC   = int2larger,   SORTOP    = ">" );
CREATE AGGREGATE pg_catalog.max(pg_catalog.int4) (   SFUNC     = int4larger,   STYPE     = pg_catalog.int4,   PREFUNC   = int4larger,   SORTOP    = ">" );
CREATE AGGREGATE pg_catalog.max(pg_catalog.int8) (   SFUNC     = int8larger,   STYPE     = pg_catalog.int8,   PREFUNC   = int8larger,   SORTOP    = ">" );
CREATE AGGREGATE pg_catalog.max(pg_catalog.money) (   SFUNC     = cashlarger,   STYPE     = pg_catalog.money,   PREFUNC   = cashlarger,   SORTOP    = ">" );
CREATE AGGREGATE pg_catalog.max(pg_catalog.oid) (   SFUNC     = oidlarger,   STYPE     = pg_catalog.oid,   PREFUNC   = oidlarger,   SORTOP    = ">" );
CREATE AGGREGATE pg_catalog.max(pg_catalog.text) (   SFUNC     = text_larger,   STYPE     = pg_catalog.text,   PREFUNC   = text_larger,   SORTOP    = ">" );
CREATE AGGREGATE pg_catalog.max(pg_catalog.tid) (   SFUNC     = tidlarger,   STYPE     = pg_catalog.tid,   PREFUNC   = tidlarger,   SORTOP    = ">" );
CREATE AGGREGATE pg_catalog.max(pg_catalog.timestamptz) (   SFUNC     = timestamptz_larger,   STYPE     = pg_catalog.timestamptz,   PREFUNC   = timestamptz_larger,   SORTOP    = ">" );
CREATE AGGREGATE pg_catalog.max(pg_catalog.timetz) (   SFUNC     = timetz_larger,   STYPE     = pg_catalog.timetz,   PREFUNC   = timetz_larger,   SORTOP    = ">" );
CREATE AGGREGATE pg_catalog.min(pg_catalog."interval") (   SFUNC     = interval_smaller,   STYPE     = pg_catalog."interval",   PREFUNC   = interval_smaller,   SORTOP    = "<" );
CREATE AGGREGATE pg_catalog.min(pg_catalog."numeric") (   SFUNC     = numeric_smaller,   STYPE     = pg_catalog."numeric",   PREFUNC   = numeric_smaller,   SORTOP    = "<" );
CREATE AGGREGATE pg_catalog.min(pg_catalog."time") (   SFUNC     = time_smaller,   STYPE     = pg_catalog."time",   PREFUNC   = time_smaller,   SORTOP    = "<" );
CREATE AGGREGATE pg_catalog.min(pg_catalog."timestamp") (   SFUNC     = timestamp_smaller,   STYPE     = pg_catalog."timestamp",   PREFUNC   = timestamp_smaller,   SORTOP    = "<" );
CREATE AGGREGATE pg_catalog.min(pg_catalog.abstime) (   SFUNC     = int4smaller,   STYPE     = pg_catalog.abstime,   PREFUNC   = int4smaller,   SORTOP    = "<" );
CREATE AGGREGATE pg_catalog.min(pg_catalog.anyarray) (   SFUNC     = array_smaller,   STYPE     = pg_catalog.anyarray,   PREFUNC   = array_smaller,   SORTOP    = "<" );
CREATE AGGREGATE pg_catalog.min(pg_catalog.bpchar) (   SFUNC     = bpchar_smaller,   STYPE     = pg_catalog.bpchar,   PREFUNC   = bpchar_smaller,   SORTOP    = "<" );
CREATE AGGREGATE pg_catalog.min(pg_catalog.date) (   SFUNC     = date_smaller,   STYPE     = pg_catalog.date,   PREFUNC   = date_smaller,   SORTOP    = "<" );
CREATE AGGREGATE pg_catalog.min(pg_catalog.float4) (   SFUNC     = float4smaller,   STYPE     = pg_catalog.float4,   PREFUNC   = float4smaller,   SORTOP    = "<" );
CREATE AGGREGATE pg_catalog.min(pg_catalog.float8) (   SFUNC     = float8smaller,   STYPE     = pg_catalog.float8,   PREFUNC   = float8smaller,   SORTOP    = "<" );
CREATE AGGREGATE pg_catalog.min(pg_catalog.gpxlogloc) (   SFUNC     = gpxloglocsmaller,   STYPE     = pg_catalog.gpxlogloc,   PREFUNC   = gpxloglocsmaller,   SORTOP    = "<" );
CREATE AGGREGATE pg_catalog.min(pg_catalog.int2) (   SFUNC     = int2smaller,   STYPE     = pg_catalog.int2,   PREFUNC   = int2smaller,   SORTOP    = "<" );
CREATE AGGREGATE pg_catalog.min(pg_catalog.int4) (   SFUNC     = int4smaller,   STYPE     = pg_catalog.int4,   PREFUNC   = int4smaller,   SORTOP    = "<" );
CREATE AGGREGATE pg_catalog.min(pg_catalog.int8) (   SFUNC     = int8smaller,   STYPE     = pg_catalog.int8,   PREFUNC   = int8smaller,   SORTOP    = "<" );
CREATE AGGREGATE pg_catalog.min(pg_catalog.money) (   SFUNC     = cashsmaller,   STYPE     = pg_catalog.money,   PREFUNC   = cashsmaller,   SORTOP    = "<" );
CREATE AGGREGATE pg_catalog.min(pg_catalog.oid) (   SFUNC     = oidsmaller,   STYPE     = pg_catalog.oid,   PREFUNC   = oidsmaller,   SORTOP    = "<" );
CREATE AGGREGATE pg_catalog.min(pg_catalog.text) (   SFUNC     = text_smaller,   STYPE     = pg_catalog.text,   PREFUNC   = text_smaller,   SORTOP    = "<" );
CREATE AGGREGATE pg_catalog.min(pg_catalog.tid) (   SFUNC     = tidsmaller,   STYPE     = pg_catalog.tid,   PREFUNC   = tidsmaller,   SORTOP    = "<" );
CREATE AGGREGATE pg_catalog.min(pg_catalog.timestamptz) (   SFUNC     = timestamptz_smaller,   STYPE     = pg_catalog.timestamptz,   PREFUNC   = timestamptz_smaller,   SORTOP    = "<" );
CREATE AGGREGATE pg_catalog.min(pg_catalog.timetz) (   SFUNC     = timetz_smaller,   STYPE     = pg_catalog.timetz,   PREFUNC   = timetz_smaller,   SORTOP    = "<" );
CREATE AGGREGATE pg_catalog.mregr_coef(pg_catalog.float8, pg_catalog._float8) (   SFUNC     = float8_mregr_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_mregr_combine,   FINALFUNC = float8_mregr_coef,   INITCOND  = '{0}' );
CREATE AGGREGATE pg_catalog.mregr_pvalues(pg_catalog.float8, pg_catalog._float8) (   SFUNC     = float8_mregr_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_mregr_combine,   FINALFUNC = float8_mregr_pvalues,   INITCOND  = '{0}' );
CREATE AGGREGATE pg_catalog.mregr_r2(pg_catalog.float8, pg_catalog._float8) (   SFUNC     = float8_mregr_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_mregr_combine,   FINALFUNC = float8_mregr_r2,   INITCOND  = '{0}' );
CREATE AGGREGATE pg_catalog.mregr_tstats(pg_catalog.float8, pg_catalog._float8) (   SFUNC     = float8_mregr_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_mregr_combine,   FINALFUNC = float8_mregr_tstats,   INITCOND  = '{0}' );
CREATE AGGREGATE pg_catalog.nb_classify(pg_catalog._text, pg_catalog.int8, pg_catalog._int8, pg_catalog._int8) (   SFUNC     = nb_classify_accum,   STYPE     = pg_catalog.nb_classification,   PREFUNC   = nb_classify_combine,   FINALFUNC = nb_classify_final );
CREATE AGGREGATE pg_catalog.nb_probabilities(pg_catalog._text, pg_catalog.int8, pg_catalog._int8, pg_catalog._int8) (   SFUNC     = nb_classify_accum,   STYPE     = pg_catalog.nb_classification,   PREFUNC   = nb_classify_combine,   FINALFUNC = nb_classify_probabilities );
CREATE AGGREGATE pg_catalog.pg_partition_oid(pg_catalog.oid, pg_catalog.record) (   SFUNC     = pg_partition_oid_transfn,   STYPE     = pg_catalog.internal,   FINALFUNC = pg_partition_oid_finalfn );
CREATE AGGREGATE pg_catalog.pivot_sum(pg_catalog._text, pg_catalog.text, pg_catalog.float8) (   SFUNC     = float8_pivot_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_matrix_accum );
CREATE AGGREGATE pg_catalog.pivot_sum(pg_catalog._text, pg_catalog.text, pg_catalog.int4) (   SFUNC     = int4_pivot_accum,   STYPE     = pg_catalog._int4,   PREFUNC   = int8_matrix_accum );
CREATE AGGREGATE pg_catalog.pivot_sum(pg_catalog._text, pg_catalog.text, pg_catalog.int8) (   SFUNC     = int8_pivot_accum,   STYPE     = pg_catalog._int8,   PREFUNC   = int8_matrix_accum );
CREATE AGGREGATE pg_catalog.regr_avgx(pg_catalog.float8, pg_catalog.float8) (   SFUNC     = float8_regr_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_regr_amalg,   FINALFUNC = float8_regr_avgx,   INITCOND  = '{0,0,0,0,0,0}' );
CREATE AGGREGATE pg_catalog.regr_avgy(pg_catalog.float8, pg_catalog.float8) (   SFUNC     = float8_regr_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_regr_amalg,   FINALFUNC = float8_regr_avgy,   INITCOND  = '{0,0,0,0,0,0}' );
CREATE AGGREGATE pg_catalog.regr_count(pg_catalog.float8, pg_catalog.float8) (   SFUNC     = int8inc_float8_float8,   STYPE     = pg_catalog.int8,   PREFUNC   = int8pl,   INITCOND  = '0' );
CREATE AGGREGATE pg_catalog.regr_intercept(pg_catalog.float8, pg_catalog.float8) (   SFUNC     = float8_regr_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_regr_amalg,   FINALFUNC = float8_regr_intercept,   INITCOND  = '{0,0,0,0,0,0}' );
CREATE AGGREGATE pg_catalog.regr_r2(pg_catalog.float8, pg_catalog.float8) (   SFUNC     = float8_regr_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_regr_amalg,   FINALFUNC = float8_regr_r2,   INITCOND  = '{0,0,0,0,0,0}' );
CREATE AGGREGATE pg_catalog.regr_slope(pg_catalog.float8, pg_catalog.float8) (   SFUNC     = float8_regr_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_regr_amalg,   FINALFUNC = float8_regr_slope,   INITCOND  = '{0,0,0,0,0,0}' );
CREATE AGGREGATE pg_catalog.regr_sxx(pg_catalog.float8, pg_catalog.float8) (   SFUNC     = float8_regr_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_regr_amalg,   FINALFUNC = float8_regr_sxx,   INITCOND  = '{0,0,0,0,0,0}' );
CREATE AGGREGATE pg_catalog.regr_sxy(pg_catalog.float8, pg_catalog.float8) (   SFUNC     = float8_regr_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_regr_amalg,   FINALFUNC = float8_regr_sxy,   INITCOND  = '{0,0,0,0,0,0}' );
CREATE AGGREGATE pg_catalog.regr_syy(pg_catalog.float8, pg_catalog.float8) (   SFUNC     = float8_regr_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_regr_amalg,   FINALFUNC = float8_regr_syy,   INITCOND  = '{0,0,0,0,0,0}' );
CREATE AGGREGATE pg_catalog.stddev(pg_catalog."numeric") (   SFUNC     = numeric_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_stddev_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.stddev(pg_catalog.float4) (   SFUNC     = float4_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_amalg,   FINALFUNC = float8_stddev_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.stddev(pg_catalog.float8) (   SFUNC     = float8_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_amalg,   FINALFUNC = float8_stddev_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.stddev(pg_catalog.int2) (   SFUNC     = int2_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_stddev_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.stddev(pg_catalog.int4) (   SFUNC     = int4_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_stddev_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.stddev(pg_catalog.int8) (   SFUNC     = int8_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_stddev_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.stddev_pop(pg_catalog."numeric") (   SFUNC     = numeric_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_stddev_pop,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.stddev_pop(pg_catalog.float4) (   SFUNC     = float4_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_amalg,   FINALFUNC = float8_stddev_pop,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.stddev_pop(pg_catalog.float8) (   SFUNC     = float8_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_amalg,   FINALFUNC = float8_stddev_pop,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.stddev_pop(pg_catalog.int2) (   SFUNC     = int2_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_stddev_pop,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.stddev_pop(pg_catalog.int4) (   SFUNC     = int4_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_stddev_pop,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.stddev_pop(pg_catalog.int8) (   SFUNC     = int8_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_stddev_pop,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.stddev_samp(pg_catalog."numeric") (   SFUNC     = numeric_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_stddev_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.stddev_samp(pg_catalog.float4) (   SFUNC     = float4_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_amalg,   FINALFUNC = float8_stddev_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.stddev_samp(pg_catalog.float8) (   SFUNC     = float8_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_amalg,   FINALFUNC = float8_stddev_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.stddev_samp(pg_catalog.int2) (   SFUNC     = int2_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_stddev_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.stddev_samp(pg_catalog.int4) (   SFUNC     = int4_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_stddev_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.stddev_samp(pg_catalog.int8) (   SFUNC     = int8_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_stddev_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.string_agg(pg_catalog.text) (   SFUNC     = string_agg_transfn,   STYPE     = pg_catalog.internal,   FINALFUNC = string_agg_finalfn );
CREATE AGGREGATE pg_catalog.string_agg(pg_catalog.text, pg_catalog.text) (   SFUNC     = string_agg_delim_transfn,   STYPE     = pg_catalog.internal,   FINALFUNC = string_agg_finalfn );
CREATE AGGREGATE pg_catalog.sum(pg_catalog."interval") (   SFUNC     = interval_pl,   STYPE     = pg_catalog."interval",   PREFUNC   = interval_pl );
CREATE AGGREGATE pg_catalog.sum(pg_catalog."numeric") (   SFUNC     = numeric_add,   STYPE     = pg_catalog."numeric",   PREFUNC   = numeric_add );
CREATE AGGREGATE pg_catalog.sum(pg_catalog._float8) (   SFUNC     = float8_matrix_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_matrix_accum );
CREATE AGGREGATE pg_catalog.sum(pg_catalog._int2) (   SFUNC     = int2_matrix_accum,   STYPE     = pg_catalog._int8,   PREFUNC   = int8_matrix_accum );
CREATE AGGREGATE pg_catalog.sum(pg_catalog._int4) (   SFUNC     = int4_matrix_accum,   STYPE     = pg_catalog._int8,   PREFUNC   = int8_matrix_accum );
CREATE AGGREGATE pg_catalog.sum(pg_catalog._int8) (   SFUNC     = int8_matrix_accum,   STYPE     = pg_catalog._int8,   PREFUNC   = int8_matrix_accum );
CREATE AGGREGATE pg_catalog.sum(pg_catalog.float4) (   SFUNC     = float4pl,   STYPE     = pg_catalog.float4,   PREFUNC   = float4pl );
CREATE AGGREGATE pg_catalog.sum(pg_catalog.float8) (   SFUNC     = float8pl,   STYPE     = pg_catalog.float8,   PREFUNC   = float8pl );
CREATE AGGREGATE pg_catalog.sum(pg_catalog.int2) (   SFUNC     = int2_sum,   STYPE     = pg_catalog.int8,   PREFUNC   = int8pl );
CREATE AGGREGATE pg_catalog.sum(pg_catalog.int4) (   SFUNC     = int4_sum,   STYPE     = pg_catalog.int8,   PREFUNC   = int8pl );
CREATE AGGREGATE pg_catalog.sum(pg_catalog.int8) (   SFUNC     = int8_sum,   STYPE     = pg_catalog."numeric",   PREFUNC   = numeric_add );
CREATE AGGREGATE pg_catalog.sum(pg_catalog.money) (   SFUNC     = cash_pl,   STYPE     = pg_catalog.money,   PREFUNC   = cash_pl );
CREATE AGGREGATE pg_catalog.var_pop(pg_catalog."numeric") (   SFUNC     = numeric_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_var_pop,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.var_pop(pg_catalog.float4) (   SFUNC     = float4_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_amalg,   FINALFUNC = float8_var_pop,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.var_pop(pg_catalog.float8) (   SFUNC     = float8_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_amalg,   FINALFUNC = float8_var_pop,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.var_pop(pg_catalog.int2) (   SFUNC     = int2_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_var_pop,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.var_pop(pg_catalog.int4) (   SFUNC     = int4_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_var_pop,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.var_pop(pg_catalog.int8) (   SFUNC     = int8_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_var_pop,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.var_samp(pg_catalog."numeric") (   SFUNC     = numeric_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_var_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.var_samp(pg_catalog.float4) (   SFUNC     = float4_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_amalg,   FINALFUNC = float8_var_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.var_samp(pg_catalog.float8) (   SFUNC     = float8_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_amalg,   FINALFUNC = float8_var_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.var_samp(pg_catalog.int2) (   SFUNC     = int2_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_var_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.var_samp(pg_catalog.int4) (   SFUNC     = int4_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_var_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.var_samp(pg_catalog.int8) (   SFUNC     = int8_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_var_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.variance(pg_catalog."numeric") (   SFUNC     = numeric_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_var_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.variance(pg_catalog.float4) (   SFUNC     = float4_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_amalg,   FINALFUNC = float8_var_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.variance(pg_catalog.float8) (   SFUNC     = float8_accum,   STYPE     = pg_catalog._float8,   PREFUNC   = float8_amalg,   FINALFUNC = float8_var_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.variance(pg_catalog.int2) (   SFUNC     = int2_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_var_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.variance(pg_catalog.int4) (   SFUNC     = int4_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_var_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.variance(pg_catalog.int8) (   SFUNC     = int8_accum,   STYPE     = pg_catalog._numeric,   PREFUNC   = numeric_amalg,   FINALFUNC = numeric_var_samp,   INITCOND  = '{0,0,0}' );
CREATE AGGREGATE pg_catalog.xmlagg(pg_catalog.xml) (   SFUNC     = xmlconcat2,   STYPE     = pg_catalog.xml );
CREATE CAST (pg_catalog."bit" AS pg_catalog."bit") WITH FUNCTION pg_catalog.bit(pg_catalog."bit", pg_catalog.int4, pg_catalog.bool) AS IMPLICIT;
CREATE CAST (pg_catalog."bit" AS pg_catalog.int4) WITH FUNCTION pg_catalog.int4(pg_catalog."bit");
CREATE CAST (pg_catalog."bit" AS pg_catalog.int8) WITH FUNCTION pg_catalog.int8(pg_catalog."bit");
CREATE CAST (pg_catalog."bit" AS pg_catalog.varbit) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog."char" AS pg_catalog."varchar") WITH FUNCTION dummy_cast_functions.dummycast_char_varchar_text(pg_catalog."char") AS ASSIGNMENT;
CREATE CAST (pg_catalog."char" AS pg_catalog.bpchar) WITH FUNCTION pg_catalog.bpchar(pg_catalog."char") AS ASSIGNMENT;
CREATE CAST (pg_catalog."char" AS pg_catalog.int4) WITH FUNCTION pg_catalog.int4(pg_catalog."char");
CREATE CAST (pg_catalog."char" AS pg_catalog.text) WITH FUNCTION pg_catalog.text(pg_catalog."char") AS IMPLICIT;
CREATE CAST (pg_catalog."interval" AS pg_catalog."interval") WITH FUNCTION pg_catalog.interval(pg_catalog."interval", pg_catalog.int4) AS IMPLICIT;
CREATE CAST (pg_catalog."interval" AS pg_catalog."time") WITH FUNCTION pg_catalog.time(pg_catalog."interval") AS ASSIGNMENT;
CREATE CAST (pg_catalog."interval" AS pg_catalog."varchar") WITH FUNCTION dummy_cast_functions.dummycast_interval_varchar_text(pg_catalog."interval") AS ASSIGNMENT;
CREATE CAST (pg_catalog."interval" AS pg_catalog.bpchar) WITH FUNCTION dummy_cast_functions.dummycast_interval_bpchar_text(pg_catalog."interval") AS ASSIGNMENT;
CREATE CAST (pg_catalog."interval" AS pg_catalog.reltime) WITH FUNCTION pg_catalog.reltime(pg_catalog."interval") AS ASSIGNMENT;
CREATE CAST (pg_catalog."interval" AS pg_catalog.text) WITH FUNCTION pg_catalog.text(pg_catalog."interval") AS IMPLICIT;
CREATE CAST (pg_catalog."numeric" AS pg_catalog."numeric") WITH FUNCTION pg_catalog.numeric(pg_catalog."numeric", pg_catalog.int4) AS IMPLICIT;
CREATE CAST (pg_catalog."numeric" AS pg_catalog."varchar") WITH FUNCTION dummy_cast_functions.dummycast_numeric_varchar_text(pg_catalog."numeric") AS ASSIGNMENT;
CREATE CAST (pg_catalog."numeric" AS pg_catalog.bpchar) WITH FUNCTION dummy_cast_functions.dummycast_numeric_bpchar_text(pg_catalog."numeric") AS ASSIGNMENT;
CREATE CAST (pg_catalog."numeric" AS pg_catalog.float4) WITH FUNCTION pg_catalog.float4(pg_catalog."numeric") AS IMPLICIT;
CREATE CAST (pg_catalog."numeric" AS pg_catalog.float8) WITH FUNCTION pg_catalog.float8(pg_catalog."numeric") AS IMPLICIT;
CREATE CAST (pg_catalog."numeric" AS pg_catalog.int2) WITH FUNCTION pg_catalog.int2(pg_catalog."numeric") AS ASSIGNMENT;
CREATE CAST (pg_catalog."numeric" AS pg_catalog.int4) WITH FUNCTION pg_catalog.int4(pg_catalog."numeric") AS ASSIGNMENT;
CREATE CAST (pg_catalog."numeric" AS pg_catalog.int8) WITH FUNCTION pg_catalog.int8(pg_catalog."numeric") AS ASSIGNMENT;
CREATE CAST (pg_catalog."numeric" AS pg_catalog.text) WITH FUNCTION pg_catalog.text(pg_catalog."numeric") AS IMPLICIT;
CREATE CAST (pg_catalog."time" AS pg_catalog."interval") WITH FUNCTION pg_catalog.interval(pg_catalog."time") AS IMPLICIT;
CREATE CAST (pg_catalog."time" AS pg_catalog."time") WITH FUNCTION pg_catalog.time(pg_catalog."time", pg_catalog.int4) AS IMPLICIT;
CREATE CAST (pg_catalog."time" AS pg_catalog."varchar") WITH FUNCTION dummy_cast_functions.dummycast_time_varchar_text(pg_catalog."time") AS ASSIGNMENT;
CREATE CAST (pg_catalog."time" AS pg_catalog.bpchar) WITH FUNCTION dummy_cast_functions.dummycast_time_bpchar_text(pg_catalog."time") AS ASSIGNMENT;
CREATE CAST (pg_catalog."time" AS pg_catalog.text) WITH FUNCTION pg_catalog.text(pg_catalog."time") AS IMPLICIT;
CREATE CAST (pg_catalog."time" AS pg_catalog.timetz) WITH FUNCTION pg_catalog.timetz(pg_catalog."time") AS IMPLICIT;
CREATE CAST (pg_catalog."timestamp" AS pg_catalog."time") WITH FUNCTION pg_catalog.time(pg_catalog."timestamp") AS ASSIGNMENT;
CREATE CAST (pg_catalog."timestamp" AS pg_catalog."timestamp") WITH FUNCTION pg_catalog.timestamp(pg_catalog."timestamp", pg_catalog.int4) AS IMPLICIT;
CREATE CAST (pg_catalog."timestamp" AS pg_catalog."varchar") WITH FUNCTION dummy_cast_functions.dummycast_timestamp_varchar_text(pg_catalog."timestamp") AS ASSIGNMENT;
CREATE CAST (pg_catalog."timestamp" AS pg_catalog.abstime) WITH FUNCTION pg_catalog.abstime(pg_catalog."timestamp") AS ASSIGNMENT;
CREATE CAST (pg_catalog."timestamp" AS pg_catalog.bpchar) WITH FUNCTION dummy_cast_functions.dummycast_timestamp_bpchar_text(pg_catalog."timestamp") AS ASSIGNMENT;
CREATE CAST (pg_catalog."timestamp" AS pg_catalog.date) WITH FUNCTION pg_catalog.date(pg_catalog."timestamp") AS ASSIGNMENT;
CREATE CAST (pg_catalog."timestamp" AS pg_catalog.text) WITH FUNCTION pg_catalog.text(pg_catalog."timestamp") AS IMPLICIT;
CREATE CAST (pg_catalog."timestamp" AS pg_catalog.timestamptz) WITH FUNCTION pg_catalog.timestamptz(pg_catalog."timestamp") AS IMPLICIT;
CREATE CAST (pg_catalog."varchar" AS pg_catalog."char") WITH FUNCTION dummy_cast_functions.dummycast_varchar_char_char(pg_catalog."varchar") AS ASSIGNMENT;
CREATE CAST (pg_catalog."varchar" AS pg_catalog."interval") WITH FUNCTION dummy_cast_functions.dummycast_varchar_interval_interval(pg_catalog."varchar");
CREATE CAST (pg_catalog."varchar" AS pg_catalog."numeric") WITH FUNCTION dummy_cast_functions.dummycast_varchar_numeric_numeric(pg_catalog."varchar");
CREATE CAST (pg_catalog."varchar" AS pg_catalog."time") WITH FUNCTION dummy_cast_functions.dummycast_varchar_time_time(pg_catalog."varchar");
CREATE CAST (pg_catalog."varchar" AS pg_catalog."timestamp") WITH FUNCTION dummy_cast_functions.dummycast_varchar_timestamp_timestamp(pg_catalog."varchar");
CREATE CAST (pg_catalog."varchar" AS pg_catalog."varchar") WITH FUNCTION pg_catalog.varchar(pg_catalog."varchar", pg_catalog.int4, pg_catalog.bool) AS IMPLICIT;
CREATE CAST (pg_catalog."varchar" AS pg_catalog.bpchar) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog."varchar" AS pg_catalog.cidr) WITH FUNCTION dummy_cast_functions.dummycast_varchar_cidr_cidr(pg_catalog."varchar");
CREATE CAST (pg_catalog."varchar" AS pg_catalog.date) WITH FUNCTION dummy_cast_functions.dummycast_varchar_date_date(pg_catalog."varchar");
CREATE CAST (pg_catalog."varchar" AS pg_catalog.float4) WITH FUNCTION dummy_cast_functions.dummycast_varchar_float4_float4(pg_catalog."varchar");
CREATE CAST (pg_catalog."varchar" AS pg_catalog.float8) WITH FUNCTION dummy_cast_functions.dummycast_varchar_float8_float8(pg_catalog."varchar");
CREATE CAST (pg_catalog."varchar" AS pg_catalog.inet) WITH FUNCTION dummy_cast_functions.dummycast_varchar_inet_inet(pg_catalog."varchar");
CREATE CAST (pg_catalog."varchar" AS pg_catalog.int2) WITH FUNCTION dummy_cast_functions.dummycast_varchar_int2_int2(pg_catalog."varchar");
CREATE CAST (pg_catalog."varchar" AS pg_catalog.int4) WITH FUNCTION dummy_cast_functions.dummycast_varchar_int4_int4(pg_catalog."varchar");
CREATE CAST (pg_catalog."varchar" AS pg_catalog.int8) WITH FUNCTION dummy_cast_functions.dummycast_varchar_int8_int8(pg_catalog."varchar");
CREATE CAST (pg_catalog."varchar" AS pg_catalog.macaddr) WITH FUNCTION dummy_cast_functions.dummycast_varchar_macaddr_macaddr(pg_catalog."varchar");
CREATE CAST (pg_catalog."varchar" AS pg_catalog.name) WITH FUNCTION pg_catalog.name(pg_catalog."varchar") AS IMPLICIT;
CREATE CAST (pg_catalog."varchar" AS pg_catalog.oid) WITH FUNCTION dummy_cast_functions.dummycast_varchar_oid_oid(pg_catalog."varchar");
CREATE CAST (pg_catalog."varchar" AS pg_catalog.regclass) WITH FUNCTION dummy_cast_functions.dummycast_varchar_regclass_regclass(pg_catalog."varchar") AS IMPLICIT;
CREATE CAST (pg_catalog."varchar" AS pg_catalog.text) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog."varchar" AS pg_catalog.timestamptz) WITH FUNCTION dummy_cast_functions.dummycast_varchar_timestamptz_timestamptz(pg_catalog."varchar");
CREATE CAST (pg_catalog."varchar" AS pg_catalog.timetz) WITH FUNCTION dummy_cast_functions.dummycast_varchar_timetz_timetz(pg_catalog."varchar");
CREATE CAST (pg_catalog.abstime AS pg_catalog."time") WITH FUNCTION pg_catalog.time(pg_catalog.abstime) AS ASSIGNMENT;
CREATE CAST (pg_catalog.abstime AS pg_catalog."timestamp") WITH FUNCTION pg_catalog.timestamp(pg_catalog.abstime) AS IMPLICIT;
CREATE CAST (pg_catalog.abstime AS pg_catalog.date) WITH FUNCTION pg_catalog.date(pg_catalog.abstime) AS ASSIGNMENT;
CREATE CAST (pg_catalog.abstime AS pg_catalog.int4) WITHOUT FUNCTION;
CREATE CAST (pg_catalog.abstime AS pg_catalog.timestamptz) WITH FUNCTION pg_catalog.timestamptz(pg_catalog.abstime) AS IMPLICIT;
CREATE CAST (pg_catalog.bool AS pg_catalog.int4) WITH FUNCTION pg_catalog.int4(pg_catalog.bool);
CREATE CAST (pg_catalog.box AS pg_catalog.circle) WITH FUNCTION pg_catalog.circle(pg_catalog.box);
CREATE CAST (pg_catalog.box AS pg_catalog.lseg) WITH FUNCTION pg_catalog.lseg(pg_catalog.box);
CREATE CAST (pg_catalog.box AS pg_catalog.point) WITH FUNCTION pg_catalog.point(pg_catalog.box);
CREATE CAST (pg_catalog.box AS pg_catalog.polygon) WITH FUNCTION pg_catalog.polygon(pg_catalog.box) AS ASSIGNMENT;
CREATE CAST (pg_catalog.bpchar AS pg_catalog."char") WITH FUNCTION dummy_cast_functions.dummycast_bpchar_char_char(pg_catalog.bpchar) AS ASSIGNMENT;
CREATE CAST (pg_catalog.bpchar AS pg_catalog."interval") WITH FUNCTION dummy_cast_functions.dummycast_bpchar_interval_interval(pg_catalog.bpchar);
CREATE CAST (pg_catalog.bpchar AS pg_catalog."numeric") WITH FUNCTION dummy_cast_functions.dummycast_bpchar_numeric_numeric(pg_catalog.bpchar);
CREATE CAST (pg_catalog.bpchar AS pg_catalog."time") WITH FUNCTION dummy_cast_functions.dummycast_bpchar_time_time(pg_catalog.bpchar);
CREATE CAST (pg_catalog.bpchar AS pg_catalog."timestamp") WITH FUNCTION dummy_cast_functions.dummycast_bpchar_timestamp_timestamp(pg_catalog.bpchar);
CREATE CAST (pg_catalog.bpchar AS pg_catalog."varchar") WITH FUNCTION dummy_cast_functions.dummycast_bpchar_varchar_text(pg_catalog.bpchar) AS IMPLICIT;
CREATE CAST (pg_catalog.bpchar AS pg_catalog.bpchar) WITH FUNCTION pg_catalog.bpchar(pg_catalog.bpchar, pg_catalog.int4, pg_catalog.bool) AS IMPLICIT;
CREATE CAST (pg_catalog.bpchar AS pg_catalog.date) WITH FUNCTION dummy_cast_functions.dummycast_bpchar_date_date(pg_catalog.bpchar);
CREATE CAST (pg_catalog.bpchar AS pg_catalog.float4) WITH FUNCTION dummy_cast_functions.dummycast_bpchar_float4_float4(pg_catalog.bpchar);
CREATE CAST (pg_catalog.bpchar AS pg_catalog.float8) WITH FUNCTION dummy_cast_functions.dummycast_bpchar_float8_float8(pg_catalog.bpchar);
CREATE CAST (pg_catalog.bpchar AS pg_catalog.int2) WITH FUNCTION dummy_cast_functions.dummycast_bpchar_int2_int2(pg_catalog.bpchar);
CREATE CAST (pg_catalog.bpchar AS pg_catalog.int4) WITH FUNCTION dummy_cast_functions.dummycast_bpchar_int4_int4(pg_catalog.bpchar);
CREATE CAST (pg_catalog.bpchar AS pg_catalog.int8) WITH FUNCTION dummy_cast_functions.dummycast_bpchar_int8_int8(pg_catalog.bpchar);
CREATE CAST (pg_catalog.bpchar AS pg_catalog.macaddr) WITH FUNCTION dummy_cast_functions.dummycast_bpchar_macaddr_macaddr(pg_catalog.bpchar);
CREATE CAST (pg_catalog.bpchar AS pg_catalog.name) WITH FUNCTION pg_catalog.name(pg_catalog.bpchar) AS IMPLICIT;
CREATE CAST (pg_catalog.bpchar AS pg_catalog.oid) WITH FUNCTION dummy_cast_functions.dummycast_bpchar_oid_oid(pg_catalog.bpchar);
CREATE CAST (pg_catalog.bpchar AS pg_catalog.text) WITH FUNCTION pg_catalog.text(pg_catalog.bpchar) AS IMPLICIT;
CREATE CAST (pg_catalog.bpchar AS pg_catalog.timestamptz) WITH FUNCTION dummy_cast_functions.dummycast_bpchar_timestamptz_timestamptz(pg_catalog.bpchar);
CREATE CAST (pg_catalog.bpchar AS pg_catalog.timetz) WITH FUNCTION dummy_cast_functions.dummycast_bpchar_timetz_timetz(pg_catalog.bpchar);
CREATE CAST (pg_catalog.cidr AS pg_catalog."varchar") WITH FUNCTION dummy_cast_functions.dummycast_cidr_varchar_text(pg_catalog.cidr);
CREATE CAST (pg_catalog.cidr AS pg_catalog.bpchar) WITH FUNCTION dummy_cast_functions.dummycast_cidr_bpchar_text(pg_catalog.cidr);
CREATE CAST (pg_catalog.cidr AS pg_catalog.inet) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.cidr AS pg_catalog.text) WITH FUNCTION dummy_cast_functions.dummycast_cidr_text_text(pg_catalog.cidr);
CREATE CAST (pg_catalog.circle AS pg_catalog.box) WITH FUNCTION pg_catalog.box(pg_catalog.circle);
CREATE CAST (pg_catalog.circle AS pg_catalog.point) WITH FUNCTION pg_catalog.point(pg_catalog.circle);
CREATE CAST (pg_catalog.circle AS pg_catalog.polygon) WITH FUNCTION pg_catalog.polygon(pg_catalog.circle);
CREATE CAST (pg_catalog.date AS pg_catalog."timestamp") WITH FUNCTION pg_catalog.timestamp(pg_catalog.date) AS IMPLICIT;
CREATE CAST (pg_catalog.date AS pg_catalog."varchar") WITH FUNCTION dummy_cast_functions.dummycast_date_varchar_text(pg_catalog.date) AS ASSIGNMENT;
CREATE CAST (pg_catalog.date AS pg_catalog.bpchar) WITH FUNCTION dummy_cast_functions.dummycast_date_bpchar_text(pg_catalog.date) AS ASSIGNMENT;
CREATE CAST (pg_catalog.date AS pg_catalog.text) WITH FUNCTION pg_catalog.text(pg_catalog.date) AS IMPLICIT;
CREATE CAST (pg_catalog.date AS pg_catalog.timestamptz) WITH FUNCTION pg_catalog.timestamptz(pg_catalog.date) AS IMPLICIT;
CREATE CAST (pg_catalog.float4 AS pg_catalog."numeric") WITH FUNCTION pg_catalog.numeric(pg_catalog.float4) AS ASSIGNMENT;
CREATE CAST (pg_catalog.float4 AS pg_catalog."varchar") WITH FUNCTION dummy_cast_functions.dummycast_float4_varchar_text(pg_catalog.float4) AS ASSIGNMENT;
CREATE CAST (pg_catalog.float4 AS pg_catalog.bpchar) WITH FUNCTION dummy_cast_functions.dummycast_float4_bpchar_text(pg_catalog.float4) AS ASSIGNMENT;
CREATE CAST (pg_catalog.float4 AS pg_catalog.float8) WITH FUNCTION pg_catalog.float8(pg_catalog.float4) AS IMPLICIT;
CREATE CAST (pg_catalog.float4 AS pg_catalog.int2) WITH FUNCTION pg_catalog.int2(pg_catalog.float4) AS ASSIGNMENT;
CREATE CAST (pg_catalog.float4 AS pg_catalog.int4) WITH FUNCTION pg_catalog.int4(pg_catalog.float4) AS ASSIGNMENT;
CREATE CAST (pg_catalog.float4 AS pg_catalog.int8) WITH FUNCTION pg_catalog.int8(pg_catalog.float4) AS ASSIGNMENT;
CREATE CAST (pg_catalog.float4 AS pg_catalog.text) WITH FUNCTION pg_catalog.text(pg_catalog.float4) AS IMPLICIT;
CREATE CAST (pg_catalog.float8 AS pg_catalog."numeric") WITH FUNCTION pg_catalog.numeric(pg_catalog.float8) AS ASSIGNMENT;
CREATE CAST (pg_catalog.float8 AS pg_catalog."varchar") WITH FUNCTION dummy_cast_functions.dummycast_float8_varchar_text(pg_catalog.float8) AS ASSIGNMENT;
CREATE CAST (pg_catalog.float8 AS pg_catalog.bpchar) WITH FUNCTION dummy_cast_functions.dummycast_float8_bpchar_text(pg_catalog.float8) AS ASSIGNMENT;
CREATE CAST (pg_catalog.float8 AS pg_catalog.float4) WITH FUNCTION pg_catalog.float4(pg_catalog.float8) AS ASSIGNMENT;
CREATE CAST (pg_catalog.float8 AS pg_catalog.int2) WITH FUNCTION pg_catalog.int2(pg_catalog.float8) AS ASSIGNMENT;
CREATE CAST (pg_catalog.float8 AS pg_catalog.int4) WITH FUNCTION pg_catalog.int4(pg_catalog.float8) AS ASSIGNMENT;
CREATE CAST (pg_catalog.float8 AS pg_catalog.int8) WITH FUNCTION pg_catalog.int8(pg_catalog.float8) AS ASSIGNMENT;
CREATE CAST (pg_catalog.float8 AS pg_catalog.text) WITH FUNCTION pg_catalog.text(pg_catalog.float8) AS IMPLICIT;
CREATE CAST (pg_catalog.gpaotid AS pg_catalog.tid) WITHOUT FUNCTION;
CREATE CAST (pg_catalog.inet AS pg_catalog."varchar") WITH FUNCTION dummy_cast_functions.dummycast_inet_varchar_text(pg_catalog.inet);
CREATE CAST (pg_catalog.inet AS pg_catalog.bpchar) WITH FUNCTION dummy_cast_functions.dummycast_inet_bpchar_text(pg_catalog.inet);
CREATE CAST (pg_catalog.inet AS pg_catalog.cidr) WITH FUNCTION pg_catalog.cidr(pg_catalog.inet) AS ASSIGNMENT;
CREATE CAST (pg_catalog.inet AS pg_catalog.text) WITH FUNCTION pg_catalog.text(pg_catalog.inet);
CREATE CAST (pg_catalog.int2 AS pg_catalog."numeric") WITH FUNCTION pg_catalog.numeric(pg_catalog.int2) AS IMPLICIT;
CREATE CAST (pg_catalog.int2 AS pg_catalog."varchar") WITH FUNCTION dummy_cast_functions.dummycast_int2_varchar_text(pg_catalog.int2) AS ASSIGNMENT;
CREATE CAST (pg_catalog.int2 AS pg_catalog.bpchar) WITH FUNCTION dummy_cast_functions.dummycast_int2_bpchar_text(pg_catalog.int2) AS ASSIGNMENT;
CREATE CAST (pg_catalog.int2 AS pg_catalog.float4) WITH FUNCTION pg_catalog.float4(pg_catalog.int2) AS IMPLICIT;
CREATE CAST (pg_catalog.int2 AS pg_catalog.float8) WITH FUNCTION pg_catalog.float8(pg_catalog.int2) AS IMPLICIT;
CREATE CAST (pg_catalog.int2 AS pg_catalog.int4) WITH FUNCTION pg_catalog.int4(pg_catalog.int2) AS IMPLICIT;
CREATE CAST (pg_catalog.int2 AS pg_catalog.int8) WITH FUNCTION pg_catalog.int8(pg_catalog.int2) AS IMPLICIT;
CREATE CAST (pg_catalog.int2 AS pg_catalog.oid) WITH FUNCTION dummy_cast_functions.dummycast_int2_oid_int4(pg_catalog.int2) AS IMPLICIT;
CREATE CAST (pg_catalog.int2 AS pg_catalog.regclass) WITH FUNCTION dummy_cast_functions.dummycast_int2_regclass_int4(pg_catalog.int2) AS IMPLICIT;
CREATE CAST (pg_catalog.int2 AS pg_catalog.regoper) WITH FUNCTION dummy_cast_functions.dummycast_int2_regoper_int4(pg_catalog.int2) AS IMPLICIT;
CREATE CAST (pg_catalog.int2 AS pg_catalog.regoperator) WITH FUNCTION dummy_cast_functions.dummycast_int2_regoperator_int4(pg_catalog.int2) AS IMPLICIT;
CREATE CAST (pg_catalog.int2 AS pg_catalog.regproc) WITH FUNCTION dummy_cast_functions.dummycast_int2_regproc_int4(pg_catalog.int2) AS IMPLICIT;
CREATE CAST (pg_catalog.int2 AS pg_catalog.regprocedure) WITH FUNCTION dummy_cast_functions.dummycast_int2_regprocedure_int4(pg_catalog.int2) AS IMPLICIT;
CREATE CAST (pg_catalog.int2 AS pg_catalog.regtype) WITH FUNCTION dummy_cast_functions.dummycast_int2_regtype_int4(pg_catalog.int2) AS IMPLICIT;
CREATE CAST (pg_catalog.int2 AS pg_catalog.text) WITH FUNCTION pg_catalog.text(pg_catalog.int2) AS IMPLICIT;
CREATE CAST (pg_catalog.int4 AS pg_catalog."bit") WITH FUNCTION pg_catalog.bit(pg_catalog.int4, pg_catalog.int4);
CREATE CAST (pg_catalog.int4 AS pg_catalog."char") WITH FUNCTION pg_catalog.char(pg_catalog.int4);
CREATE CAST (pg_catalog.int4 AS pg_catalog."numeric") WITH FUNCTION pg_catalog.numeric(pg_catalog.int4) AS IMPLICIT;
CREATE CAST (pg_catalog.int4 AS pg_catalog."varchar") WITH FUNCTION dummy_cast_functions.dummycast_int4_varchar_text(pg_catalog.int4) AS ASSIGNMENT;
CREATE CAST (pg_catalog.int4 AS pg_catalog.abstime) WITHOUT FUNCTION;
CREATE CAST (pg_catalog.int4 AS pg_catalog.bool) WITH FUNCTION pg_catalog.bool(pg_catalog.int4);
CREATE CAST (pg_catalog.int4 AS pg_catalog.bpchar) WITH FUNCTION dummy_cast_functions.dummycast_int4_bpchar_text(pg_catalog.int4) AS ASSIGNMENT;
CREATE CAST (pg_catalog.int4 AS pg_catalog.float4) WITH FUNCTION pg_catalog.float4(pg_catalog.int4) AS IMPLICIT;
CREATE CAST (pg_catalog.int4 AS pg_catalog.float8) WITH FUNCTION pg_catalog.float8(pg_catalog.int4) AS IMPLICIT;
CREATE CAST (pg_catalog.int4 AS pg_catalog.int2) WITH FUNCTION pg_catalog.int2(pg_catalog.int4) AS ASSIGNMENT;
CREATE CAST (pg_catalog.int4 AS pg_catalog.int8) WITH FUNCTION pg_catalog.int8(pg_catalog.int4) AS IMPLICIT;
CREATE CAST (pg_catalog.int4 AS pg_catalog.oid) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.int4 AS pg_catalog.regclass) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.int4 AS pg_catalog.regoper) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.int4 AS pg_catalog.regoperator) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.int4 AS pg_catalog.regproc) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.int4 AS pg_catalog.regprocedure) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.int4 AS pg_catalog.regtype) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.int4 AS pg_catalog.reltime) WITHOUT FUNCTION;
CREATE CAST (pg_catalog.int4 AS pg_catalog.text) WITH FUNCTION pg_catalog.text(pg_catalog.int4) AS IMPLICIT;
CREATE CAST (pg_catalog.int8 AS pg_catalog."bit") WITH FUNCTION pg_catalog.bit(pg_catalog.int8, pg_catalog.int4);
CREATE CAST (pg_catalog.int8 AS pg_catalog."numeric") WITH FUNCTION pg_catalog.numeric(pg_catalog.int8) AS IMPLICIT;
CREATE CAST (pg_catalog.int8 AS pg_catalog."varchar") WITH FUNCTION dummy_cast_functions.dummycast_int8_varchar_text(pg_catalog.int8) AS ASSIGNMENT;
CREATE CAST (pg_catalog.int8 AS pg_catalog.bpchar) WITH FUNCTION dummy_cast_functions.dummycast_int8_bpchar_text(pg_catalog.int8) AS ASSIGNMENT;
CREATE CAST (pg_catalog.int8 AS pg_catalog.float4) WITH FUNCTION pg_catalog.float4(pg_catalog.int8) AS IMPLICIT;
CREATE CAST (pg_catalog.int8 AS pg_catalog.float8) WITH FUNCTION pg_catalog.float8(pg_catalog.int8) AS IMPLICIT;
CREATE CAST (pg_catalog.int8 AS pg_catalog.int2) WITH FUNCTION pg_catalog.int2(pg_catalog.int8) AS ASSIGNMENT;
CREATE CAST (pg_catalog.int8 AS pg_catalog.int4) WITH FUNCTION pg_catalog.int4(pg_catalog.int8) AS ASSIGNMENT;
CREATE CAST (pg_catalog.int8 AS pg_catalog.oid) WITH FUNCTION pg_catalog.oid(pg_catalog.int8) AS IMPLICIT;
CREATE CAST (pg_catalog.int8 AS pg_catalog.regclass) WITH FUNCTION dummy_cast_functions.dummycast_int8_regclass_oid(pg_catalog.int8) AS IMPLICIT;
CREATE CAST (pg_catalog.int8 AS pg_catalog.regoper) WITH FUNCTION dummy_cast_functions.dummycast_int8_regoper_oid(pg_catalog.int8) AS IMPLICIT;
CREATE CAST (pg_catalog.int8 AS pg_catalog.regoperator) WITH FUNCTION dummy_cast_functions.dummycast_int8_regoperator_oid(pg_catalog.int8) AS IMPLICIT;
CREATE CAST (pg_catalog.int8 AS pg_catalog.regproc) WITH FUNCTION dummy_cast_functions.dummycast_int8_regproc_oid(pg_catalog.int8) AS IMPLICIT;
CREATE CAST (pg_catalog.int8 AS pg_catalog.regprocedure) WITH FUNCTION dummy_cast_functions.dummycast_int8_regprocedure_oid(pg_catalog.int8) AS IMPLICIT;
CREATE CAST (pg_catalog.int8 AS pg_catalog.regtype) WITH FUNCTION dummy_cast_functions.dummycast_int8_regtype_oid(pg_catalog.int8) AS IMPLICIT;
CREATE CAST (pg_catalog.int8 AS pg_catalog.text) WITH FUNCTION pg_catalog.text(pg_catalog.int8) AS IMPLICIT;
CREATE CAST (pg_catalog.lseg AS pg_catalog.point) WITH FUNCTION pg_catalog.point(pg_catalog.lseg);
CREATE CAST (pg_catalog.macaddr AS pg_catalog."varchar") WITH FUNCTION dummy_cast_functions.dummycast_macaddr_varchar_text(pg_catalog.macaddr);
CREATE CAST (pg_catalog.macaddr AS pg_catalog.bpchar) WITH FUNCTION dummy_cast_functions.dummycast_macaddr_bpchar_text(pg_catalog.macaddr);
CREATE CAST (pg_catalog.macaddr AS pg_catalog.text) WITH FUNCTION pg_catalog.text(pg_catalog.macaddr);
CREATE CAST (pg_catalog.name AS pg_catalog."varchar") WITH FUNCTION pg_catalog.varchar(pg_catalog.name) AS ASSIGNMENT;
CREATE CAST (pg_catalog.name AS pg_catalog.bpchar) WITH FUNCTION pg_catalog.bpchar(pg_catalog.name) AS ASSIGNMENT;
CREATE CAST (pg_catalog.name AS pg_catalog.text) WITH FUNCTION pg_catalog.text(pg_catalog.name) AS IMPLICIT;
CREATE CAST (pg_catalog.oid AS pg_catalog."varchar") WITH FUNCTION dummy_cast_functions.dummycast_oid_varchar_text(pg_catalog.oid) AS ASSIGNMENT;
CREATE CAST (pg_catalog.oid AS pg_catalog.bpchar) WITH FUNCTION dummy_cast_functions.dummycast_oid_bpchar_text(pg_catalog.oid) AS ASSIGNMENT;
CREATE CAST (pg_catalog.oid AS pg_catalog.int4) WITHOUT FUNCTION AS ASSIGNMENT;
CREATE CAST (pg_catalog.oid AS pg_catalog.int8) WITH FUNCTION pg_catalog.int8(pg_catalog.oid) AS ASSIGNMENT;
CREATE CAST (pg_catalog.oid AS pg_catalog.regclass) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.oid AS pg_catalog.regoper) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.oid AS pg_catalog.regoperator) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.oid AS pg_catalog.regproc) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.oid AS pg_catalog.regprocedure) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.oid AS pg_catalog.regtype) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.oid AS pg_catalog.text) WITH FUNCTION pg_catalog.text(pg_catalog.oid) AS IMPLICIT;
CREATE CAST (pg_catalog.path AS pg_catalog.point) WITH FUNCTION pg_catalog.point(pg_catalog.path);
CREATE CAST (pg_catalog.path AS pg_catalog.polygon) WITH FUNCTION pg_catalog.polygon(pg_catalog.path) AS ASSIGNMENT;
CREATE CAST (pg_catalog.polygon AS pg_catalog.box) WITH FUNCTION pg_catalog.box(pg_catalog.polygon);
CREATE CAST (pg_catalog.polygon AS pg_catalog.circle) WITH FUNCTION pg_catalog.circle(pg_catalog.polygon);
CREATE CAST (pg_catalog.polygon AS pg_catalog.path) WITH FUNCTION pg_catalog.path(pg_catalog.polygon) AS ASSIGNMENT;
CREATE CAST (pg_catalog.polygon AS pg_catalog.point) WITH FUNCTION pg_catalog.point(pg_catalog.polygon);
CREATE CAST (pg_catalog.regclass AS pg_catalog.int4) WITHOUT FUNCTION AS ASSIGNMENT;
CREATE CAST (pg_catalog.regclass AS pg_catalog.int8) WITH FUNCTION dummy_cast_functions.dummycast_regclass_int8_int8(pg_catalog.regclass) AS ASSIGNMENT;
CREATE CAST (pg_catalog.regclass AS pg_catalog.oid) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.regoper AS pg_catalog.int4) WITHOUT FUNCTION AS ASSIGNMENT;
CREATE CAST (pg_catalog.regoper AS pg_catalog.int8) WITH FUNCTION dummy_cast_functions.dummycast_regoper_int8_int8(pg_catalog.regoper) AS ASSIGNMENT;
CREATE CAST (pg_catalog.regoper AS pg_catalog.oid) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.regoper AS pg_catalog.regoperator) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.regoperator AS pg_catalog.int4) WITHOUT FUNCTION AS ASSIGNMENT;
CREATE CAST (pg_catalog.regoperator AS pg_catalog.int8) WITH FUNCTION dummy_cast_functions.dummycast_regoperator_int8_int8(pg_catalog.regoperator) AS ASSIGNMENT;
CREATE CAST (pg_catalog.regoperator AS pg_catalog.oid) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.regoperator AS pg_catalog.regoper) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.regproc AS pg_catalog.int4) WITHOUT FUNCTION AS ASSIGNMENT;
CREATE CAST (pg_catalog.regproc AS pg_catalog.int8) WITH FUNCTION dummy_cast_functions.dummycast_regproc_int8_int8(pg_catalog.regproc) AS ASSIGNMENT;
CREATE CAST (pg_catalog.regproc AS pg_catalog.oid) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.regproc AS pg_catalog.regprocedure) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.regprocedure AS pg_catalog.int4) WITHOUT FUNCTION AS ASSIGNMENT;
CREATE CAST (pg_catalog.regprocedure AS pg_catalog.int8) WITH FUNCTION dummy_cast_functions.dummycast_regprocedure_int8_int8(pg_catalog.regprocedure) AS ASSIGNMENT;
CREATE CAST (pg_catalog.regprocedure AS pg_catalog.oid) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.regprocedure AS pg_catalog.regproc) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.regtype AS pg_catalog.int4) WITHOUT FUNCTION AS ASSIGNMENT;
CREATE CAST (pg_catalog.regtype AS pg_catalog.int8) WITH FUNCTION dummy_cast_functions.dummycast_regtype_int8_int8(pg_catalog.regtype) AS ASSIGNMENT;
CREATE CAST (pg_catalog.regtype AS pg_catalog.oid) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.reltime AS pg_catalog."interval") WITH FUNCTION pg_catalog.interval(pg_catalog.reltime) AS IMPLICIT;
CREATE CAST (pg_catalog.reltime AS pg_catalog.int4) WITHOUT FUNCTION;
CREATE CAST (pg_catalog.text AS pg_catalog."char") WITH FUNCTION pg_catalog.char(pg_catalog.text) AS ASSIGNMENT;
CREATE CAST (pg_catalog.text AS pg_catalog."interval") WITH FUNCTION pg_catalog.interval(pg_catalog.text);
CREATE CAST (pg_catalog.text AS pg_catalog."numeric") WITH FUNCTION pg_catalog.numeric(pg_catalog.text);
CREATE CAST (pg_catalog.text AS pg_catalog."time") WITH FUNCTION pg_catalog.time(pg_catalog.text);
CREATE CAST (pg_catalog.text AS pg_catalog."timestamp") WITH FUNCTION pg_catalog.timestamp(pg_catalog.text);
CREATE CAST (pg_catalog.text AS pg_catalog."varchar") WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.text AS pg_catalog.bpchar) WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.text AS pg_catalog.cidr) WITH FUNCTION pg_catalog.cidr(pg_catalog.text);
CREATE CAST (pg_catalog.text AS pg_catalog.date) WITH FUNCTION pg_catalog.date(pg_catalog.text);
CREATE CAST (pg_catalog.text AS pg_catalog.float4) WITH FUNCTION pg_catalog.float4(pg_catalog.text);
CREATE CAST (pg_catalog.text AS pg_catalog.float8) WITH FUNCTION pg_catalog.float8(pg_catalog.text);
CREATE CAST (pg_catalog.text AS pg_catalog.inet) WITH FUNCTION pg_catalog.inet(pg_catalog.text);
CREATE CAST (pg_catalog.text AS pg_catalog.int2) WITH FUNCTION pg_catalog.int2(pg_catalog.text);
CREATE CAST (pg_catalog.text AS pg_catalog.int4) WITH FUNCTION pg_catalog.int4(pg_catalog.text);
CREATE CAST (pg_catalog.text AS pg_catalog.int8) WITH FUNCTION pg_catalog.int8(pg_catalog.text);
CREATE CAST (pg_catalog.text AS pg_catalog.macaddr) WITH FUNCTION pg_catalog.macaddr(pg_catalog.text);
CREATE CAST (pg_catalog.text AS pg_catalog.name) WITH FUNCTION pg_catalog.name(pg_catalog.text) AS IMPLICIT;
CREATE CAST (pg_catalog.text AS pg_catalog.oid) WITH FUNCTION pg_catalog.oid(pg_catalog.text);
CREATE CAST (pg_catalog.text AS pg_catalog.regclass) WITH FUNCTION pg_catalog.regclass(pg_catalog.text) AS IMPLICIT;
CREATE CAST (pg_catalog.text AS pg_catalog.timestamptz) WITH FUNCTION pg_catalog.timestamptz(pg_catalog.text);
CREATE CAST (pg_catalog.text AS pg_catalog.timetz) WITH FUNCTION pg_catalog.timetz(pg_catalog.text);
CREATE CAST (pg_catalog.tid AS pg_catalog.gpaotid) WITHOUT FUNCTION;
CREATE CAST (pg_catalog.tid AS pg_catalog.int8) WITH FUNCTION pg_catalog.int8(pg_catalog.tid);
CREATE CAST (pg_catalog.timestamptz AS pg_catalog."time") WITH FUNCTION pg_catalog.time(pg_catalog.timestamptz) AS ASSIGNMENT;
CREATE CAST (pg_catalog.timestamptz AS pg_catalog."timestamp") WITH FUNCTION pg_catalog.timestamp(pg_catalog.timestamptz) AS ASSIGNMENT;
CREATE CAST (pg_catalog.timestamptz AS pg_catalog."varchar") WITH FUNCTION dummy_cast_functions.dummycast_timestamptz_varchar_text(pg_catalog.timestamptz) AS ASSIGNMENT;
CREATE CAST (pg_catalog.timestamptz AS pg_catalog.abstime) WITH FUNCTION pg_catalog.abstime(pg_catalog.timestamptz) AS ASSIGNMENT;
CREATE CAST (pg_catalog.timestamptz AS pg_catalog.bpchar) WITH FUNCTION dummy_cast_functions.dummycast_timestamptz_bpchar_text(pg_catalog.timestamptz) AS ASSIGNMENT;
CREATE CAST (pg_catalog.timestamptz AS pg_catalog.date) WITH FUNCTION pg_catalog.date(pg_catalog.timestamptz) AS ASSIGNMENT;
CREATE CAST (pg_catalog.timestamptz AS pg_catalog.text) WITH FUNCTION pg_catalog.text(pg_catalog.timestamptz) AS IMPLICIT;
CREATE CAST (pg_catalog.timestamptz AS pg_catalog.timestamptz) WITH FUNCTION pg_catalog.timestamptz(pg_catalog.timestamptz, pg_catalog.int4) AS IMPLICIT;
CREATE CAST (pg_catalog.timestamptz AS pg_catalog.timetz) WITH FUNCTION pg_catalog.timetz(pg_catalog.timestamptz) AS ASSIGNMENT;
CREATE CAST (pg_catalog.timetz AS pg_catalog."time") WITH FUNCTION pg_catalog.time(pg_catalog.timetz) AS ASSIGNMENT;
CREATE CAST (pg_catalog.timetz AS pg_catalog."varchar") WITH FUNCTION dummy_cast_functions.dummycast_timetz_varchar_text(pg_catalog.timetz) AS ASSIGNMENT;
CREATE CAST (pg_catalog.timetz AS pg_catalog.bpchar) WITH FUNCTION dummy_cast_functions.dummycast_timetz_bpchar_text(pg_catalog.timetz) AS ASSIGNMENT;
CREATE CAST (pg_catalog.timetz AS pg_catalog.text) WITH FUNCTION pg_catalog.text(pg_catalog.timetz) AS IMPLICIT;
CREATE CAST (pg_catalog.timetz AS pg_catalog.timetz) WITH FUNCTION pg_catalog.timetz(pg_catalog.timetz, pg_catalog.int4) AS IMPLICIT;
CREATE CAST (pg_catalog.varbit AS pg_catalog."bit") WITHOUT FUNCTION AS IMPLICIT;
CREATE CAST (pg_catalog.varbit AS pg_catalog.varbit) WITH FUNCTION pg_catalog.varbit(pg_catalog.varbit, pg_catalog.int4, pg_catalog.bool) AS IMPLICIT;
CREATE FUNCTION dummy_cast_functions.dummycast_bpchar_char_char(pg_catalog.bpchar) RETURNS pg_catalog."char" LANGUAGE internal AS 'text_char' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_bpchar_date_date(pg_catalog.bpchar) RETURNS pg_catalog.date LANGUAGE internal AS 'text_date' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_bpchar_float4_float4(pg_catalog.bpchar) RETURNS pg_catalog.float4 LANGUAGE internal AS 'text_float4' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_bpchar_float8_float8(pg_catalog.bpchar) RETURNS pg_catalog.float8 LANGUAGE internal AS 'text_float8' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_bpchar_int2_int2(pg_catalog.bpchar) RETURNS pg_catalog.int2 LANGUAGE internal AS 'text_int2' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_bpchar_int4_int4(pg_catalog.bpchar) RETURNS pg_catalog.int4 LANGUAGE internal AS 'text_int4' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_bpchar_int8_int8(pg_catalog.bpchar) RETURNS pg_catalog.int8 LANGUAGE internal AS 'text_int8' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_bpchar_interval_interval(pg_catalog.bpchar) RETURNS pg_catalog."interval" LANGUAGE internal AS 'text_interval' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_bpchar_macaddr_macaddr(pg_catalog.bpchar) RETURNS pg_catalog.macaddr LANGUAGE internal AS 'text_macaddr' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_bpchar_numeric_numeric(pg_catalog.bpchar) RETURNS pg_catalog."numeric" LANGUAGE internal AS 'text_numeric' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_bpchar_oid_oid(pg_catalog.bpchar) RETURNS pg_catalog.oid LANGUAGE internal AS 'text_oid' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_bpchar_time_time(pg_catalog.bpchar) RETURNS pg_catalog."time" LANGUAGE internal AS 'text_time' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_bpchar_timestamp_timestamp(pg_catalog.bpchar) RETURNS pg_catalog."timestamp" LANGUAGE internal AS 'text_timestamp' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_bpchar_timestamptz_timestamptz(pg_catalog.bpchar) RETURNS pg_catalog.timestamptz LANGUAGE internal AS 'text_timestamptz' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_bpchar_timetz_timetz(pg_catalog.bpchar) RETURNS pg_catalog.timetz LANGUAGE internal AS 'text_timetz' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_bpchar_varchar_text(pg_catalog.bpchar) RETURNS pg_catalog."varchar" LANGUAGE internal AS 'rtrim1' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_char_varchar_text(pg_catalog."char") RETURNS pg_catalog."varchar" LANGUAGE internal AS 'char_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_cidr_bpchar_text(pg_catalog.cidr) RETURNS pg_catalog.bpchar LANGUAGE internal AS 'network_show' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_cidr_text_text(pg_catalog.cidr) RETURNS pg_catalog.text LANGUAGE internal AS 'network_show' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_cidr_varchar_text(pg_catalog.cidr) RETURNS pg_catalog."varchar" LANGUAGE internal AS 'network_show' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_date_bpchar_text(pg_catalog.date) RETURNS pg_catalog.bpchar LANGUAGE internal AS 'date_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_date_varchar_text(pg_catalog.date) RETURNS pg_catalog."varchar" LANGUAGE internal AS 'date_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_float4_bpchar_text(pg_catalog.float4) RETURNS pg_catalog.bpchar LANGUAGE internal AS 'float4_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_float4_varchar_text(pg_catalog.float4) RETURNS pg_catalog."varchar" LANGUAGE internal AS 'float4_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_float8_bpchar_text(pg_catalog.float8) RETURNS pg_catalog.bpchar LANGUAGE internal AS 'float8_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_float8_varchar_text(pg_catalog.float8) RETURNS pg_catalog."varchar" LANGUAGE internal AS 'float8_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_inet_bpchar_text(pg_catalog.inet) RETURNS pg_catalog.bpchar LANGUAGE internal AS 'network_show' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_inet_varchar_text(pg_catalog.inet) RETURNS pg_catalog."varchar" LANGUAGE internal AS 'network_show' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_int2_bpchar_text(pg_catalog.int2) RETURNS pg_catalog.bpchar LANGUAGE internal AS 'int2_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_int2_oid_int4(pg_catalog.int2) RETURNS pg_catalog.oid LANGUAGE internal AS 'i2toi4' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_int2_regclass_int4(pg_catalog.int2) RETURNS pg_catalog.regclass LANGUAGE internal AS 'i2toi4' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_int2_regoper_int4(pg_catalog.int2) RETURNS pg_catalog.regoper LANGUAGE internal AS 'i2toi4' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_int2_regoperator_int4(pg_catalog.int2) RETURNS pg_catalog.regoperator LANGUAGE internal AS 'i2toi4' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_int2_regproc_int4(pg_catalog.int2) RETURNS pg_catalog.regproc LANGUAGE internal AS 'i2toi4' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_int2_regprocedure_int4(pg_catalog.int2) RETURNS pg_catalog.regprocedure LANGUAGE internal AS 'i2toi4' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_int2_regtype_int4(pg_catalog.int2) RETURNS pg_catalog.regtype LANGUAGE internal AS 'i2toi4' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_int2_varchar_text(pg_catalog.int2) RETURNS pg_catalog."varchar" LANGUAGE internal AS 'int2_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_int4_bpchar_text(pg_catalog.int4) RETURNS pg_catalog.bpchar LANGUAGE internal AS 'int4_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_int4_varchar_text(pg_catalog.int4) RETURNS pg_catalog."varchar" LANGUAGE internal AS 'int4_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_int8_bpchar_text(pg_catalog.int8) RETURNS pg_catalog.bpchar LANGUAGE internal AS 'int8_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_int8_regclass_oid(pg_catalog.int8) RETURNS pg_catalog.regclass LANGUAGE internal AS 'i8tooid' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_int8_regoper_oid(pg_catalog.int8) RETURNS pg_catalog.regoper LANGUAGE internal AS 'i8tooid' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_int8_regoperator_oid(pg_catalog.int8) RETURNS pg_catalog.regoperator LANGUAGE internal AS 'i8tooid' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_int8_regproc_oid(pg_catalog.int8) RETURNS pg_catalog.regproc LANGUAGE internal AS 'i8tooid' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_int8_regprocedure_oid(pg_catalog.int8) RETURNS pg_catalog.regprocedure LANGUAGE internal AS 'i8tooid' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_int8_regtype_oid(pg_catalog.int8) RETURNS pg_catalog.regtype LANGUAGE internal AS 'i8tooid' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_int8_varchar_text(pg_catalog.int8) RETURNS pg_catalog."varchar" LANGUAGE internal AS 'int8_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_interval_bpchar_text(pg_catalog."interval") RETURNS pg_catalog.bpchar LANGUAGE internal AS 'interval_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_interval_varchar_text(pg_catalog."interval") RETURNS pg_catalog."varchar" LANGUAGE internal AS 'interval_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_macaddr_bpchar_text(pg_catalog.macaddr) RETURNS pg_catalog.bpchar LANGUAGE internal AS 'macaddr_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_macaddr_varchar_text(pg_catalog.macaddr) RETURNS pg_catalog."varchar" LANGUAGE internal AS 'macaddr_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_numeric_bpchar_text(pg_catalog."numeric") RETURNS pg_catalog.bpchar LANGUAGE internal AS 'numeric_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_numeric_varchar_text(pg_catalog."numeric") RETURNS pg_catalog."varchar" LANGUAGE internal AS 'numeric_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_oid_bpchar_text(pg_catalog.oid) RETURNS pg_catalog.bpchar LANGUAGE internal AS 'oid_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_oid_varchar_text(pg_catalog.oid) RETURNS pg_catalog."varchar" LANGUAGE internal AS 'oid_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_regclass_int8_int8(pg_catalog.regclass) RETURNS pg_catalog.int8 LANGUAGE internal AS 'oidtoi8' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_regoper_int8_int8(pg_catalog.regoper) RETURNS pg_catalog.int8 LANGUAGE internal AS 'oidtoi8' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_regoperator_int8_int8(pg_catalog.regoperator) RETURNS pg_catalog.int8 LANGUAGE internal AS 'oidtoi8' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_regproc_int8_int8(pg_catalog.regproc) RETURNS pg_catalog.int8 LANGUAGE internal AS 'oidtoi8' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_regprocedure_int8_int8(pg_catalog.regprocedure) RETURNS pg_catalog.int8 LANGUAGE internal AS 'oidtoi8' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_regtype_int8_int8(pg_catalog.regtype) RETURNS pg_catalog.int8 LANGUAGE internal AS 'oidtoi8' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_time_bpchar_text(pg_catalog."time") RETURNS pg_catalog.bpchar LANGUAGE internal AS 'time_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_time_varchar_text(pg_catalog."time") RETURNS pg_catalog."varchar" LANGUAGE internal AS 'time_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_timestamp_bpchar_text(pg_catalog."timestamp") RETURNS pg_catalog.bpchar LANGUAGE internal AS 'timestamp_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_timestamp_varchar_text(pg_catalog."timestamp") RETURNS pg_catalog."varchar" LANGUAGE internal AS 'timestamp_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_timestamptz_bpchar_text(pg_catalog.timestamptz) RETURNS pg_catalog.bpchar LANGUAGE internal AS 'timestamptz_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_timestamptz_varchar_text(pg_catalog.timestamptz) RETURNS pg_catalog."varchar" LANGUAGE internal AS 'timestamptz_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_timetz_bpchar_text(pg_catalog.timetz) RETURNS pg_catalog.bpchar LANGUAGE internal AS 'timetz_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_timetz_varchar_text(pg_catalog.timetz) RETURNS pg_catalog."varchar" LANGUAGE internal AS 'timetz_text' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_varchar_char_char(pg_catalog."varchar") RETURNS pg_catalog."char" LANGUAGE internal AS 'text_char' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_varchar_cidr_cidr(pg_catalog."varchar") RETURNS pg_catalog.cidr LANGUAGE internal AS 'text_cidr' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_varchar_date_date(pg_catalog."varchar") RETURNS pg_catalog.date LANGUAGE internal AS 'text_date' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_varchar_float4_float4(pg_catalog."varchar") RETURNS pg_catalog.float4 LANGUAGE internal AS 'text_float4' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_varchar_float8_float8(pg_catalog."varchar") RETURNS pg_catalog.float8 LANGUAGE internal AS 'text_float8' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_varchar_inet_inet(pg_catalog."varchar") RETURNS pg_catalog.inet LANGUAGE internal AS 'text_inet' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_varchar_int2_int2(pg_catalog."varchar") RETURNS pg_catalog.int2 LANGUAGE internal AS 'text_int2' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_varchar_int4_int4(pg_catalog."varchar") RETURNS pg_catalog.int4 LANGUAGE internal AS 'text_int4' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_varchar_int8_int8(pg_catalog."varchar") RETURNS pg_catalog.int8 LANGUAGE internal AS 'text_int8' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_varchar_interval_interval(pg_catalog."varchar") RETURNS pg_catalog."interval" LANGUAGE internal AS 'text_interval' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_varchar_macaddr_macaddr(pg_catalog."varchar") RETURNS pg_catalog.macaddr LANGUAGE internal AS 'text_macaddr' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_varchar_numeric_numeric(pg_catalog."varchar") RETURNS pg_catalog."numeric" LANGUAGE internal AS 'text_numeric' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_varchar_oid_oid(pg_catalog."varchar") RETURNS pg_catalog.oid LANGUAGE internal AS 'text_oid' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_varchar_regclass_regclass(pg_catalog."varchar") RETURNS pg_catalog.regclass LANGUAGE internal AS 'text_regclass' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_varchar_time_time(pg_catalog."varchar") RETURNS pg_catalog."time" LANGUAGE internal AS 'text_time' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_varchar_timestamp_timestamp(pg_catalog."varchar") RETURNS pg_catalog."timestamp" LANGUAGE internal AS 'text_timestamp' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_varchar_timestamptz_timestamptz(pg_catalog."varchar") RETURNS pg_catalog.timestamptz LANGUAGE internal AS 'text_timestamptz' STRICT IMMUTABLE;
CREATE FUNCTION dummy_cast_functions.dummycast_varchar_timetz_timetz(pg_catalog."varchar") RETURNS pg_catalog.timetz LANGUAGE internal AS 'text_timetz' STRICT IMMUTABLE;
CREATE FUNCTION pg_catalog."RI_FKey_cascade_del"() RETURNS pg_catalog.trigger LANGUAGE internal VOLATILE STRICT AS 'RI_FKey_cascade_del';
CREATE FUNCTION pg_catalog."RI_FKey_cascade_upd"() RETURNS pg_catalog.trigger LANGUAGE internal VOLATILE STRICT AS 'RI_FKey_cascade_upd';
CREATE FUNCTION pg_catalog."RI_FKey_check_ins"() RETURNS pg_catalog.trigger LANGUAGE internal VOLATILE STRICT AS 'RI_FKey_check_ins';
CREATE FUNCTION pg_catalog."RI_FKey_check_upd"() RETURNS pg_catalog.trigger LANGUAGE internal VOLATILE STRICT AS 'RI_FKey_check_upd';
CREATE FUNCTION pg_catalog."RI_FKey_noaction_del"() RETURNS pg_catalog.trigger LANGUAGE internal VOLATILE STRICT AS 'RI_FKey_noaction_del';
CREATE FUNCTION pg_catalog."RI_FKey_noaction_upd"() RETURNS pg_catalog.trigger LANGUAGE internal VOLATILE STRICT AS 'RI_FKey_noaction_upd';
CREATE FUNCTION pg_catalog."RI_FKey_restrict_del"() RETURNS pg_catalog.trigger LANGUAGE internal VOLATILE STRICT AS 'RI_FKey_restrict_del';
CREATE FUNCTION pg_catalog."RI_FKey_restrict_upd"() RETURNS pg_catalog.trigger LANGUAGE internal VOLATILE STRICT AS 'RI_FKey_restrict_upd';
CREATE FUNCTION pg_catalog."RI_FKey_setdefault_del"() RETURNS pg_catalog.trigger LANGUAGE internal VOLATILE STRICT AS 'RI_FKey_setdefault_del';
CREATE FUNCTION pg_catalog."RI_FKey_setdefault_upd"() RETURNS pg_catalog.trigger LANGUAGE internal VOLATILE STRICT AS 'RI_FKey_setdefault_upd';
CREATE FUNCTION pg_catalog."RI_FKey_setnull_del"() RETURNS pg_catalog.trigger LANGUAGE internal VOLATILE STRICT AS 'RI_FKey_setnull_del';
CREATE FUNCTION pg_catalog."RI_FKey_setnull_upd"() RETURNS pg_catalog.trigger LANGUAGE internal VOLATILE STRICT AS 'RI_FKey_setnull_upd';
CREATE FUNCTION pg_catalog."bit"(pg_catalog."bit", pg_catalog.int4, pg_catalog.bool) RETURNS pg_catalog."bit" LANGUAGE internal IMMUTABLE STRICT AS 'bit';
CREATE FUNCTION pg_catalog."bit"(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog."bit" LANGUAGE internal IMMUTABLE STRICT AS 'bitfromint4';
CREATE FUNCTION pg_catalog."bit"(pg_catalog.int8, pg_catalog.int4) RETURNS pg_catalog."bit" LANGUAGE internal IMMUTABLE STRICT AS 'bitfromint8';
CREATE FUNCTION pg_catalog."char"(pg_catalog.int4) RETURNS pg_catalog."char" LANGUAGE internal IMMUTABLE STRICT AS 'i4tochar';
CREATE FUNCTION pg_catalog."char"(pg_catalog.text) RETURNS pg_catalog."char" LANGUAGE internal IMMUTABLE STRICT AS 'text_char';
CREATE FUNCTION pg_catalog."convert"(pg_catalog.text, pg_catalog.name) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_convert';
CREATE FUNCTION pg_catalog."convert"(pg_catalog.text, pg_catalog.name, pg_catalog.name) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_convert2';
CREATE FUNCTION pg_catalog."current_schema"() RETURNS pg_catalog.name LANGUAGE internal STABLE STRICT AS 'current_schema';
CREATE FUNCTION pg_catalog."current_user"() RETURNS pg_catalog.name LANGUAGE internal STABLE STRICT AS 'current_user';
CREATE FUNCTION pg_catalog."decode"(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'binary_decode';
CREATE FUNCTION pg_catalog."interval"(pg_catalog."interval", pg_catalog.int4) RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'interval_scale';
CREATE FUNCTION pg_catalog."interval"(pg_catalog."time") RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'time_interval';
CREATE FUNCTION pg_catalog."interval"(pg_catalog.reltime) RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'reltime_interval';
CREATE FUNCTION pg_catalog."interval"(pg_catalog.text) RETURNS pg_catalog."interval" LANGUAGE internal STABLE STRICT AS 'text_interval';
CREATE FUNCTION pg_catalog."like"(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'bytealike';
CREATE FUNCTION pg_catalog."like"(pg_catalog.name, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'namelike';
CREATE FUNCTION pg_catalog."like"(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'textlike';
CREATE FUNCTION pg_catalog."log"(pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog."numeric"';
CREATE FUNCTION pg_catalog."log"(pg_catalog."numeric", pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_log';
CREATE FUNCTION pg_catalog."log"(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dlog10';
CREATE FUNCTION pg_catalog."numeric"(pg_catalog."numeric", pg_catalog.int4) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric';
CREATE FUNCTION pg_catalog."numeric"(pg_catalog.float4) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'float4_numeric';
CREATE FUNCTION pg_catalog."numeric"(pg_catalog.float8) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'float8_numeric';
CREATE FUNCTION pg_catalog."numeric"(pg_catalog.int2) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'int2_numeric';
CREATE FUNCTION pg_catalog."numeric"(pg_catalog.int4) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'int4_numeric';
CREATE FUNCTION pg_catalog."numeric"(pg_catalog.int8) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'int8_numeric';
CREATE FUNCTION pg_catalog."numeric"(pg_catalog.text) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'text_numeric';
CREATE FUNCTION pg_catalog."overlaps"(pg_catalog."time", pg_catalog."interval", pg_catalog."time", pg_catalog."interval") RETURNS pg_catalog.bool LANGUAGE sql IMMUTABLE AS 'select null::pg_catalog.bool';
CREATE FUNCTION pg_catalog."overlaps"(pg_catalog."time", pg_catalog."interval", pg_catalog."time", pg_catalog."time") RETURNS pg_catalog.bool LANGUAGE sql IMMUTABLE AS 'select null::pg_catalog.bool';
CREATE FUNCTION pg_catalog."overlaps"(pg_catalog."time", pg_catalog."time", pg_catalog."time", pg_catalog."interval") RETURNS pg_catalog.bool LANGUAGE sql IMMUTABLE AS 'select null::pg_catalog.bool';
CREATE FUNCTION pg_catalog."overlaps"(pg_catalog."time", pg_catalog."time", pg_catalog."time", pg_catalog."time") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE AS 'overlaps_time';
CREATE FUNCTION pg_catalog."overlaps"(pg_catalog."timestamp", pg_catalog."interval", pg_catalog."timestamp", pg_catalog."interval") RETURNS pg_catalog.bool LANGUAGE sql IMMUTABLE AS 'select null::pg_catalog.bool';
CREATE FUNCTION pg_catalog."overlaps"(pg_catalog."timestamp", pg_catalog."interval", pg_catalog."timestamp", pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE sql IMMUTABLE AS 'select null::pg_catalog.bool';
CREATE FUNCTION pg_catalog."overlaps"(pg_catalog."timestamp", pg_catalog."timestamp", pg_catalog."timestamp", pg_catalog."interval") RETURNS pg_catalog.bool LANGUAGE sql IMMUTABLE AS 'select null::pg_catalog.bool';
CREATE FUNCTION pg_catalog."overlaps"(pg_catalog."timestamp", pg_catalog."timestamp", pg_catalog."timestamp", pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE AS 'overlaps_timestamp';
CREATE FUNCTION pg_catalog."overlaps"(pg_catalog.timestamptz, pg_catalog."interval", pg_catalog.timestamptz, pg_catalog."interval") RETURNS pg_catalog.bool LANGUAGE sql STABLE AS 'select null::pg_catalog.bool';
CREATE FUNCTION pg_catalog."overlaps"(pg_catalog.timestamptz, pg_catalog."interval", pg_catalog.timestamptz, pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE sql STABLE AS 'select null::pg_catalog.bool';
CREATE FUNCTION pg_catalog."overlaps"(pg_catalog.timestamptz, pg_catalog.timestamptz, pg_catalog.timestamptz, pg_catalog."interval") RETURNS pg_catalog.bool LANGUAGE sql STABLE AS 'select null::pg_catalog.bool';
CREATE FUNCTION pg_catalog."overlaps"(pg_catalog.timestamptz, pg_catalog.timestamptz, pg_catalog.timestamptz, pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE AS 'overlaps_timestamp';
CREATE FUNCTION pg_catalog."overlaps"(pg_catalog.timetz, pg_catalog.timetz, pg_catalog.timetz, pg_catalog.timetz) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE AS 'overlaps_timetz';
CREATE FUNCTION pg_catalog."overlay"(pg_catalog.text, pg_catalog.text, pg_catalog.int4) RETURNS pg_catalog.text LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog.text';
CREATE FUNCTION pg_catalog."overlay"(pg_catalog.text, pg_catalog.text, pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.text LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog.text';
CREATE FUNCTION pg_catalog."position"(pg_catalog."bit", pg_catalog."bit") RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'bitposition';
CREATE FUNCTION pg_catalog."position"(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'byteapos';
CREATE FUNCTION pg_catalog."position"(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'textpos';
CREATE FUNCTION pg_catalog."session_user"() RETURNS pg_catalog.name LANGUAGE internal STABLE STRICT AS 'session_user';
CREATE FUNCTION pg_catalog."substring"(pg_catalog."bit", pg_catalog.int4) RETURNS pg_catalog."bit" LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog."bit"';
CREATE FUNCTION pg_catalog."substring"(pg_catalog."bit", pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog."bit" LANGUAGE internal IMMUTABLE STRICT AS 'bitsubstr';
CREATE FUNCTION pg_catalog."substring"(pg_catalog.bytea, pg_catalog.int4) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'bytea_substr_no_len';
CREATE FUNCTION pg_catalog."substring"(pg_catalog.bytea, pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'bytea_substr';
CREATE FUNCTION pg_catalog."substring"(pg_catalog.text, pg_catalog.int4) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'text_substr_no_len';
CREATE FUNCTION pg_catalog."substring"(pg_catalog.text, pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'text_substr';
CREATE FUNCTION pg_catalog."substring"(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'textregexsubstr';
CREATE FUNCTION pg_catalog."substring"(pg_catalog.text, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog.text';
CREATE FUNCTION pg_catalog."time"(pg_catalog."interval") RETURNS pg_catalog."time" LANGUAGE internal IMMUTABLE STRICT AS 'interval_time';
CREATE FUNCTION pg_catalog."time"(pg_catalog."time", pg_catalog.int4) RETURNS pg_catalog."time" LANGUAGE internal IMMUTABLE STRICT AS 'time_scale';
CREATE FUNCTION pg_catalog."time"(pg_catalog."timestamp") RETURNS pg_catalog."time" LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_time';
CREATE FUNCTION pg_catalog."time"(pg_catalog.abstime) RETURNS pg_catalog."time" LANGUAGE sql STABLE STRICT AS $$ SELECT null::pg_catalog."time"$$;
CREATE FUNCTION pg_catalog."time"(pg_catalog.text) RETURNS pg_catalog."time" LANGUAGE internal STABLE STRICT AS 'text_time';
CREATE FUNCTION pg_catalog."time"(pg_catalog.timestamptz) RETURNS pg_catalog."time" LANGUAGE internal STABLE STRICT AS 'timestamptz_time';
CREATE FUNCTION pg_catalog."time"(pg_catalog.timetz) RETURNS pg_catalog."time" LANGUAGE internal IMMUTABLE STRICT AS 'timetz_time';
CREATE FUNCTION pg_catalog."timestamp"(pg_catalog."timestamp", pg_catalog.int4) RETURNS pg_catalog."timestamp" LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_scale';
CREATE FUNCTION pg_catalog."timestamp"(pg_catalog.abstime) RETURNS pg_catalog."timestamp" LANGUAGE internal STABLE STRICT AS 'abstime_timestamp';
CREATE FUNCTION pg_catalog."timestamp"(pg_catalog.date) RETURNS pg_catalog."timestamp" LANGUAGE internal IMMUTABLE STRICT AS 'date_timestamp';
CREATE FUNCTION pg_catalog."timestamp"(pg_catalog.date, pg_catalog."time") RETURNS pg_catalog."timestamp" LANGUAGE internal IMMUTABLE STRICT AS 'datetime_timestamp';
CREATE FUNCTION pg_catalog."timestamp"(pg_catalog.text) RETURNS pg_catalog."timestamp" LANGUAGE internal STABLE STRICT AS 'text_timestamp';
CREATE FUNCTION pg_catalog."timestamp"(pg_catalog.timestamptz) RETURNS pg_catalog."timestamp" LANGUAGE internal STABLE STRICT AS 'timestamptz_timestamp';
CREATE FUNCTION pg_catalog."varchar"(pg_catalog."varchar", pg_catalog.int4, pg_catalog.bool) RETURNS pg_catalog."varchar" LANGUAGE internal IMMUTABLE STRICT AS 'varchar';
CREATE FUNCTION pg_catalog."varchar"(pg_catalog.name) RETURNS pg_catalog."varchar" LANGUAGE internal IMMUTABLE STRICT AS 'name_text';
CREATE FUNCTION pg_catalog.abbrev(pg_catalog.cidr) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'cidr_abbrev';
CREATE FUNCTION pg_catalog.abbrev(pg_catalog.inet) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'inet_abbrev';
CREATE FUNCTION pg_catalog.abs(pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_abs';
CREATE FUNCTION pg_catalog.abs(pg_catalog.float4) RETURNS pg_catalog.float4 LANGUAGE internal IMMUTABLE STRICT AS 'float4abs';
CREATE FUNCTION pg_catalog.abs(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8abs';
CREATE FUNCTION pg_catalog.abs(pg_catalog.int2) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int2abs';
CREATE FUNCTION pg_catalog.abs(pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4abs';
CREATE FUNCTION pg_catalog.abs(pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8abs';
CREATE FUNCTION pg_catalog.abstime(pg_catalog."timestamp") RETURNS pg_catalog.abstime LANGUAGE internal STABLE STRICT AS 'timestamp_abstime';
CREATE FUNCTION pg_catalog.abstime(pg_catalog.timestamptz) RETURNS pg_catalog.abstime LANGUAGE internal IMMUTABLE STRICT AS 'timestamptz_abstime';
CREATE FUNCTION pg_catalog.abstimeeq(pg_catalog.abstime, pg_catalog.abstime) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'abstimeeq';
CREATE FUNCTION pg_catalog.abstimege(pg_catalog.abstime, pg_catalog.abstime) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'abstimege';
CREATE FUNCTION pg_catalog.abstimegt(pg_catalog.abstime, pg_catalog.abstime) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'abstimegt';
CREATE FUNCTION pg_catalog.abstimein(pg_catalog.cstring) RETURNS pg_catalog.abstime LANGUAGE internal STABLE STRICT AS 'abstimein';
CREATE FUNCTION pg_catalog.abstimele(pg_catalog.abstime, pg_catalog.abstime) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'abstimele';
CREATE FUNCTION pg_catalog.abstimelt(pg_catalog.abstime, pg_catalog.abstime) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'abstimelt';
CREATE FUNCTION pg_catalog.abstimene(pg_catalog.abstime, pg_catalog.abstime) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'abstimene';
CREATE FUNCTION pg_catalog.abstimeout(pg_catalog.abstime) RETURNS pg_catalog.cstring LANGUAGE internal STABLE STRICT AS 'abstimeout';
CREATE FUNCTION pg_catalog.abstimerecv(pg_catalog.internal) RETURNS pg_catalog.abstime LANGUAGE internal IMMUTABLE STRICT AS 'abstimerecv';
CREATE FUNCTION pg_catalog.abstimesend(pg_catalog.abstime) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'abstimesend';
CREATE FUNCTION pg_catalog.aclcontains(pg_catalog._aclitem, pg_catalog.aclitem) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'aclcontains';
CREATE FUNCTION pg_catalog.aclinsert(pg_catalog._aclitem, pg_catalog.aclitem) RETURNS pg_catalog._aclitem LANGUAGE internal IMMUTABLE STRICT AS 'aclinsert';
CREATE FUNCTION pg_catalog.aclitemeq(pg_catalog.aclitem, pg_catalog.aclitem) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'aclitem_eq';
CREATE FUNCTION pg_catalog.aclitemin(pg_catalog.cstring) RETURNS pg_catalog.aclitem LANGUAGE internal STABLE STRICT AS 'aclitemin';
CREATE FUNCTION pg_catalog.aclitemout(pg_catalog.aclitem) RETURNS pg_catalog.cstring LANGUAGE internal STABLE STRICT AS 'aclitemout';
CREATE FUNCTION pg_catalog.aclremove(pg_catalog._aclitem, pg_catalog.aclitem) RETURNS pg_catalog._aclitem LANGUAGE internal IMMUTABLE STRICT AS 'aclremove';
CREATE FUNCTION pg_catalog.acos(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dacos';
CREATE FUNCTION pg_catalog.age(pg_catalog."timestamp") RETURNS pg_catalog."interval" LANGUAGE sql STABLE STRICT AS 'select null::pg_catalog."interval"';
CREATE FUNCTION pg_catalog.age(pg_catalog."timestamp", pg_catalog."timestamp") RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_age';
CREATE FUNCTION pg_catalog.age(pg_catalog.timestamptz) RETURNS pg_catalog."interval" LANGUAGE sql STABLE STRICT AS 'select null::pg_catalog."interval"';
CREATE FUNCTION pg_catalog.age(pg_catalog.timestamptz, pg_catalog.timestamptz) RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'timestamptz_age';
CREATE FUNCTION pg_catalog.age(pg_catalog.xid) RETURNS pg_catalog.int4 LANGUAGE internal STABLE STRICT AS 'xid_age';
CREATE FUNCTION pg_catalog.any_in(pg_catalog.cstring) RETURNS pg_catalog."any" LANGUAGE internal IMMUTABLE STRICT AS 'any_in';
CREATE FUNCTION pg_catalog.any_out(pg_catalog."any") RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'any_out';
CREATE FUNCTION pg_catalog.anyarray_in(pg_catalog.cstring) RETURNS pg_catalog.anyarray LANGUAGE internal IMMUTABLE STRICT AS 'anyarray_in';
CREATE FUNCTION pg_catalog.anyarray_out(pg_catalog.anyarray) RETURNS pg_catalog.cstring LANGUAGE internal STABLE STRICT AS 'anyarray_out';
CREATE FUNCTION pg_catalog.anyarray_recv(pg_catalog.internal) RETURNS pg_catalog.anyarray LANGUAGE internal STABLE STRICT AS 'anyarray_recv';
CREATE FUNCTION pg_catalog.anyarray_send(pg_catalog.anyarray) RETURNS pg_catalog.bytea LANGUAGE internal STABLE STRICT AS 'anyarray_send';
CREATE FUNCTION pg_catalog.anyelement_in(pg_catalog.cstring) RETURNS pg_catalog.anyelement LANGUAGE internal IMMUTABLE STRICT AS 'anyelement_in';
CREATE FUNCTION pg_catalog.anyelement_out(pg_catalog.anyelement) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'anyelement_out';
CREATE FUNCTION pg_catalog.anytable_in(pg_catalog.cstring) RETURNS pg_catalog.anytable LANGUAGE internal IMMUTABLE STRICT AS 'anytable_in';
CREATE FUNCTION pg_catalog.anytable_out(pg_catalog.anytable) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'anytable_out';
CREATE FUNCTION pg_catalog.aocsvpinfo_decode(pg_catalog.varbit, pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'aocsvpinfo_decode';
CREATE FUNCTION pg_catalog.area(pg_catalog.box) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'box_area';
CREATE FUNCTION pg_catalog.area(pg_catalog.circle) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'circle_area';
CREATE FUNCTION pg_catalog.area(pg_catalog.path) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'path_area';
CREATE FUNCTION pg_catalog.areajoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'areajoinsel';
CREATE FUNCTION pg_catalog.areasel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'areasel';
CREATE FUNCTION pg_catalog.array_add(pg_catalog._int4, pg_catalog._int4) RETURNS pg_catalog._int4 LANGUAGE internal IMMUTABLE STRICT AS 'array_int4_add';
CREATE FUNCTION pg_catalog.array_agg_finalfn(pg_catalog.internal) RETURNS pg_catalog.anyarray LANGUAGE internal IMMUTABLE AS 'array_agg_finalfn';
CREATE FUNCTION pg_catalog.array_agg_transfn(pg_catalog.internal, pg_catalog.anyelement) RETURNS pg_catalog.internal LANGUAGE internal IMMUTABLE AS 'array_agg_transfn';
CREATE FUNCTION pg_catalog.array_append(pg_catalog.anyarray, pg_catalog.anyelement) RETURNS pg_catalog.anyarray LANGUAGE internal IMMUTABLE AS 'array_push';
CREATE FUNCTION pg_catalog.array_cat(pg_catalog.anyarray, pg_catalog.anyarray) RETURNS pg_catalog.anyarray LANGUAGE internal IMMUTABLE AS 'array_cat';
CREATE FUNCTION pg_catalog.array_coerce(pg_catalog.anyarray) RETURNS pg_catalog.anyarray LANGUAGE internal STABLE STRICT AS 'array_type_coerce';
CREATE FUNCTION pg_catalog.array_dims(pg_catalog.anyarray) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'array_dims';
CREATE FUNCTION pg_catalog.array_eq(pg_catalog.anyarray, pg_catalog.anyarray) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'array_eq';
CREATE FUNCTION pg_catalog.array_ge(pg_catalog.anyarray, pg_catalog.anyarray) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'array_ge';
CREATE FUNCTION pg_catalog.array_gt(pg_catalog.anyarray, pg_catalog.anyarray) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'array_gt';
CREATE FUNCTION pg_catalog.array_in(pg_catalog.cstring, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog.anyarray LANGUAGE internal STABLE STRICT AS 'array_in';
CREATE FUNCTION pg_catalog.array_larger(pg_catalog.anyarray, pg_catalog.anyarray) RETURNS pg_catalog.anyarray LANGUAGE internal IMMUTABLE STRICT AS 'array_larger';
CREATE FUNCTION pg_catalog.array_le(pg_catalog.anyarray, pg_catalog.anyarray) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'array_le';
CREATE FUNCTION pg_catalog.array_length_coerce(pg_catalog.anyarray, pg_catalog.int4, pg_catalog.bool) RETURNS pg_catalog.anyarray LANGUAGE internal STABLE STRICT AS 'array_length_coerce';
CREATE FUNCTION pg_catalog.array_lower(pg_catalog.anyarray, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'array_lower';
CREATE FUNCTION pg_catalog.array_lt(pg_catalog.anyarray, pg_catalog.anyarray) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'array_lt';
CREATE FUNCTION pg_catalog.array_ne(pg_catalog.anyarray, pg_catalog.anyarray) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'array_ne';
CREATE FUNCTION pg_catalog.array_out(pg_catalog.anyarray) RETURNS pg_catalog.cstring LANGUAGE internal STABLE STRICT AS 'array_out';
CREATE FUNCTION pg_catalog.array_prepend(pg_catalog.anyelement, pg_catalog.anyarray) RETURNS pg_catalog.anyarray LANGUAGE internal IMMUTABLE AS 'array_push';
CREATE FUNCTION pg_catalog.array_recv(pg_catalog.internal, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog.anyarray LANGUAGE internal STABLE STRICT AS 'array_recv';
CREATE FUNCTION pg_catalog.array_send(pg_catalog.anyarray) RETURNS pg_catalog.bytea LANGUAGE internal STABLE STRICT AS 'array_send';
CREATE FUNCTION pg_catalog.array_smaller(pg_catalog.anyarray, pg_catalog.anyarray) RETURNS pg_catalog.anyarray LANGUAGE internal IMMUTABLE STRICT AS 'array_smaller';
CREATE FUNCTION pg_catalog.array_to_string(pg_catalog.anyarray, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'array_to_text';
CREATE FUNCTION pg_catalog.array_type_length_coerce(pg_catalog.anyarray, pg_catalog.int4, pg_catalog.bool) RETURNS pg_catalog.anyarray LANGUAGE internal STABLE STRICT AS 'array_type_length_coerce';
CREATE FUNCTION pg_catalog.array_upper(pg_catalog.anyarray, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'array_upper';
CREATE FUNCTION pg_catalog.arraycontained(pg_catalog.anyarray, pg_catalog.anyarray) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'arraycontained';
CREATE FUNCTION pg_catalog.arraycontains(pg_catalog.anyarray, pg_catalog.anyarray) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'arraycontains';
CREATE FUNCTION pg_catalog.arrayoverlap(pg_catalog.anyarray, pg_catalog.anyarray) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'arrayoverlap';
CREATE FUNCTION pg_catalog.ascii(pg_catalog.text) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'ascii';
CREATE FUNCTION pg_catalog.asin(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dasin';
CREATE FUNCTION pg_catalog.atan(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'datan';
CREATE FUNCTION pg_catalog.atan2(pg_catalog.float8, pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'datan2';
CREATE FUNCTION pg_catalog.bit_in(pg_catalog.cstring, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog."bit" LANGUAGE internal IMMUTABLE STRICT AS 'bit_in';
CREATE FUNCTION pg_catalog.bit_length(pg_catalog."bit") RETURNS pg_catalog.int4 LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog.int4';
CREATE FUNCTION pg_catalog.bit_length(pg_catalog.bytea) RETURNS pg_catalog.int4 LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog.int4';
CREATE FUNCTION pg_catalog.bit_length(pg_catalog.text) RETURNS pg_catalog.int4 LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog.int4';
CREATE FUNCTION pg_catalog.bit_out(pg_catalog."bit") RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'bit_out';
CREATE FUNCTION pg_catalog.bit_recv(pg_catalog.internal, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog."bit" LANGUAGE internal IMMUTABLE STRICT AS 'bit_recv';
CREATE FUNCTION pg_catalog.bit_send(pg_catalog."bit") RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'bit_send';
CREATE FUNCTION pg_catalog.bitand(pg_catalog."bit", pg_catalog."bit") RETURNS pg_catalog."bit" LANGUAGE internal IMMUTABLE STRICT AS 'bitand';
CREATE FUNCTION pg_catalog.bitcat(pg_catalog."bit", pg_catalog."bit") RETURNS pg_catalog."bit" LANGUAGE internal IMMUTABLE STRICT AS 'bitcat';
CREATE FUNCTION pg_catalog.bitcmp(pg_catalog."bit", pg_catalog."bit") RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'bitcmp';
CREATE FUNCTION pg_catalog.biteq(pg_catalog."bit", pg_catalog."bit") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'biteq';
CREATE FUNCTION pg_catalog.bitge(pg_catalog."bit", pg_catalog."bit") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'bitge';
CREATE FUNCTION pg_catalog.bitgt(pg_catalog."bit", pg_catalog."bit") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'bitgt';
CREATE FUNCTION pg_catalog.bitle(pg_catalog."bit", pg_catalog."bit") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'bitle';
CREATE FUNCTION pg_catalog.bitlt(pg_catalog."bit", pg_catalog."bit") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'bitlt';
CREATE FUNCTION pg_catalog.bitne(pg_catalog."bit", pg_catalog."bit") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'bitne';
CREATE FUNCTION pg_catalog.bitnot(pg_catalog."bit") RETURNS pg_catalog."bit" LANGUAGE internal IMMUTABLE STRICT AS 'bitnot';
CREATE FUNCTION pg_catalog.bitor(pg_catalog."bit", pg_catalog."bit") RETURNS pg_catalog."bit" LANGUAGE internal IMMUTABLE STRICT AS 'bitor';
CREATE FUNCTION pg_catalog.bitshiftleft(pg_catalog."bit", pg_catalog.int4) RETURNS pg_catalog."bit" LANGUAGE internal IMMUTABLE STRICT AS 'bitshiftleft';
CREATE FUNCTION pg_catalog.bitshiftright(pg_catalog."bit", pg_catalog.int4) RETURNS pg_catalog."bit" LANGUAGE internal IMMUTABLE STRICT AS 'bitshiftright';
CREATE FUNCTION pg_catalog.bitxor(pg_catalog."bit", pg_catalog."bit") RETURNS pg_catalog."bit" LANGUAGE internal IMMUTABLE STRICT AS 'bitxor';
CREATE FUNCTION pg_catalog.bmbeginscan(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'bmbeginscan';
CREATE FUNCTION pg_catalog.bmbuild(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'bmbuild';
CREATE FUNCTION pg_catalog.bmbulkdelete(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'bmbulkdelete';
CREATE FUNCTION pg_catalog.bmcostestimate(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'bmcostestimate';
CREATE FUNCTION pg_catalog.bmendscan(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'bmendscan';
CREATE FUNCTION pg_catalog.bmgetmulti(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'bmgetmulti';
CREATE FUNCTION pg_catalog.bmgettuple(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'bmgettuple';
CREATE FUNCTION pg_catalog.bminsert(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'bminsert';
CREATE FUNCTION pg_catalog.bmmarkpos(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'bmmarkpos';
CREATE FUNCTION pg_catalog.bmoptions(pg_catalog._text, pg_catalog.bool) RETURNS pg_catalog.bytea LANGUAGE internal STABLE STRICT AS 'bmoptions';
CREATE FUNCTION pg_catalog.bmrescan(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'bmrescan';
CREATE FUNCTION pg_catalog.bmrestrpos(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'bmrestrpos';
CREATE FUNCTION pg_catalog.bmvacuumcleanup(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'bmvacuumcleanup';
CREATE FUNCTION pg_catalog.bool(pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int4_bool';
CREATE FUNCTION pg_catalog.booland_statefunc(pg_catalog.bool, pg_catalog.bool) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'booland_statefunc';
CREATE FUNCTION pg_catalog.booleq(pg_catalog.bool, pg_catalog.bool) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'booleq';
CREATE FUNCTION pg_catalog.boolge(pg_catalog.bool, pg_catalog.bool) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'boolge';
CREATE FUNCTION pg_catalog.boolgt(pg_catalog.bool, pg_catalog.bool) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'boolgt';
CREATE FUNCTION pg_catalog.boolin(pg_catalog.cstring) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'boolin';
CREATE FUNCTION pg_catalog.boolle(pg_catalog.bool, pg_catalog.bool) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'boolle';
CREATE FUNCTION pg_catalog.boollt(pg_catalog.bool, pg_catalog.bool) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'boollt';
CREATE FUNCTION pg_catalog.boolne(pg_catalog.bool, pg_catalog.bool) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'boolne';
CREATE FUNCTION pg_catalog.boolor_statefunc(pg_catalog.bool, pg_catalog.bool) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'boolor_statefunc';
CREATE FUNCTION pg_catalog.boolout(pg_catalog.bool) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'boolout';
CREATE FUNCTION pg_catalog.boolrecv(pg_catalog.internal) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'boolrecv';
CREATE FUNCTION pg_catalog.boolsend(pg_catalog.bool) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'boolsend';
CREATE FUNCTION pg_catalog.box(pg_catalog.circle) RETURNS pg_catalog.box LANGUAGE internal IMMUTABLE STRICT AS 'circle_box';
CREATE FUNCTION pg_catalog.box(pg_catalog.point, pg_catalog.point) RETURNS pg_catalog.box LANGUAGE internal IMMUTABLE STRICT AS 'points_box';
CREATE FUNCTION pg_catalog.box(pg_catalog.polygon) RETURNS pg_catalog.box LANGUAGE internal IMMUTABLE STRICT AS 'poly_box';
CREATE FUNCTION pg_catalog.box_above(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'box_above';
CREATE FUNCTION pg_catalog.box_above_eq(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'box_above_eq';
CREATE FUNCTION pg_catalog.box_add(pg_catalog.box, pg_catalog.point) RETURNS pg_catalog.box LANGUAGE internal IMMUTABLE STRICT AS 'box_add';
CREATE FUNCTION pg_catalog.box_below(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'box_below';
CREATE FUNCTION pg_catalog.box_below_eq(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'box_below_eq';
CREATE FUNCTION pg_catalog.box_center(pg_catalog.box) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'box_center';
CREATE FUNCTION pg_catalog.box_contain(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'box_contain';
CREATE FUNCTION pg_catalog.box_contained(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'box_contained';
CREATE FUNCTION pg_catalog.box_distance(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'box_distance';
CREATE FUNCTION pg_catalog.box_div(pg_catalog.box, pg_catalog.point) RETURNS pg_catalog.box LANGUAGE internal IMMUTABLE STRICT AS 'box_div';
CREATE FUNCTION pg_catalog.box_eq(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'box_eq';
CREATE FUNCTION pg_catalog.box_ge(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'box_ge';
CREATE FUNCTION pg_catalog.box_gt(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'box_gt';
CREATE FUNCTION pg_catalog.box_in(pg_catalog.cstring) RETURNS pg_catalog.box LANGUAGE internal IMMUTABLE STRICT AS 'box_in';
CREATE FUNCTION pg_catalog.box_intersect(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.box LANGUAGE internal IMMUTABLE STRICT AS 'box_intersect';
CREATE FUNCTION pg_catalog.box_le(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'box_le';
CREATE FUNCTION pg_catalog.box_left(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'box_left';
CREATE FUNCTION pg_catalog.box_lt(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'box_lt';
CREATE FUNCTION pg_catalog.box_mul(pg_catalog.box, pg_catalog.point) RETURNS pg_catalog.box LANGUAGE internal IMMUTABLE STRICT AS 'box_mul';
CREATE FUNCTION pg_catalog.box_out(pg_catalog.box) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'box_out';
CREATE FUNCTION pg_catalog.box_overabove(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'box_overabove';
CREATE FUNCTION pg_catalog.box_overbelow(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'box_overbelow';
CREATE FUNCTION pg_catalog.box_overlap(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'box_overlap';
CREATE FUNCTION pg_catalog.box_overleft(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'box_overleft';
CREATE FUNCTION pg_catalog.box_overright(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'box_overright';
CREATE FUNCTION pg_catalog.box_recv(pg_catalog.internal) RETURNS pg_catalog.box LANGUAGE internal IMMUTABLE STRICT AS 'box_recv';
CREATE FUNCTION pg_catalog.box_right(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'box_right';
CREATE FUNCTION pg_catalog.box_same(pg_catalog.box, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'box_same';
CREATE FUNCTION pg_catalog.box_send(pg_catalog.box) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'box_send';
CREATE FUNCTION pg_catalog.box_sub(pg_catalog.box, pg_catalog.point) RETURNS pg_catalog.box LANGUAGE internal IMMUTABLE STRICT AS 'box_sub';
CREATE FUNCTION pg_catalog.bpchar(pg_catalog."char") RETURNS pg_catalog.bpchar LANGUAGE internal IMMUTABLE STRICT AS 'char_bpchar';
CREATE FUNCTION pg_catalog.bpchar(pg_catalog.bpchar, pg_catalog.int4, pg_catalog.bool) RETURNS pg_catalog.bpchar LANGUAGE internal IMMUTABLE STRICT AS 'bpchar';
CREATE FUNCTION pg_catalog.bpchar(pg_catalog.name) RETURNS pg_catalog.bpchar LANGUAGE internal IMMUTABLE STRICT AS 'name_bpchar';
CREATE FUNCTION pg_catalog.bpchar_larger(pg_catalog.bpchar, pg_catalog.bpchar) RETURNS pg_catalog.bpchar LANGUAGE internal IMMUTABLE STRICT AS 'bpchar_larger';
CREATE FUNCTION pg_catalog.bpchar_pattern_eq(pg_catalog.bpchar, pg_catalog.bpchar) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'texteq';
CREATE FUNCTION pg_catalog.bpchar_pattern_ge(pg_catalog.bpchar, pg_catalog.bpchar) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'text_pattern_ge';
CREATE FUNCTION pg_catalog.bpchar_pattern_gt(pg_catalog.bpchar, pg_catalog.bpchar) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'text_pattern_gt';
CREATE FUNCTION pg_catalog.bpchar_pattern_le(pg_catalog.bpchar, pg_catalog.bpchar) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'text_pattern_le';
CREATE FUNCTION pg_catalog.bpchar_pattern_lt(pg_catalog.bpchar, pg_catalog.bpchar) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'text_pattern_lt';
CREATE FUNCTION pg_catalog.bpchar_pattern_ne(pg_catalog.bpchar, pg_catalog.bpchar) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'textne';
CREATE FUNCTION pg_catalog.bpchar_smaller(pg_catalog.bpchar, pg_catalog.bpchar) RETURNS pg_catalog.bpchar LANGUAGE internal IMMUTABLE STRICT AS 'bpchar_smaller';
CREATE FUNCTION pg_catalog.bpcharcmp(pg_catalog.bpchar, pg_catalog.bpchar) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'bpcharcmp';
CREATE FUNCTION pg_catalog.bpchareq(pg_catalog.bpchar, pg_catalog.bpchar) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'bpchareq';
CREATE FUNCTION pg_catalog.bpcharge(pg_catalog.bpchar, pg_catalog.bpchar) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'bpcharge';
CREATE FUNCTION pg_catalog.bpchargt(pg_catalog.bpchar, pg_catalog.bpchar) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'bpchargt';
CREATE FUNCTION pg_catalog.bpchariclike(pg_catalog.bpchar, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'texticlike';
CREATE FUNCTION pg_catalog.bpcharicnlike(pg_catalog.bpchar, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'texticnlike';
CREATE FUNCTION pg_catalog.bpcharicregexeq(pg_catalog.bpchar, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'texticregexeq';
CREATE FUNCTION pg_catalog.bpcharicregexne(pg_catalog.bpchar, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'texticregexne';
CREATE FUNCTION pg_catalog.bpcharin(pg_catalog.cstring, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog.bpchar LANGUAGE internal IMMUTABLE STRICT AS 'bpcharin';
CREATE FUNCTION pg_catalog.bpcharle(pg_catalog.bpchar, pg_catalog.bpchar) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'bpcharle';
CREATE FUNCTION pg_catalog.bpcharlike(pg_catalog.bpchar, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'textlike';
CREATE FUNCTION pg_catalog.bpcharlt(pg_catalog.bpchar, pg_catalog.bpchar) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'bpcharlt';
CREATE FUNCTION pg_catalog.bpcharne(pg_catalog.bpchar, pg_catalog.bpchar) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'bpcharne';
CREATE FUNCTION pg_catalog.bpcharnlike(pg_catalog.bpchar, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'textnlike';
CREATE FUNCTION pg_catalog.bpcharout(pg_catalog.bpchar) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'bpcharout';
CREATE FUNCTION pg_catalog.bpcharrecv(pg_catalog.internal, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog.bpchar LANGUAGE internal STABLE STRICT AS 'bpcharrecv';
CREATE FUNCTION pg_catalog.bpcharregexeq(pg_catalog.bpchar, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'textregexeq';
CREATE FUNCTION pg_catalog.bpcharregexne(pg_catalog.bpchar, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'textregexne';
CREATE FUNCTION pg_catalog.bpcharsend(pg_catalog.bpchar) RETURNS pg_catalog.bytea LANGUAGE internal STABLE STRICT AS 'bpcharsend';
CREATE FUNCTION pg_catalog.broadcast(pg_catalog.inet) RETURNS pg_catalog.inet LANGUAGE internal IMMUTABLE STRICT AS 'network_broadcast';
CREATE FUNCTION pg_catalog.btabstimecmp(pg_catalog.abstime, pg_catalog.abstime) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btabstimecmp';
CREATE FUNCTION pg_catalog.btarraycmp(pg_catalog.anyarray, pg_catalog.anyarray) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btarraycmp';
CREATE FUNCTION pg_catalog.btbeginscan(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'btbeginscan';
CREATE FUNCTION pg_catalog.btboolcmp(pg_catalog.bool, pg_catalog.bool) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btboolcmp';
CREATE FUNCTION pg_catalog.btbpchar_pattern_cmp(pg_catalog.bpchar, pg_catalog.bpchar) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'bttext_pattern_cmp';
CREATE FUNCTION pg_catalog.btbuild(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'btbuild';
CREATE FUNCTION pg_catalog.btbulkdelete(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'btbulkdelete';
CREATE FUNCTION pg_catalog.btcharcmp(pg_catalog."char", pg_catalog."char") RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btcharcmp';
CREATE FUNCTION pg_catalog.btcostestimate(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'btcostestimate';
CREATE FUNCTION pg_catalog.btendscan(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'btendscan';
CREATE FUNCTION pg_catalog.btfloat48cmp(pg_catalog.float4, pg_catalog.float8) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btfloat48cmp';
CREATE FUNCTION pg_catalog.btfloat4cmp(pg_catalog.float4, pg_catalog.float4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btfloat4cmp';
CREATE FUNCTION pg_catalog.btfloat84cmp(pg_catalog.float8, pg_catalog.float4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btfloat84cmp';
CREATE FUNCTION pg_catalog.btfloat8cmp(pg_catalog.float8, pg_catalog.float8) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btfloat8cmp';
CREATE FUNCTION pg_catalog.btgetmulti(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'btgetmulti';
CREATE FUNCTION pg_catalog.btgettuple(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'btgettuple';
CREATE FUNCTION pg_catalog.btgpxlogloccmp(pg_catalog.gpxlogloc, pg_catalog.gpxlogloc) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btgpxlogloccmp';
CREATE FUNCTION pg_catalog.btinsert(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'btinsert';
CREATE FUNCTION pg_catalog.btint24cmp(pg_catalog.int2, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btint24cmp';
CREATE FUNCTION pg_catalog.btint28cmp(pg_catalog.int2, pg_catalog.int8) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btint28cmp';
CREATE FUNCTION pg_catalog.btint2cmp(pg_catalog.int2, pg_catalog.int2) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btint2cmp';
CREATE FUNCTION pg_catalog.btint42cmp(pg_catalog.int4, pg_catalog.int2) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btint42cmp';
CREATE FUNCTION pg_catalog.btint48cmp(pg_catalog.int4, pg_catalog.int8) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btint48cmp';
CREATE FUNCTION pg_catalog.btint4cmp(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btint4cmp';
CREATE FUNCTION pg_catalog.btint82cmp(pg_catalog.int8, pg_catalog.int2) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btint82cmp';
CREATE FUNCTION pg_catalog.btint84cmp(pg_catalog.int8, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btint84cmp';
CREATE FUNCTION pg_catalog.btint8cmp(pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btint8cmp';
CREATE FUNCTION pg_catalog.btmarkpos(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'btmarkpos';
CREATE FUNCTION pg_catalog.btname_pattern_cmp(pg_catalog.name, pg_catalog.name) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btname_pattern_cmp';
CREATE FUNCTION pg_catalog.btnamecmp(pg_catalog.name, pg_catalog.name) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btnamecmp';
CREATE FUNCTION pg_catalog.btoidcmp(pg_catalog.oid, pg_catalog.oid) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btoidcmp';
CREATE FUNCTION pg_catalog.btoidvectorcmp(pg_catalog.oidvector, pg_catalog.oidvector) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btoidvectorcmp';
CREATE FUNCTION pg_catalog.btoptions(pg_catalog._text, pg_catalog.bool) RETURNS pg_catalog.bytea LANGUAGE internal STABLE STRICT AS 'btoptions';
CREATE FUNCTION pg_catalog.btreltimecmp(pg_catalog.reltime, pg_catalog.reltime) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'btreltimecmp';
CREATE FUNCTION pg_catalog.btrescan(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'btrescan';
CREATE FUNCTION pg_catalog.btrestrpos(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'btrestrpos';
CREATE FUNCTION pg_catalog.btrim(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'byteatrim';
CREATE FUNCTION pg_catalog.btrim(pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'btrim1';
CREATE FUNCTION pg_catalog.btrim(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'btrim';
CREATE FUNCTION pg_catalog.bttext_pattern_cmp(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'bttext_pattern_cmp';
CREATE FUNCTION pg_catalog.bttextcmp(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'bttextcmp';
CREATE FUNCTION pg_catalog.bttidcmp(pg_catalog.tid, pg_catalog.tid) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'bttidcmp';
CREATE FUNCTION pg_catalog.bttintervalcmp(pg_catalog.tinterval, pg_catalog.tinterval) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'bttintervalcmp';
CREATE FUNCTION pg_catalog.btvacuumcleanup(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'btvacuumcleanup';
CREATE FUNCTION pg_catalog.byteacat(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'byteacat';
CREATE FUNCTION pg_catalog.byteacmp(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'byteacmp';
CREATE FUNCTION pg_catalog.byteaeq(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'byteaeq';
CREATE FUNCTION pg_catalog.byteage(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'byteage';
CREATE FUNCTION pg_catalog.byteagt(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'byteagt';
CREATE FUNCTION pg_catalog.byteain(pg_catalog.cstring) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'byteain';
CREATE FUNCTION pg_catalog.byteale(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'byteale';
CREATE FUNCTION pg_catalog.bytealike(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'bytealike';
CREATE FUNCTION pg_catalog.bytealt(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'bytealt';
CREATE FUNCTION pg_catalog.byteane(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'byteane';
CREATE FUNCTION pg_catalog.byteanlike(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'byteanlike';
CREATE FUNCTION pg_catalog.byteaout(pg_catalog.bytea) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'byteaout';
CREATE FUNCTION pg_catalog.bytearecv(pg_catalog.internal) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'bytearecv';
CREATE FUNCTION pg_catalog.byteasend(pg_catalog.bytea) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'byteasend';
CREATE FUNCTION pg_catalog.cash_cmp(pg_catalog.money, pg_catalog.money) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'cash_cmp';
CREATE FUNCTION pg_catalog.cash_div_flt4(pg_catalog.money, pg_catalog.float4) RETURNS pg_catalog.money LANGUAGE internal IMMUTABLE STRICT AS 'cash_div_flt4';
CREATE FUNCTION pg_catalog.cash_div_flt8(pg_catalog.money, pg_catalog.float8) RETURNS pg_catalog.money LANGUAGE internal IMMUTABLE STRICT AS 'cash_div_flt8';
CREATE FUNCTION pg_catalog.cash_div_int2(pg_catalog.money, pg_catalog.int2) RETURNS pg_catalog.money LANGUAGE internal IMMUTABLE STRICT AS 'cash_div_int2';
CREATE FUNCTION pg_catalog.cash_div_int4(pg_catalog.money, pg_catalog.int4) RETURNS pg_catalog.money LANGUAGE internal IMMUTABLE STRICT AS 'cash_div_int4';
CREATE FUNCTION pg_catalog.cash_eq(pg_catalog.money, pg_catalog.money) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'cash_eq';
CREATE FUNCTION pg_catalog.cash_ge(pg_catalog.money, pg_catalog.money) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'cash_ge';
CREATE FUNCTION pg_catalog.cash_gt(pg_catalog.money, pg_catalog.money) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'cash_gt';
CREATE FUNCTION pg_catalog.cash_in(pg_catalog.cstring) RETURNS pg_catalog.money LANGUAGE internal IMMUTABLE STRICT AS 'cash_in';
CREATE FUNCTION pg_catalog.cash_le(pg_catalog.money, pg_catalog.money) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'cash_le';
CREATE FUNCTION pg_catalog.cash_lt(pg_catalog.money, pg_catalog.money) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'cash_lt';
CREATE FUNCTION pg_catalog.cash_mi(pg_catalog.money, pg_catalog.money) RETURNS pg_catalog.money LANGUAGE internal IMMUTABLE STRICT AS 'cash_mi';
CREATE FUNCTION pg_catalog.cash_mul_flt4(pg_catalog.money, pg_catalog.float4) RETURNS pg_catalog.money LANGUAGE internal IMMUTABLE STRICT AS 'cash_mul_flt4';
CREATE FUNCTION pg_catalog.cash_mul_flt8(pg_catalog.money, pg_catalog.float8) RETURNS pg_catalog.money LANGUAGE internal IMMUTABLE STRICT AS 'cash_mul_flt8';
CREATE FUNCTION pg_catalog.cash_mul_int2(pg_catalog.money, pg_catalog.int2) RETURNS pg_catalog.money LANGUAGE internal IMMUTABLE STRICT AS 'cash_mul_int2';
CREATE FUNCTION pg_catalog.cash_mul_int4(pg_catalog.money, pg_catalog.int4) RETURNS pg_catalog.money LANGUAGE internal IMMUTABLE STRICT AS 'cash_mul_int4';
CREATE FUNCTION pg_catalog.cash_ne(pg_catalog.money, pg_catalog.money) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'cash_ne';
CREATE FUNCTION pg_catalog.cash_out(pg_catalog.money) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'cash_out';
CREATE FUNCTION pg_catalog.cash_pl(pg_catalog.money, pg_catalog.money) RETURNS pg_catalog.money LANGUAGE internal IMMUTABLE STRICT AS 'cash_pl';
CREATE FUNCTION pg_catalog.cash_recv(pg_catalog.internal) RETURNS pg_catalog.money LANGUAGE internal IMMUTABLE STRICT AS 'cash_recv';
CREATE FUNCTION pg_catalog.cash_send(pg_catalog.money) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'cash_send';
CREATE FUNCTION pg_catalog.cash_words(pg_catalog.money) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'cash_words';
CREATE FUNCTION pg_catalog.cashlarger(pg_catalog.money, pg_catalog.money) RETURNS pg_catalog.money LANGUAGE internal IMMUTABLE STRICT AS 'cashlarger';
CREATE FUNCTION pg_catalog.cashsmaller(pg_catalog.money, pg_catalog.money) RETURNS pg_catalog.money LANGUAGE internal IMMUTABLE STRICT AS 'cashsmaller';
CREATE FUNCTION pg_catalog.cbrt(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dcbrt';
CREATE FUNCTION pg_catalog.ceil(pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_ceil';
CREATE FUNCTION pg_catalog.ceil(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dceil';
CREATE FUNCTION pg_catalog.ceiling(pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_ceil';
CREATE FUNCTION pg_catalog.ceiling(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dceil';
CREATE FUNCTION pg_catalog.center(pg_catalog.box) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'box_center';
CREATE FUNCTION pg_catalog.center(pg_catalog.circle) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'circle_center';
CREATE FUNCTION pg_catalog.char_length(pg_catalog.bpchar) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'bpcharlen';
CREATE FUNCTION pg_catalog.char_length(pg_catalog.text) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'textlen';
CREATE FUNCTION pg_catalog.character_length(pg_catalog.bpchar) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'bpcharlen';
CREATE FUNCTION pg_catalog.character_length(pg_catalog.text) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'textlen';
CREATE FUNCTION pg_catalog.chareq(pg_catalog."char", pg_catalog."char") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'chareq';
CREATE FUNCTION pg_catalog.charge(pg_catalog."char", pg_catalog."char") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'charge';
CREATE FUNCTION pg_catalog.chargt(pg_catalog."char", pg_catalog."char") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'chargt';
CREATE FUNCTION pg_catalog.charin(pg_catalog.cstring) RETURNS pg_catalog."char" LANGUAGE internal IMMUTABLE STRICT AS 'charin';
CREATE FUNCTION pg_catalog.charle(pg_catalog."char", pg_catalog."char") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'charle';
CREATE FUNCTION pg_catalog.charlt(pg_catalog."char", pg_catalog."char") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'charlt';
CREATE FUNCTION pg_catalog.charne(pg_catalog."char", pg_catalog."char") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'charne';
CREATE FUNCTION pg_catalog.charout(pg_catalog."char") RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'charout';
CREATE FUNCTION pg_catalog.charrecv(pg_catalog.internal) RETURNS pg_catalog."char" LANGUAGE internal IMMUTABLE STRICT AS 'charrecv';
CREATE FUNCTION pg_catalog.charsend(pg_catalog."char") RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'charsend';
CREATE FUNCTION pg_catalog.chr(pg_catalog.int4) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'chr';
CREATE FUNCTION pg_catalog.cideq(pg_catalog.cid, pg_catalog.cid) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'cideq';
CREATE FUNCTION pg_catalog.cidin(pg_catalog.cstring) RETURNS pg_catalog.cid LANGUAGE internal IMMUTABLE STRICT AS 'cidin';
CREATE FUNCTION pg_catalog.cidout(pg_catalog.cid) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'cidout';
CREATE FUNCTION pg_catalog.cidr(pg_catalog.inet) RETURNS pg_catalog.cidr LANGUAGE internal IMMUTABLE STRICT AS 'inet_to_cidr';
CREATE FUNCTION pg_catalog.cidr(pg_catalog.text) RETURNS pg_catalog.cidr LANGUAGE internal IMMUTABLE STRICT AS 'text_cidr';
CREATE FUNCTION pg_catalog.cidr_in(pg_catalog.cstring) RETURNS pg_catalog.cidr LANGUAGE internal IMMUTABLE STRICT AS 'cidr_in';
CREATE FUNCTION pg_catalog.cidr_out(pg_catalog.cidr) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'cidr_out';
CREATE FUNCTION pg_catalog.cidr_recv(pg_catalog.internal) RETURNS pg_catalog.cidr LANGUAGE internal IMMUTABLE STRICT AS 'cidr_recv';
CREATE FUNCTION pg_catalog.cidr_send(pg_catalog.cidr) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'cidr_send';
CREATE FUNCTION pg_catalog.cidrecv(pg_catalog.internal) RETURNS pg_catalog.cid LANGUAGE internal IMMUTABLE STRICT AS 'cidrecv';
CREATE FUNCTION pg_catalog.cidsend(pg_catalog.cid) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'cidsend';
CREATE FUNCTION pg_catalog.circle(pg_catalog.box) RETURNS pg_catalog.circle LANGUAGE internal IMMUTABLE STRICT AS 'box_circle';
CREATE FUNCTION pg_catalog.circle(pg_catalog.point, pg_catalog.float8) RETURNS pg_catalog.circle LANGUAGE internal IMMUTABLE STRICT AS 'cr_circle';
CREATE FUNCTION pg_catalog.circle(pg_catalog.polygon) RETURNS pg_catalog.circle LANGUAGE internal IMMUTABLE STRICT AS 'poly_circle';
CREATE FUNCTION pg_catalog.circle_above(pg_catalog.circle, pg_catalog.circle) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'circle_above';
CREATE FUNCTION pg_catalog.circle_add_pt(pg_catalog.circle, pg_catalog.point) RETURNS pg_catalog.circle LANGUAGE internal IMMUTABLE STRICT AS 'circle_add_pt';
CREATE FUNCTION pg_catalog.circle_below(pg_catalog.circle, pg_catalog.circle) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'circle_below';
CREATE FUNCTION pg_catalog.circle_center(pg_catalog.circle) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'circle_center';
CREATE FUNCTION pg_catalog.circle_contain(pg_catalog.circle, pg_catalog.circle) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'circle_contain';
CREATE FUNCTION pg_catalog.circle_contain_pt(pg_catalog.circle, pg_catalog.point) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'circle_contain_pt';
CREATE FUNCTION pg_catalog.circle_contained(pg_catalog.circle, pg_catalog.circle) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'circle_contained';
CREATE FUNCTION pg_catalog.circle_distance(pg_catalog.circle, pg_catalog.circle) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'circle_distance';
CREATE FUNCTION pg_catalog.circle_div_pt(pg_catalog.circle, pg_catalog.point) RETURNS pg_catalog.circle LANGUAGE internal IMMUTABLE STRICT AS 'circle_div_pt';
CREATE FUNCTION pg_catalog.circle_eq(pg_catalog.circle, pg_catalog.circle) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'circle_eq';
CREATE FUNCTION pg_catalog.circle_ge(pg_catalog.circle, pg_catalog.circle) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'circle_ge';
CREATE FUNCTION pg_catalog.circle_gt(pg_catalog.circle, pg_catalog.circle) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'circle_gt';
CREATE FUNCTION pg_catalog.circle_in(pg_catalog.cstring) RETURNS pg_catalog.circle LANGUAGE internal IMMUTABLE STRICT AS 'circle_in';
CREATE FUNCTION pg_catalog.circle_le(pg_catalog.circle, pg_catalog.circle) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'circle_le';
CREATE FUNCTION pg_catalog.circle_left(pg_catalog.circle, pg_catalog.circle) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'circle_left';
CREATE FUNCTION pg_catalog.circle_lt(pg_catalog.circle, pg_catalog.circle) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'circle_lt';
CREATE FUNCTION pg_catalog.circle_mul_pt(pg_catalog.circle, pg_catalog.point) RETURNS pg_catalog.circle LANGUAGE internal IMMUTABLE STRICT AS 'circle_mul_pt';
CREATE FUNCTION pg_catalog.circle_ne(pg_catalog.circle, pg_catalog.circle) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'circle_ne';
CREATE FUNCTION pg_catalog.circle_out(pg_catalog.circle) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'circle_out';
CREATE FUNCTION pg_catalog.circle_overabove(pg_catalog.circle, pg_catalog.circle) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'circle_overabove';
CREATE FUNCTION pg_catalog.circle_overbelow(pg_catalog.circle, pg_catalog.circle) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'circle_overbelow';
CREATE FUNCTION pg_catalog.circle_overlap(pg_catalog.circle, pg_catalog.circle) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'circle_overlap';
CREATE FUNCTION pg_catalog.circle_overleft(pg_catalog.circle, pg_catalog.circle) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'circle_overleft';
CREATE FUNCTION pg_catalog.circle_overright(pg_catalog.circle, pg_catalog.circle) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'circle_overright';
CREATE FUNCTION pg_catalog.circle_recv(pg_catalog.internal) RETURNS pg_catalog.circle LANGUAGE internal IMMUTABLE STRICT AS 'circle_recv';
CREATE FUNCTION pg_catalog.circle_right(pg_catalog.circle, pg_catalog.circle) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'circle_right';
CREATE FUNCTION pg_catalog.circle_same(pg_catalog.circle, pg_catalog.circle) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'circle_same';
CREATE FUNCTION pg_catalog.circle_send(pg_catalog.circle) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'circle_send';
CREATE FUNCTION pg_catalog.circle_sub_pt(pg_catalog.circle, pg_catalog.point) RETURNS pg_catalog.circle LANGUAGE internal IMMUTABLE STRICT AS 'circle_sub_pt';
CREATE FUNCTION pg_catalog.clock_timestamp() RETURNS pg_catalog.timestamptz LANGUAGE internal VOLATILE STRICT AS 'clock_timestamp';
CREATE FUNCTION pg_catalog.close_lb(pg_catalog.line, pg_catalog.box) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'close_lb';
CREATE FUNCTION pg_catalog.close_ls(pg_catalog.line, pg_catalog.lseg) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'close_ls';
CREATE FUNCTION pg_catalog.close_lseg(pg_catalog.lseg, pg_catalog.lseg) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'close_lseg';
CREATE FUNCTION pg_catalog.close_pb(pg_catalog.point, pg_catalog.box) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'close_pb';
CREATE FUNCTION pg_catalog.close_pl(pg_catalog.point, pg_catalog.line) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'close_pl';
CREATE FUNCTION pg_catalog.close_ps(pg_catalog.point, pg_catalog.lseg) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'close_ps';
CREATE FUNCTION pg_catalog.close_sb(pg_catalog.lseg, pg_catalog.box) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'close_sb';
CREATE FUNCTION pg_catalog.close_sl(pg_catalog.lseg, pg_catalog.line) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'close_sl';
CREATE FUNCTION pg_catalog.col_description(pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog.text LANGUAGE sql STABLE STRICT AS 'select null::pg_catalog.text';
CREATE FUNCTION pg_catalog.contjoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'contjoinsel';
CREATE FUNCTION pg_catalog.contsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'contsel';
CREATE FUNCTION pg_catalog.convert_using(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_convert_using';
CREATE FUNCTION pg_catalog.cos(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dcos';
CREATE FUNCTION pg_catalog.cosh(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE AS 'dcosh';
CREATE FUNCTION pg_catalog.cot(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dcot';
CREATE FUNCTION pg_catalog.cstring_in(pg_catalog.cstring) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'cstring_in';
CREATE FUNCTION pg_catalog.cstring_out(pg_catalog.cstring) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'cstring_out';
CREATE FUNCTION pg_catalog.cstring_recv(pg_catalog.internal) RETURNS pg_catalog.cstring LANGUAGE internal STABLE STRICT AS 'cstring_recv';
CREATE FUNCTION pg_catalog.cstring_send(pg_catalog.cstring) RETURNS pg_catalog.bytea LANGUAGE internal STABLE STRICT AS 'cstring_send';
CREATE FUNCTION pg_catalog.cume_dist_final(pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'cume_dist_final';
CREATE FUNCTION pg_catalog.cume_dist_prelim(pg_catalog.internal) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'cume_dist_prelim';
CREATE FUNCTION pg_catalog.current_database() RETURNS pg_catalog.name LANGUAGE internal IMMUTABLE STRICT AS 'current_database';
CREATE FUNCTION pg_catalog.current_query() RETURNS pg_catalog.text LANGUAGE internal VOLATILE AS 'current_query';
CREATE FUNCTION pg_catalog.current_schemas(pg_catalog.bool) RETURNS pg_catalog._name LANGUAGE internal STABLE STRICT AS 'current_schemas';
CREATE FUNCTION pg_catalog.current_setting(pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'show_config_by_name';
CREATE FUNCTION pg_catalog.currtid(pg_catalog.oid, pg_catalog.tid) RETURNS pg_catalog.tid LANGUAGE internal VOLATILE STRICT AS 'currtid_byreloid';
CREATE FUNCTION pg_catalog.currtid2(pg_catalog.text, pg_catalog.tid) RETURNS pg_catalog.tid LANGUAGE internal VOLATILE STRICT AS 'currtid_byrelname';
CREATE FUNCTION pg_catalog.currval(pg_catalog.regclass) RETURNS pg_catalog.int8 LANGUAGE internal VOLATILE STRICT AS 'currval_oid';
CREATE FUNCTION pg_catalog.date(pg_catalog."timestamp") RETURNS pg_catalog.date LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_date';
CREATE FUNCTION pg_catalog.date(pg_catalog.abstime) RETURNS pg_catalog.date LANGUAGE internal STABLE STRICT AS 'abstime_date';
CREATE FUNCTION pg_catalog.date(pg_catalog.text) RETURNS pg_catalog.date LANGUAGE internal STABLE STRICT AS 'text_date';
CREATE FUNCTION pg_catalog.date(pg_catalog.timestamptz) RETURNS pg_catalog.date LANGUAGE internal STABLE STRICT AS 'timestamptz_date';
CREATE FUNCTION pg_catalog.date_cmp(pg_catalog.date, pg_catalog.date) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'date_cmp';
CREATE FUNCTION pg_catalog.date_cmp_timestamp(pg_catalog.date, pg_catalog."timestamp") RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'date_cmp_timestamp';
CREATE FUNCTION pg_catalog.date_cmp_timestamptz(pg_catalog.date, pg_catalog.timestamptz) RETURNS pg_catalog.int4 LANGUAGE internal STABLE STRICT AS 'date_cmp_timestamptz';
CREATE FUNCTION pg_catalog.date_eq(pg_catalog.date, pg_catalog.date) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'date_eq';
CREATE FUNCTION pg_catalog.date_eq_timestamp(pg_catalog.date, pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'date_eq_timestamp';
CREATE FUNCTION pg_catalog.date_eq_timestamptz(pg_catalog.date, pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'date_eq_timestamptz';
CREATE FUNCTION pg_catalog.date_ge(pg_catalog.date, pg_catalog.date) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'date_ge';
CREATE FUNCTION pg_catalog.date_ge_timestamp(pg_catalog.date, pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'date_ge_timestamp';
CREATE FUNCTION pg_catalog.date_ge_timestamptz(pg_catalog.date, pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'date_ge_timestamptz';
CREATE FUNCTION pg_catalog.date_gt(pg_catalog.date, pg_catalog.date) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'date_gt';
CREATE FUNCTION pg_catalog.date_gt_timestamp(pg_catalog.date, pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'date_gt_timestamp';
CREATE FUNCTION pg_catalog.date_gt_timestamptz(pg_catalog.date, pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'date_gt_timestamptz';
CREATE FUNCTION pg_catalog.date_in(pg_catalog.cstring) RETURNS pg_catalog.date LANGUAGE internal STABLE STRICT AS 'date_in';
CREATE FUNCTION pg_catalog.date_larger(pg_catalog.date, pg_catalog.date) RETURNS pg_catalog.date LANGUAGE internal IMMUTABLE STRICT AS 'date_larger';
CREATE FUNCTION pg_catalog.date_le(pg_catalog.date, pg_catalog.date) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'date_le';
CREATE FUNCTION pg_catalog.date_le_timestamp(pg_catalog.date, pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'date_le_timestamp';
CREATE FUNCTION pg_catalog.date_le_timestamptz(pg_catalog.date, pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'date_le_timestamptz';
CREATE FUNCTION pg_catalog.date_lt(pg_catalog.date, pg_catalog.date) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'date_lt';
CREATE FUNCTION pg_catalog.date_lt_timestamp(pg_catalog.date, pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'date_lt_timestamp';
CREATE FUNCTION pg_catalog.date_lt_timestamptz(pg_catalog.date, pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'date_lt_timestamptz';
CREATE FUNCTION pg_catalog.date_mi(pg_catalog.date, pg_catalog.date) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'date_mi';
CREATE FUNCTION pg_catalog.date_mi_interval(pg_catalog.date, pg_catalog."interval") RETURNS pg_catalog."timestamp" LANGUAGE internal IMMUTABLE STRICT AS 'date_mi_interval';
CREATE FUNCTION pg_catalog.date_mii(pg_catalog.date, pg_catalog.int4) RETURNS pg_catalog.date LANGUAGE internal IMMUTABLE STRICT AS 'date_mii';
CREATE FUNCTION pg_catalog.date_ne(pg_catalog.date, pg_catalog.date) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'date_ne';
CREATE FUNCTION pg_catalog.date_ne_timestamp(pg_catalog.date, pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'date_ne_timestamp';
CREATE FUNCTION pg_catalog.date_ne_timestamptz(pg_catalog.date, pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'date_ne_timestamptz';
CREATE FUNCTION pg_catalog.date_out(pg_catalog.date) RETURNS pg_catalog.cstring LANGUAGE internal STABLE STRICT AS 'date_out';
CREATE FUNCTION pg_catalog.date_part(pg_catalog.text, pg_catalog."interval") RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'interval_part';
CREATE FUNCTION pg_catalog.date_part(pg_catalog.text, pg_catalog."time") RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'time_part';
CREATE FUNCTION pg_catalog.date_part(pg_catalog.text, pg_catalog."timestamp") RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_part';
CREATE FUNCTION pg_catalog.date_part(pg_catalog.text, pg_catalog.abstime) RETURNS pg_catalog.float8 LANGUAGE sql STABLE STRICT AS 'select null::pg_catalog.float8';
CREATE FUNCTION pg_catalog.date_part(pg_catalog.text, pg_catalog.date) RETURNS pg_catalog.float8 LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog.float8';
CREATE FUNCTION pg_catalog.date_part(pg_catalog.text, pg_catalog.reltime) RETURNS pg_catalog.float8 LANGUAGE sql STABLE STRICT AS 'select null::pg_catalog.float8';
CREATE FUNCTION pg_catalog.date_part(pg_catalog.text, pg_catalog.timestamptz) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'timestamptz_part';
CREATE FUNCTION pg_catalog.date_part(pg_catalog.text, pg_catalog.timetz) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'timetz_part';
CREATE FUNCTION pg_catalog.date_pl_interval(pg_catalog.date, pg_catalog."interval") RETURNS pg_catalog."timestamp" LANGUAGE internal IMMUTABLE STRICT AS 'date_pl_interval';
CREATE FUNCTION pg_catalog.date_pli(pg_catalog.date, pg_catalog.int4) RETURNS pg_catalog.date LANGUAGE internal IMMUTABLE STRICT AS 'date_pli';
CREATE FUNCTION pg_catalog.date_recv(pg_catalog.internal) RETURNS pg_catalog.date LANGUAGE internal IMMUTABLE STRICT AS 'date_recv';
CREATE FUNCTION pg_catalog.date_send(pg_catalog.date) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'date_send';
CREATE FUNCTION pg_catalog.date_smaller(pg_catalog.date, pg_catalog.date) RETURNS pg_catalog.date LANGUAGE internal IMMUTABLE STRICT AS 'date_smaller';
CREATE FUNCTION pg_catalog.date_trunc(pg_catalog.text, pg_catalog."interval") RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'interval_trunc';
CREATE FUNCTION pg_catalog.date_trunc(pg_catalog.text, pg_catalog."timestamp") RETURNS pg_catalog."timestamp" LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_trunc';
CREATE FUNCTION pg_catalog.date_trunc(pg_catalog.text, pg_catalog.timestamptz) RETURNS pg_catalog.timestamptz LANGUAGE internal STABLE STRICT AS 'timestamptz_trunc';
CREATE FUNCTION pg_catalog.datetime_pl(pg_catalog.date, pg_catalog."time") RETURNS pg_catalog."timestamp" LANGUAGE internal IMMUTABLE STRICT AS 'datetime_timestamp';
CREATE FUNCTION pg_catalog.datetimetz_pl(pg_catalog.date, pg_catalog.timetz) RETURNS pg_catalog.timestamptz LANGUAGE internal IMMUTABLE STRICT AS 'datetimetz_timestamptz';
CREATE FUNCTION pg_catalog.dcbrt(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dcbrt';
CREATE FUNCTION pg_catalog.degrees(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'degrees';
CREATE FUNCTION pg_catalog.dense_rank_immed(pg_catalog.internal) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'dense_rank_immed';
CREATE FUNCTION pg_catalog.dexp(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dexp';
CREATE FUNCTION pg_catalog.diagonal(pg_catalog.box) RETURNS pg_catalog.lseg LANGUAGE internal IMMUTABLE STRICT AS 'box_diagonal';
CREATE FUNCTION pg_catalog.diameter(pg_catalog.circle) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'circle_diameter';
CREATE FUNCTION pg_catalog.dist_cpoly(pg_catalog.circle, pg_catalog.polygon) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dist_cpoly';
CREATE FUNCTION pg_catalog.dist_lb(pg_catalog.line, pg_catalog.box) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dist_lb';
CREATE FUNCTION pg_catalog.dist_pb(pg_catalog.point, pg_catalog.box) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dist_pb';
CREATE FUNCTION pg_catalog.dist_pc(pg_catalog.point, pg_catalog.circle) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dist_pc';
CREATE FUNCTION pg_catalog.dist_pl(pg_catalog.point, pg_catalog.line) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dist_pl';
CREATE FUNCTION pg_catalog.dist_ppath(pg_catalog.point, pg_catalog.path) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dist_ppath';
CREATE FUNCTION pg_catalog.dist_ps(pg_catalog.point, pg_catalog.lseg) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dist_ps';
CREATE FUNCTION pg_catalog.dist_sb(pg_catalog.lseg, pg_catalog.box) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dist_sb';
CREATE FUNCTION pg_catalog.dist_sl(pg_catalog.lseg, pg_catalog.line) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dist_sl';
CREATE FUNCTION pg_catalog.dlog1(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dlog1';
CREATE FUNCTION pg_catalog.dlog10(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dlog10';
CREATE FUNCTION pg_catalog.domain_in(pg_catalog.cstring, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog."any" LANGUAGE internal VOLATILE AS 'domain_in';
CREATE FUNCTION pg_catalog.domain_recv(pg_catalog.internal, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog."any" LANGUAGE internal VOLATILE AS 'domain_recv';
CREATE FUNCTION pg_catalog.dpow(pg_catalog.float8, pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dpow';
CREATE FUNCTION pg_catalog.dround(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dround';
CREATE FUNCTION pg_catalog.dsqrt(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dsqrt';
CREATE FUNCTION pg_catalog.dtrunc(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dtrunc';
CREATE FUNCTION pg_catalog.encode(pg_catalog.bytea, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'binary_encode';
CREATE FUNCTION pg_catalog.eqjoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'eqjoinsel';
CREATE FUNCTION pg_catalog.eqsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'eqsel';
CREATE FUNCTION pg_catalog.exp(pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_exp';
CREATE FUNCTION pg_catalog.exp(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dexp';
CREATE FUNCTION pg_catalog.factorial(pg_catalog.int8) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_fac';
CREATE FUNCTION pg_catalog.family(pg_catalog.inet) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'network_family';
CREATE FUNCTION pg_catalog.fixedwidth_in() RETURNS pg_catalog.record LANGUAGE c STABLE AS '$libdir/fixedwidth.so', 'fixedwidth_in';
CREATE FUNCTION pg_catalog.fixedwidth_out(pg_catalog.record) RETURNS pg_catalog.bytea LANGUAGE c STABLE AS '$libdir/fixedwidth.so', 'fixedwidth_out';
CREATE FUNCTION pg_catalog.flatfile_update_trigger() RETURNS pg_catalog.trigger LANGUAGE internal VOLATILE STRICT AS 'flatfile_update_trigger';
CREATE FUNCTION pg_catalog.float4(pg_catalog."numeric") RETURNS pg_catalog.float4 LANGUAGE internal IMMUTABLE STRICT AS 'numeric_float4';
CREATE FUNCTION pg_catalog.float4(pg_catalog.float8) RETURNS pg_catalog.float4 LANGUAGE internal IMMUTABLE STRICT AS 'dtof';
CREATE FUNCTION pg_catalog.float4(pg_catalog.int2) RETURNS pg_catalog.float4 LANGUAGE internal IMMUTABLE STRICT AS 'i2tof';
CREATE FUNCTION pg_catalog.float4(pg_catalog.int4) RETURNS pg_catalog.float4 LANGUAGE internal IMMUTABLE STRICT AS 'i4tof';
CREATE FUNCTION pg_catalog.float4(pg_catalog.int8) RETURNS pg_catalog.float4 LANGUAGE internal IMMUTABLE STRICT AS 'i8tof';
CREATE FUNCTION pg_catalog.float4(pg_catalog.text) RETURNS pg_catalog.float4 LANGUAGE internal IMMUTABLE STRICT AS 'text_float4';
CREATE FUNCTION pg_catalog.float48div(pg_catalog.float4, pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float48div';
CREATE FUNCTION pg_catalog.float48eq(pg_catalog.float4, pg_catalog.float8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float48eq';
CREATE FUNCTION pg_catalog.float48ge(pg_catalog.float4, pg_catalog.float8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float48ge';
CREATE FUNCTION pg_catalog.float48gt(pg_catalog.float4, pg_catalog.float8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float48gt';
CREATE FUNCTION pg_catalog.float48le(pg_catalog.float4, pg_catalog.float8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float48le';
CREATE FUNCTION pg_catalog.float48lt(pg_catalog.float4, pg_catalog.float8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float48lt';
CREATE FUNCTION pg_catalog.float48mi(pg_catalog.float4, pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float48mi';
CREATE FUNCTION pg_catalog.float48mul(pg_catalog.float4, pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float48mul';
CREATE FUNCTION pg_catalog.float48ne(pg_catalog.float4, pg_catalog.float8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float48ne';
CREATE FUNCTION pg_catalog.float48pl(pg_catalog.float4, pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float48pl';
CREATE FUNCTION pg_catalog.float4_accum(pg_catalog._float8, pg_catalog.float4) RETURNS pg_catalog._float8 LANGUAGE internal IMMUTABLE STRICT AS 'float4_accum';
CREATE FUNCTION pg_catalog.float4_avg_accum(pg_catalog.bytea, pg_catalog.float4) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'float4_avg_accum';
CREATE FUNCTION pg_catalog.float4_avg_decum(pg_catalog.bytea, pg_catalog.float4) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'float4_avg_decum';
CREATE FUNCTION pg_catalog.float4_decum(pg_catalog._float8, pg_catalog.float4) RETURNS pg_catalog._float8 LANGUAGE internal IMMUTABLE STRICT AS 'float4_decum';
CREATE FUNCTION pg_catalog.float4abs(pg_catalog.float4) RETURNS pg_catalog.float4 LANGUAGE internal IMMUTABLE STRICT AS 'float4abs';
CREATE FUNCTION pg_catalog.float4div(pg_catalog.float4, pg_catalog.float4) RETURNS pg_catalog.float4 LANGUAGE internal IMMUTABLE STRICT AS 'float4div';
CREATE FUNCTION pg_catalog.float4eq(pg_catalog.float4, pg_catalog.float4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float4eq';
CREATE FUNCTION pg_catalog.float4ge(pg_catalog.float4, pg_catalog.float4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float4ge';
CREATE FUNCTION pg_catalog.float4gt(pg_catalog.float4, pg_catalog.float4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float4gt';
CREATE FUNCTION pg_catalog.float4in(pg_catalog.cstring) RETURNS pg_catalog.float4 LANGUAGE internal IMMUTABLE STRICT AS 'float4in';
CREATE FUNCTION pg_catalog.float4larger(pg_catalog.float4, pg_catalog.float4) RETURNS pg_catalog.float4 LANGUAGE internal IMMUTABLE STRICT AS 'float4larger';
CREATE FUNCTION pg_catalog.float4le(pg_catalog.float4, pg_catalog.float4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float4le';
CREATE FUNCTION pg_catalog.float4lt(pg_catalog.float4, pg_catalog.float4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float4lt';
CREATE FUNCTION pg_catalog.float4mi(pg_catalog.float4, pg_catalog.float4) RETURNS pg_catalog.float4 LANGUAGE internal IMMUTABLE STRICT AS 'float4mi';
CREATE FUNCTION pg_catalog.float4mul(pg_catalog.float4, pg_catalog.float4) RETURNS pg_catalog.float4 LANGUAGE internal IMMUTABLE STRICT AS 'float4mul';
CREATE FUNCTION pg_catalog.float4ne(pg_catalog.float4, pg_catalog.float4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float4ne';
CREATE FUNCTION pg_catalog.float4out(pg_catalog.float4) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'float4out';
CREATE FUNCTION pg_catalog.float4pl(pg_catalog.float4, pg_catalog.float4) RETURNS pg_catalog.float4 LANGUAGE internal IMMUTABLE STRICT AS 'float4pl';
CREATE FUNCTION pg_catalog.float4recv(pg_catalog.internal) RETURNS pg_catalog.float4 LANGUAGE internal IMMUTABLE STRICT AS 'float4recv';
CREATE FUNCTION pg_catalog.float4send(pg_catalog.float4) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'float4send';
CREATE FUNCTION pg_catalog.float4smaller(pg_catalog.float4, pg_catalog.float4) RETURNS pg_catalog.float4 LANGUAGE internal IMMUTABLE STRICT AS 'float4smaller';
CREATE FUNCTION pg_catalog.float4um(pg_catalog.float4) RETURNS pg_catalog.float4 LANGUAGE internal IMMUTABLE STRICT AS 'float4um';
CREATE FUNCTION pg_catalog.float4up(pg_catalog.float4) RETURNS pg_catalog.float4 LANGUAGE internal IMMUTABLE STRICT AS 'float4up';
CREATE FUNCTION pg_catalog.float8(pg_catalog."numeric") RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'numeric_float8';
CREATE FUNCTION pg_catalog.float8(pg_catalog.float4) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'ftod';
CREATE FUNCTION pg_catalog.float8(pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'i2tod';
CREATE FUNCTION pg_catalog.float8(pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'i4tod';
CREATE FUNCTION pg_catalog.float8(pg_catalog.int8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'i8tod';
CREATE FUNCTION pg_catalog.float8(pg_catalog.text) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'text_float8';
CREATE FUNCTION pg_catalog.float84div(pg_catalog.float8, pg_catalog.float4) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float84div';
CREATE FUNCTION pg_catalog.float84eq(pg_catalog.float8, pg_catalog.float4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float84eq';
CREATE FUNCTION pg_catalog.float84ge(pg_catalog.float8, pg_catalog.float4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float84ge';
CREATE FUNCTION pg_catalog.float84gt(pg_catalog.float8, pg_catalog.float4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float84gt';
CREATE FUNCTION pg_catalog.float84le(pg_catalog.float8, pg_catalog.float4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float84le';
CREATE FUNCTION pg_catalog.float84lt(pg_catalog.float8, pg_catalog.float4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float84lt';
CREATE FUNCTION pg_catalog.float84mi(pg_catalog.float8, pg_catalog.float4) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float84mi';
CREATE FUNCTION pg_catalog.float84mul(pg_catalog.float8, pg_catalog.float4) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float84mul';
CREATE FUNCTION pg_catalog.float84ne(pg_catalog.float8, pg_catalog.float4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float84ne';
CREATE FUNCTION pg_catalog.float84pl(pg_catalog.float8, pg_catalog.float4) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float84pl';
CREATE FUNCTION pg_catalog.float8_accum(pg_catalog._float8, pg_catalog.float8) RETURNS pg_catalog._float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_accum';
CREATE FUNCTION pg_catalog.float8_amalg(pg_catalog._float8, pg_catalog._float8) RETURNS pg_catalog._float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_amalg';
CREATE FUNCTION pg_catalog.float8_avg(pg_catalog.bytea) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_avg';
CREATE FUNCTION pg_catalog.float8_avg_accum(pg_catalog.bytea, pg_catalog.float8) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'float8_avg_accum';
CREATE FUNCTION pg_catalog.float8_avg_amalg(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'float8_avg_amalg';
CREATE FUNCTION pg_catalog.float8_avg_decum(pg_catalog.bytea, pg_catalog.float8) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'float8_avg_decum';
CREATE FUNCTION pg_catalog.float8_avg_demalg(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'float8_avg_demalg';
CREATE FUNCTION pg_catalog.float8_corr(pg_catalog._float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_corr';
CREATE FUNCTION pg_catalog.float8_covar_pop(pg_catalog._float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_covar_pop';
CREATE FUNCTION pg_catalog.float8_covar_samp(pg_catalog._float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_covar_samp';
CREATE FUNCTION pg_catalog.float8_decum(pg_catalog._float8, pg_catalog.float8) RETURNS pg_catalog._float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_decum';
CREATE FUNCTION pg_catalog.float8_demalg(pg_catalog._float8, pg_catalog._float8) RETURNS pg_catalog._float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_demalg';
CREATE FUNCTION pg_catalog.float8_matrix_accum(pg_catalog._float8, pg_catalog._float8) RETURNS pg_catalog._float8 LANGUAGE internal IMMUTABLE STRICT AS 'matrix_add';
CREATE FUNCTION pg_catalog.float8_mregr_accum(pg_catalog._float8, pg_catalog.float8, pg_catalog._float8) RETURNS pg_catalog._float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_mregr_accum';
CREATE FUNCTION pg_catalog.float8_mregr_coef(pg_catalog._float8) RETURNS pg_catalog._float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_mregr_coef';
CREATE FUNCTION pg_catalog.float8_mregr_combine(pg_catalog._float8, pg_catalog._float8) RETURNS pg_catalog._float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_mregr_combine';
CREATE FUNCTION pg_catalog.float8_mregr_pvalues(pg_catalog._float8) RETURNS pg_catalog._float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_mregr_pvalues';
CREATE FUNCTION pg_catalog.float8_mregr_r2(pg_catalog._float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_mregr_r2';
CREATE FUNCTION pg_catalog.float8_mregr_tstats(pg_catalog._float8) RETURNS pg_catalog._float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_mregr_tstats';
CREATE FUNCTION pg_catalog.float8_pivot_accum(pg_catalog._float8, pg_catalog._text, pg_catalog.text, pg_catalog.float8) RETURNS pg_catalog._float8 LANGUAGE internal IMMUTABLE AS 'float8_pivot_accum';
CREATE FUNCTION pg_catalog.float8_regr_accum(pg_catalog._float8, pg_catalog.float8, pg_catalog.float8) RETURNS pg_catalog._float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_regr_accum';
CREATE FUNCTION pg_catalog.float8_regr_amalg(pg_catalog._float8, pg_catalog._float8) RETURNS pg_catalog._float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_regr_amalg';
CREATE FUNCTION pg_catalog.float8_regr_avgx(pg_catalog._float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_regr_avgx';
CREATE FUNCTION pg_catalog.float8_regr_avgy(pg_catalog._float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_regr_avgy';
CREATE FUNCTION pg_catalog.float8_regr_intercept(pg_catalog._float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_regr_intercept';
CREATE FUNCTION pg_catalog.float8_regr_r2(pg_catalog._float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_regr_r2';
CREATE FUNCTION pg_catalog.float8_regr_slope(pg_catalog._float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_regr_slope';
CREATE FUNCTION pg_catalog.float8_regr_sxx(pg_catalog._float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_regr_sxx';
CREATE FUNCTION pg_catalog.float8_regr_sxy(pg_catalog._float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_regr_sxy';
CREATE FUNCTION pg_catalog.float8_regr_syy(pg_catalog._float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_regr_syy';
CREATE FUNCTION pg_catalog.float8_stddev_pop(pg_catalog._float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_stddev_pop';
CREATE FUNCTION pg_catalog.float8_stddev_samp(pg_catalog._float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_stddev_samp';
CREATE FUNCTION pg_catalog.float8_var_pop(pg_catalog._float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_var_pop';
CREATE FUNCTION pg_catalog.float8_var_samp(pg_catalog._float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_var_samp';
CREATE FUNCTION pg_catalog.float8abs(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8abs';
CREATE FUNCTION pg_catalog.float8div(pg_catalog.float8, pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8div';
CREATE FUNCTION pg_catalog.float8eq(pg_catalog.float8, pg_catalog.float8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float8eq';
CREATE FUNCTION pg_catalog.float8ge(pg_catalog.float8, pg_catalog.float8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float8ge';
CREATE FUNCTION pg_catalog.float8gt(pg_catalog.float8, pg_catalog.float8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float8gt';
CREATE FUNCTION pg_catalog.float8in(pg_catalog.cstring) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8in';
CREATE FUNCTION pg_catalog.float8larger(pg_catalog.float8, pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8larger';
CREATE FUNCTION pg_catalog.float8le(pg_catalog.float8, pg_catalog.float8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float8le';
CREATE FUNCTION pg_catalog.float8lt(pg_catalog.float8, pg_catalog.float8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float8lt';
CREATE FUNCTION pg_catalog.float8mi(pg_catalog.float8, pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8mi';
CREATE FUNCTION pg_catalog.float8mul(pg_catalog.float8, pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8mul';
CREATE FUNCTION pg_catalog.float8ne(pg_catalog.float8, pg_catalog.float8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'float8ne';
CREATE FUNCTION pg_catalog.float8out(pg_catalog.float8) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'float8out';
CREATE FUNCTION pg_catalog.float8pl(pg_catalog.float8, pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8pl';
CREATE FUNCTION pg_catalog.float8recv(pg_catalog.internal) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8recv';
CREATE FUNCTION pg_catalog.float8send(pg_catalog.float8) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'float8send';
CREATE FUNCTION pg_catalog.float8smaller(pg_catalog.float8, pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8smaller';
CREATE FUNCTION pg_catalog.float8um(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8um';
CREATE FUNCTION pg_catalog.float8up(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8up';
CREATE FUNCTION pg_catalog.floor(pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_floor';
CREATE FUNCTION pg_catalog.floor(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dfloor';
CREATE FUNCTION pg_catalog.flt4_mul_cash(pg_catalog.float4, pg_catalog.money) RETURNS pg_catalog.money LANGUAGE internal IMMUTABLE STRICT AS 'flt4_mul_cash';
CREATE FUNCTION pg_catalog.flt8_mul_cash(pg_catalog.float8, pg_catalog.money) RETURNS pg_catalog.money LANGUAGE internal IMMUTABLE STRICT AS 'flt8_mul_cash';
CREATE FUNCTION pg_catalog.fmgr_c_validator(pg_catalog.oid) RETURNS pg_catalog.void LANGUAGE internal STABLE STRICT AS 'fmgr_c_validator';
CREATE FUNCTION pg_catalog.fmgr_internal_validator(pg_catalog.oid) RETURNS pg_catalog.void LANGUAGE internal STABLE STRICT AS 'fmgr_internal_validator';
CREATE FUNCTION pg_catalog.fmgr_sql_validator(pg_catalog.oid) RETURNS pg_catalog.void LANGUAGE internal STABLE STRICT AS 'fmgr_sql_validator';
CREATE FUNCTION pg_catalog.format_type(pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog.text LANGUAGE internal STABLE AS 'format_type';
CREATE FUNCTION pg_catalog.generate_series(pg_catalog.int4, pg_catalog.int4) RETURNS SETOF pg_catalog.int4 LANGUAGE internal VOLATILE STRICT AS 'generate_series_int4';
CREATE FUNCTION pg_catalog.generate_series(pg_catalog.int4, pg_catalog.int4, pg_catalog.int4) RETURNS SETOF pg_catalog.int4 LANGUAGE internal VOLATILE STRICT AS 'generate_series_step_int4';
CREATE FUNCTION pg_catalog.generate_series(pg_catalog.int8, pg_catalog.int8) RETURNS SETOF pg_catalog.int8 LANGUAGE internal VOLATILE STRICT AS 'generate_series_int8';
CREATE FUNCTION pg_catalog.generate_series(pg_catalog.int8, pg_catalog.int8, pg_catalog.int8) RETURNS SETOF pg_catalog.int8 LANGUAGE internal VOLATILE STRICT AS 'generate_series_step_int8';
CREATE FUNCTION pg_catalog.get_ao_compression_ratio(pg_catalog.oid) RETURNS pg_catalog.float8 LANGUAGE internal VOLATILE AS 'get_ao_compression_ratio_oid';
CREATE FUNCTION pg_catalog.get_ao_compression_ratio(pg_catalog.text) RETURNS pg_catalog.float8 LANGUAGE internal VOLATILE AS 'get_ao_compression_ratio_name';
CREATE FUNCTION pg_catalog.get_ao_distribution(IN relname pg_catalog.text, OUT segmentid pg_catalog.int4, OUT tupcount pg_catalog.float8) RETURNS SETOF pg_catalog.record LANGUAGE internal VOLATILE AS 'get_ao_distribution_name';
CREATE FUNCTION pg_catalog.get_ao_distribution(IN reloid pg_catalog.oid, OUT segmentid pg_catalog.int4, OUT tupcount pg_catalog.float8) RETURNS SETOF pg_catalog.record LANGUAGE internal VOLATILE AS 'get_ao_distribution_oid';
CREATE FUNCTION pg_catalog.get_bit(pg_catalog.bytea, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'byteaGetBit';
CREATE FUNCTION pg_catalog.get_byte(pg_catalog.bytea, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'byteaGetByte';
CREATE FUNCTION pg_catalog.getdatabaseencoding() RETURNS pg_catalog.name LANGUAGE internal STABLE STRICT AS 'getdatabaseencoding';
CREATE FUNCTION pg_catalog.getpgusername() RETURNS pg_catalog.name LANGUAGE internal STABLE STRICT AS 'current_user';
CREATE FUNCTION pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'ginarrayconsistent';
CREATE FUNCTION pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal IMMUTABLE STRICT AS 'ginarrayextract';
CREATE FUNCTION pg_catalog.ginbeginscan(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'ginbeginscan';
CREATE FUNCTION pg_catalog.ginbuild(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'ginbuild';
CREATE FUNCTION pg_catalog.ginbulkdelete(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'ginbulkdelete';
CREATE FUNCTION pg_catalog.gincostestimate(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'gincostestimate';
CREATE FUNCTION pg_catalog.ginendscan(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'ginendscan';
CREATE FUNCTION pg_catalog.gingetmulti(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'gingetmulti';
CREATE FUNCTION pg_catalog.gingettuple(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'gingettuple';
CREATE FUNCTION pg_catalog.gininsert(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'gininsert';
CREATE FUNCTION pg_catalog.ginmarkpos(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'ginmarkpos';
CREATE FUNCTION pg_catalog.ginoptions(pg_catalog._text, pg_catalog.bool) RETURNS pg_catalog.bytea LANGUAGE internal STABLE STRICT AS 'ginoptions';
CREATE FUNCTION pg_catalog.ginrescan(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'ginrescan';
CREATE FUNCTION pg_catalog.ginrestrpos(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'ginrestrpos';
CREATE FUNCTION pg_catalog.ginvacuumcleanup(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'ginvacuumcleanup';
CREATE FUNCTION pg_catalog.gist_box_compress(pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal IMMUTABLE STRICT AS 'gist_box_compress';
CREATE FUNCTION pg_catalog.gist_box_consistent(pg_catalog.internal, pg_catalog.box, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'gist_box_consistent';
CREATE FUNCTION pg_catalog.gist_box_decompress(pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal IMMUTABLE STRICT AS 'gist_box_decompress';
CREATE FUNCTION pg_catalog.gist_box_penalty(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal IMMUTABLE STRICT AS 'gist_box_penalty';
CREATE FUNCTION pg_catalog.gist_box_picksplit(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal IMMUTABLE STRICT AS 'gist_box_picksplit';
CREATE FUNCTION pg_catalog.gist_box_same(pg_catalog.box, pg_catalog.box, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal IMMUTABLE STRICT AS 'gist_box_same';
CREATE FUNCTION pg_catalog.gist_box_union(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.box LANGUAGE internal IMMUTABLE STRICT AS 'gist_box_union';
CREATE FUNCTION pg_catalog.gist_circle_compress(pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal IMMUTABLE STRICT AS 'gist_circle_compress';
CREATE FUNCTION pg_catalog.gist_circle_consistent(pg_catalog.internal, pg_catalog.circle, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'gist_circle_consistent';
CREATE FUNCTION pg_catalog.gist_poly_compress(pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal IMMUTABLE STRICT AS 'gist_poly_compress';
CREATE FUNCTION pg_catalog.gist_poly_consistent(pg_catalog.internal, pg_catalog.polygon, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'gist_poly_consistent';
CREATE FUNCTION pg_catalog.gistbeginscan(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'gistbeginscan';
CREATE FUNCTION pg_catalog.gistbuild(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'gistbuild';
CREATE FUNCTION pg_catalog.gistbulkdelete(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'gistbulkdelete';
CREATE FUNCTION pg_catalog.gistcostestimate(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'gistcostestimate';
CREATE FUNCTION pg_catalog.gistendscan(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'gistendscan';
CREATE FUNCTION pg_catalog.gistgetmulti(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'gistgetmulti';
CREATE FUNCTION pg_catalog.gistgettuple(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'gistgettuple';
CREATE FUNCTION pg_catalog.gistinsert(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'gistinsert';
CREATE FUNCTION pg_catalog.gistmarkpos(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'gistmarkpos';
CREATE FUNCTION pg_catalog.gistoptions(pg_catalog._text, pg_catalog.bool) RETURNS pg_catalog.bytea LANGUAGE internal STABLE STRICT AS 'gistoptions';
CREATE FUNCTION pg_catalog.gistrescan(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'gistrescan';
CREATE FUNCTION pg_catalog.gistrestrpos(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'gistrestrpos';
CREATE FUNCTION pg_catalog.gistvacuumcleanup(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'gistvacuumcleanup';
CREATE FUNCTION pg_catalog.gp_activate_standby() RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_activate_standby';
CREATE FUNCTION pg_catalog.gp_add_global_sequence_entry(pg_catalog.tid, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_add_global_sequence_entry';
CREATE FUNCTION pg_catalog.gp_add_master_standby(pg_catalog.text, pg_catalog.text, pg_catalog._text) RETURNS pg_catalog.int2 LANGUAGE internal VOLATILE AS 'gp_add_master_standby';
CREATE FUNCTION pg_catalog.gp_add_persistent_database_node_entry(pg_catalog.tid, pg_catalog.oid, pg_catalog.oid, pg_catalog.int2, pg_catalog.int8, pg_catalog.int2, pg_catalog.int4, pg_catalog.int4, pg_catalog.int8, pg_catalog.tid) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_add_persistent_database_node_entry';
CREATE FUNCTION pg_catalog.gp_add_persistent_filespace_node_entry(pg_catalog.tid, pg_catalog.oid, pg_catalog.int2, pg_catalog.text, pg_catalog.int2, pg_catalog.text, pg_catalog.int2, pg_catalog.int8, pg_catalog.int2, pg_catalog.int4, pg_catalog.int4, pg_catalog.int8, pg_catalog.tid) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_add_persistent_filespace_node_entry';
CREATE FUNCTION pg_catalog.gp_add_persistent_relation_node_entry(pg_catalog.tid, pg_catalog.oid, pg_catalog.oid, pg_catalog.oid, pg_catalog.int4, pg_catalog.int2, pg_catalog.int2, pg_catalog.int8, pg_catalog.int2, pg_catalog.int2, pg_catalog.bool, pg_catalog.int8, pg_catalog.gpxlogloc, pg_catalog.int4, pg_catalog.int8, pg_catalog.int8, pg_catalog.int4, pg_catalog.int4, pg_catalog.int8, pg_catalog.tid) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_add_persistent_relation_node_entry';
CREATE FUNCTION pg_catalog.gp_add_persistent_tablespace_node_entry(pg_catalog.tid, pg_catalog.oid, pg_catalog.oid, pg_catalog.int2, pg_catalog.int8, pg_catalog.int2, pg_catalog.int4, pg_catalog.int4, pg_catalog.int8, pg_catalog.tid) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_add_persistent_tablespace_node_entry';
CREATE FUNCTION pg_catalog.gp_add_relation_node_entry(pg_catalog.tid, pg_catalog.oid, pg_catalog.int4, pg_catalog.int8, pg_catalog.tid, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_add_relation_node_entry';
CREATE FUNCTION pg_catalog.gp_add_segment(pg_catalog.text, pg_catalog.text, pg_catalog.int4, pg_catalog._text) RETURNS pg_catalog.int2 LANGUAGE internal VOLATILE AS 'gp_add_segment';
CREATE FUNCTION pg_catalog.gp_add_segment_mirror(pg_catalog.int2, pg_catalog.text, pg_catalog.text, pg_catalog.int4, pg_catalog.int4, pg_catalog._text) RETURNS pg_catalog.int2 LANGUAGE internal VOLATILE AS 'gp_add_segment_mirror';
CREATE FUNCTION pg_catalog.gp_add_segment_persistent_entries(pg_catalog.int2, pg_catalog.int2, pg_catalog._text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE AS 'gp_add_segment_persistent_entries';
CREATE FUNCTION pg_catalog.gp_adjust_priority(pg_catalog.int4, pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal VOLATILE STRICT AS 'gp_adjust_priority_int';
CREATE FUNCTION pg_catalog.gp_adjust_priority(pg_catalog.int4, pg_catalog.int4, pg_catalog.text) RETURNS pg_catalog.int4 LANGUAGE internal VOLATILE STRICT AS 'gp_adjust_priority_value';
CREATE FUNCTION pg_catalog.gp_backup_launch(pg_catalog.text, pg_catalog.text, pg_catalog.text, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal VOLATILE AS 'gp_backup_launch__';
CREATE FUNCTION pg_catalog.gp_changetracking_log(IN filetype pg_catalog.int4, OUT segment_id pg_catalog.int2, OUT dbid pg_catalog.int2, OUT space pg_catalog.oid, OUT db pg_catalog.oid, OUT rel pg_catalog.oid, OUT xlogloc pg_catalog.gpxlogloc, OUT blocknum pg_catalog.int4, OUT persistent_tid pg_catalog.tid, OUT persistent_sn pg_catalog.int8) RETURNS SETOF pg_catalog.record LANGUAGE internal VOLATILE AS 'gp_changetracking_log';
CREATE FUNCTION pg_catalog.gp_delete_global_sequence_entry(pg_catalog.tid) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_delete_global_sequence_entry';
CREATE FUNCTION pg_catalog.gp_delete_persistent_database_node_entry(pg_catalog.tid) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_delete_persistent_database_node_entry';
CREATE FUNCTION pg_catalog.gp_delete_persistent_filespace_node_entry(pg_catalog.tid) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_delete_persistent_filespace_node_entry';
CREATE FUNCTION pg_catalog.gp_delete_persistent_relation_node_entry(pg_catalog.tid) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_delete_persistent_relation_node_entry';
CREATE FUNCTION pg_catalog.gp_delete_persistent_tablespace_node_entry(pg_catalog.tid) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_delete_persistent_tablespace_node_entry';
CREATE FUNCTION pg_catalog.gp_delete_relation_node_entry(pg_catalog.tid) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_delete_relation_node_entry';
CREATE FUNCTION pg_catalog.gp_deprecated() RETURNS pg_catalog.void LANGUAGE internal IMMUTABLE AS 'gp_deprecated';
CREATE FUNCTION pg_catalog.gp_distributed_log() RETURNS SETOF pg_catalog.record LANGUAGE internal VOLATILE AS 'gp_distributed_log';
CREATE FUNCTION pg_catalog.gp_distributed_xacts() RETURNS SETOF pg_catalog.record LANGUAGE internal VOLATILE AS 'gp_distributed_xacts__';
CREATE FUNCTION pg_catalog.gp_distributed_xid() RETURNS pg_catalog.xid LANGUAGE internal VOLATILE STRICT AS 'gp_distributed_xid';
CREATE FUNCTION pg_catalog.gp_dummy_compression_compress(pg_catalog.internal, pg_catalog.int4, pg_catalog.internal, pg_catalog.int4, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE AS 'dummy_compression_compress';
CREATE FUNCTION pg_catalog.gp_dummy_compression_constructor(pg_catalog.internal, pg_catalog.internal, pg_catalog.bool) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE AS 'dummy_compression_constructor';
CREATE FUNCTION pg_catalog.gp_dummy_compression_decompress(pg_catalog.internal, pg_catalog.int4, pg_catalog.internal, pg_catalog.int4, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE AS 'dummy_compression_decompress';
CREATE FUNCTION pg_catalog.gp_dummy_compression_destructor(pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE AS 'dummy_compression_destructor';
CREATE FUNCTION pg_catalog.gp_dummy_compression_validator(pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE AS 'dummy_compression_validator';
CREATE FUNCTION pg_catalog.gp_elog(pg_catalog.text) RETURNS pg_catalog.void LANGUAGE internal IMMUTABLE STRICT AS 'gp_elog';
CREATE FUNCTION pg_catalog.gp_elog(pg_catalog.text, pg_catalog.bool) RETURNS pg_catalog.void LANGUAGE internal IMMUTABLE STRICT AS 'gp_elog';
CREATE FUNCTION pg_catalog.gp_execution_dbid() RETURNS pg_catalog.int4 LANGUAGE internal VOLATILE AS 'gp_execution_dbid';
CREATE FUNCTION pg_catalog.gp_execution_segment() RETURNS SETOF pg_catalog.int4 LANGUAGE internal VOLATILE AS 'mpp_execution_segment';
CREATE FUNCTION pg_catalog.gp_fault_inject(pg_catalog.int4, pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal VOLATILE STRICT AS 'gp_fault_inject';
CREATE FUNCTION pg_catalog.gp_list_backend_priorities() RETURNS SETOF pg_catalog.record LANGUAGE internal VOLATILE AS 'gp_list_backend_priorities';
CREATE FUNCTION pg_catalog.gp_max_distributed_xid() RETURNS pg_catalog.xid LANGUAGE internal VOLATILE STRICT AS 'gp_max_distributed_xid';
CREATE FUNCTION pg_catalog.gp_persistent_build_all(pg_catalog.bool) RETURNS pg_catalog.int4 LANGUAGE internal VOLATILE AS 'gp_persistent_build_all';
CREATE FUNCTION pg_catalog.gp_persistent_build_db(pg_catalog.bool) RETURNS pg_catalog.int4 LANGUAGE internal VOLATILE AS 'gp_persistent_build_db';
CREATE FUNCTION pg_catalog.gp_persistent_relation_node_check() RETURNS SETOF pg_catalog.gp_persistent_relation_node LANGUAGE internal VOLATILE AS 'gp_persistent_relation_node_check';
CREATE FUNCTION pg_catalog.gp_persistent_repair_delete(pg_catalog.int4, pg_catalog.tid) RETURNS pg_catalog.int4 LANGUAGE internal VOLATILE AS 'gp_persistent_repair_delete';
CREATE FUNCTION pg_catalog.gp_persistent_reset_all() RETURNS pg_catalog.int4 LANGUAGE internal VOLATILE AS 'gp_persistent_reset_all';
CREATE FUNCTION pg_catalog.gp_persistent_set_relation_bufpool_kind_all() RETURNS pg_catalog.int4 LANGUAGE internal VOLATILE AS 'gp_persistent_set_relation_bufpool_kind_all';
CREATE FUNCTION pg_catalog.gp_pgdatabase() RETURNS SETOF pg_catalog.record LANGUAGE internal VOLATILE AS 'gp_pgdatabase__';
CREATE FUNCTION pg_catalog.gp_prep_new_segment(pg_catalog._text) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_prep_new_segment';
CREATE FUNCTION pg_catalog.gp_quicklz_compress(pg_catalog.internal, pg_catalog.int4, pg_catalog.internal, pg_catalog.int4, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal IMMUTABLE AS 'quicklz_compress';
CREATE FUNCTION pg_catalog.gp_quicklz_constructor(pg_catalog.internal, pg_catalog.internal, pg_catalog.bool) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE AS 'quicklz_constructor';
CREATE FUNCTION pg_catalog.gp_quicklz_decompress(pg_catalog.internal, pg_catalog.int4, pg_catalog.internal, pg_catalog.int4, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal IMMUTABLE AS 'quicklz_decompress';
CREATE FUNCTION pg_catalog.gp_quicklz_destructor(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE AS 'quicklz_destructor';
CREATE FUNCTION pg_catalog.gp_quicklz_validator(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal IMMUTABLE AS 'quicklz_validator';
CREATE FUNCTION pg_catalog.gp_read_backup_file(pg_catalog.text, pg_catalog.text, pg_catalog.regproc) RETURNS pg_catalog.text LANGUAGE internal VOLATILE AS 'gp_read_backup_file__';
CREATE FUNCTION pg_catalog.gp_remove_master_standby() RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_remove_master_standby';
CREATE FUNCTION pg_catalog.gp_remove_segment(pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_remove_segment';
CREATE FUNCTION pg_catalog.gp_remove_segment_mirror(pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_remove_segment_mirror';
CREATE FUNCTION pg_catalog.gp_remove_segment_persistent_entries(pg_catalog.int2, pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE AS 'gp_remove_segment_persistent_entries';
CREATE FUNCTION pg_catalog.gp_restore_launch(pg_catalog.text, pg_catalog.text, pg_catalog.text, pg_catalog.text, pg_catalog.text, pg_catalog.text, pg_catalog.int4, pg_catalog.bool) RETURNS pg_catalog.text LANGUAGE internal VOLATILE AS 'gp_restore_launch__';
CREATE FUNCTION pg_catalog.gp_rle_type_compress(pg_catalog.internal, pg_catalog.int4, pg_catalog.internal, pg_catalog.int4, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal IMMUTABLE AS 'rle_type_compress';
CREATE FUNCTION pg_catalog.gp_rle_type_constructor(pg_catalog.internal, pg_catalog.internal, pg_catalog.bool) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE AS 'rle_type_constructor';
CREATE FUNCTION pg_catalog.gp_rle_type_decompress(pg_catalog.internal, pg_catalog.int4, pg_catalog.internal, pg_catalog.int4, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal IMMUTABLE AS 'rle_type_decompress';
CREATE FUNCTION pg_catalog.gp_rle_type_destructor(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE AS 'rle_type_destructor';
CREATE FUNCTION pg_catalog.gp_rle_type_validator(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal IMMUTABLE AS 'rle_type_validator';
CREATE FUNCTION pg_catalog.gp_statistics_estimate_reltuples_relpages_oid(pg_catalog.oid) RETURNS pg_catalog._float4 LANGUAGE internal VOLATILE STRICT AS 'gp_statistics_estimate_reltuples_relpages_oid';
CREATE FUNCTION pg_catalog.gp_transaction_log() RETURNS SETOF pg_catalog.record LANGUAGE internal VOLATILE AS 'gp_transaction_log';
CREATE FUNCTION pg_catalog.gp_update_ao_master_stats(pg_catalog.oid) RETURNS pg_catalog.float8 LANGUAGE internal VOLATILE AS 'gp_update_ao_master_stats_oid';
CREATE FUNCTION pg_catalog.gp_update_ao_master_stats(pg_catalog.text) RETURNS pg_catalog.float8 LANGUAGE internal VOLATILE AS 'gp_update_ao_master_stats_name';
CREATE FUNCTION pg_catalog.gp_update_global_sequence_entry(pg_catalog.tid, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_update_global_sequence_entry';
CREATE FUNCTION pg_catalog.gp_update_persistent_database_node_entry(pg_catalog.tid, pg_catalog.oid, pg_catalog.oid, pg_catalog.int2, pg_catalog.int8, pg_catalog.int2, pg_catalog.int4, pg_catalog.int4, pg_catalog.int8, pg_catalog.tid) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_update_persistent_database_node_entry';
CREATE FUNCTION pg_catalog.gp_update_persistent_filespace_node_entry(pg_catalog.tid, pg_catalog.oid, pg_catalog.int2, pg_catalog.text, pg_catalog.int2, pg_catalog.text, pg_catalog.int2, pg_catalog.int8, pg_catalog.int2, pg_catalog.int4, pg_catalog.int4, pg_catalog.int8, pg_catalog.tid) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_update_persistent_filespace_node_entry';
CREATE FUNCTION pg_catalog.gp_update_persistent_relation_node_entry(pg_catalog.tid, pg_catalog.oid, pg_catalog.oid, pg_catalog.oid, pg_catalog.int4, pg_catalog.int2, pg_catalog.int2, pg_catalog.int8, pg_catalog.int2, pg_catalog.int2, pg_catalog.bool, pg_catalog.int8, pg_catalog.gpxlogloc, pg_catalog.int4, pg_catalog.int8, pg_catalog.int8, pg_catalog.int4, pg_catalog.int4, pg_catalog.int8, pg_catalog.tid) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_update_persistent_relation_node_entry';
CREATE FUNCTION pg_catalog.gp_update_persistent_tablespace_node_entry(pg_catalog.tid, pg_catalog.oid, pg_catalog.oid, pg_catalog.int2, pg_catalog.int8, pg_catalog.int2, pg_catalog.int4, pg_catalog.int4, pg_catalog.int8, pg_catalog.tid) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_update_persistent_tablespace_node_entry';
CREATE FUNCTION pg_catalog.gp_update_relation_node_entry(pg_catalog.tid, pg_catalog.oid, pg_catalog.int4, pg_catalog.int8, pg_catalog.tid, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'gp_update_relation_node_entry';
CREATE FUNCTION pg_catalog.gp_write_backup_file(pg_catalog.text, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal VOLATILE AS 'gp_write_backup_file__';
CREATE FUNCTION pg_catalog.gp_zlib_compress(pg_catalog.internal, pg_catalog.int4, pg_catalog.internal, pg_catalog.int4, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal IMMUTABLE AS 'zlib_compress';
CREATE FUNCTION pg_catalog.gp_zlib_constructor(pg_catalog.internal, pg_catalog.internal, pg_catalog.bool) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE AS 'zlib_constructor';
CREATE FUNCTION pg_catalog.gp_zlib_decompress(pg_catalog.internal, pg_catalog.int4, pg_catalog.internal, pg_catalog.int4, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal IMMUTABLE AS 'zlib_decompress';
CREATE FUNCTION pg_catalog.gp_zlib_destructor(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE AS 'zlib_destructor';
CREATE FUNCTION pg_catalog.gp_zlib_validator(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal IMMUTABLE AS 'zlib_validator';
CREATE FUNCTION pg_catalog.gpaotidin(pg_catalog.cstring) RETURNS pg_catalog.gpaotid LANGUAGE internal IMMUTABLE STRICT AS 'gpaotidin';
CREATE FUNCTION pg_catalog.gpaotidout(pg_catalog.gpaotid) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'gpaotidout';
CREATE FUNCTION pg_catalog.gpaotidrecv(pg_catalog.internal) RETURNS pg_catalog.gpaotid LANGUAGE internal IMMUTABLE STRICT AS 'gpaotidrecv';
CREATE FUNCTION pg_catalog.gpaotidsend(pg_catalog.gpaotid) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'gpaotidsend';
CREATE FUNCTION pg_catalog.gpdb_fdw_validator(pg_catalog._text, pg_catalog.oid) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'gpdb_fdw_validator';
CREATE FUNCTION pg_catalog.gphdfs_export(pg_catalog.record) RETURNS pg_catalog.bytea LANGUAGE c STABLE AS '$libdir/gphdfs.so', 'gphdfsformatter_export';
CREATE FUNCTION pg_catalog.gphdfs_import() RETURNS pg_catalog.record LANGUAGE c STABLE AS '$libdir/gphdfs.so', 'gphdfsformatter_import';
CREATE FUNCTION pg_catalog.gphdfs_read() RETURNS pg_catalog.int4 LANGUAGE c STABLE AS '$libdir/gphdfs.so', 'gphdfsprotocol_import';
CREATE FUNCTION pg_catalog.gphdfs_validate() RETURNS pg_catalog.void LANGUAGE c STABLE AS '$libdir/gphdfs.so', 'gphdfsprotocol_validate_urls';
CREATE FUNCTION pg_catalog.gphdfs_write() RETURNS pg_catalog.int4 LANGUAGE c STABLE AS '$libdir/gphdfs.so', 'gphdfsprotocol_export';
CREATE FUNCTION pg_catalog.gpxlogloceq(pg_catalog.gpxlogloc, pg_catalog.gpxlogloc) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'gpxlogloceq';
CREATE FUNCTION pg_catalog.gpxloglocge(pg_catalog.gpxlogloc, pg_catalog.gpxlogloc) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'gpxloglocge';
CREATE FUNCTION pg_catalog.gpxloglocgt(pg_catalog.gpxlogloc, pg_catalog.gpxlogloc) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'gpxloglocgt';
CREATE FUNCTION pg_catalog.gpxloglocin(pg_catalog.cstring) RETURNS pg_catalog.gpxlogloc LANGUAGE internal IMMUTABLE STRICT AS 'gpxloglocin';
CREATE FUNCTION pg_catalog.gpxlogloclarger(pg_catalog.gpxlogloc, pg_catalog.gpxlogloc) RETURNS pg_catalog.gpxlogloc LANGUAGE internal IMMUTABLE STRICT AS 'gpxlogloclarger';
CREATE FUNCTION pg_catalog.gpxloglocle(pg_catalog.gpxlogloc, pg_catalog.gpxlogloc) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'gpxloglocle';
CREATE FUNCTION pg_catalog.gpxlogloclt(pg_catalog.gpxlogloc, pg_catalog.gpxlogloc) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'gpxlogloclt';
CREATE FUNCTION pg_catalog.gpxloglocne(pg_catalog.gpxlogloc, pg_catalog.gpxlogloc) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'gpxloglocne';
CREATE FUNCTION pg_catalog.gpxloglocout(pg_catalog.gpxlogloc) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'gpxloglocout';
CREATE FUNCTION pg_catalog.gpxloglocrecv(pg_catalog.internal) RETURNS pg_catalog.gpxlogloc LANGUAGE internal IMMUTABLE STRICT AS 'gpxloglocrecv';
CREATE FUNCTION pg_catalog.gpxloglocsend(pg_catalog.gpxlogloc) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'gpxloglocsend';
CREATE FUNCTION pg_catalog.gpxloglocsmaller(pg_catalog.gpxlogloc, pg_catalog.gpxlogloc) RETURNS pg_catalog.gpxlogloc LANGUAGE internal IMMUTABLE STRICT AS 'gpxloglocsmaller';
CREATE FUNCTION pg_catalog.has_database_privilege(pg_catalog.name, pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_database_privilege_name_id';
CREATE FUNCTION pg_catalog.has_database_privilege(pg_catalog.name, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_database_privilege_name_name';
CREATE FUNCTION pg_catalog.has_database_privilege(pg_catalog.oid, pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_database_privilege_id_id';
CREATE FUNCTION pg_catalog.has_database_privilege(pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_database_privilege_id';
CREATE FUNCTION pg_catalog.has_database_privilege(pg_catalog.oid, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_database_privilege_id_name';
CREATE FUNCTION pg_catalog.has_database_privilege(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_database_privilege_name';
CREATE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(pg_catalog.name, pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_foreign_data_wrapper_privilege_name_id';
CREATE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(pg_catalog.name, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_foreign_data_wrapper_privilege_name_name';
CREATE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(pg_catalog.oid, pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_foreign_data_wrapper_privilege_id_id';
CREATE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_foreign_data_wrapper_privilege_id';
CREATE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(pg_catalog.oid, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_foreign_data_wrapper_privilege_id_name';
CREATE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_foreign_data_wrapper_privilege_name';
CREATE FUNCTION pg_catalog.has_function_privilege(pg_catalog.name, pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_function_privilege_name_id';
CREATE FUNCTION pg_catalog.has_function_privilege(pg_catalog.name, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_function_privilege_name_name';
CREATE FUNCTION pg_catalog.has_function_privilege(pg_catalog.oid, pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_function_privilege_id_id';
CREATE FUNCTION pg_catalog.has_function_privilege(pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_function_privilege_id';
CREATE FUNCTION pg_catalog.has_function_privilege(pg_catalog.oid, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_function_privilege_id_name';
CREATE FUNCTION pg_catalog.has_function_privilege(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_function_privilege_name';
CREATE FUNCTION pg_catalog.has_language_privilege(pg_catalog.name, pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_language_privilege_name_id';
CREATE FUNCTION pg_catalog.has_language_privilege(pg_catalog.name, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_language_privilege_name_name';
CREATE FUNCTION pg_catalog.has_language_privilege(pg_catalog.oid, pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_language_privilege_id_id';
CREATE FUNCTION pg_catalog.has_language_privilege(pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_language_privilege_id';
CREATE FUNCTION pg_catalog.has_language_privilege(pg_catalog.oid, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_language_privilege_id_name';
CREATE FUNCTION pg_catalog.has_language_privilege(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_language_privilege_name';
CREATE FUNCTION pg_catalog.has_schema_privilege(pg_catalog.name, pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_schema_privilege_name_id';
CREATE FUNCTION pg_catalog.has_schema_privilege(pg_catalog.name, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_schema_privilege_name_name';
CREATE FUNCTION pg_catalog.has_schema_privilege(pg_catalog.oid, pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_schema_privilege_id_id';
CREATE FUNCTION pg_catalog.has_schema_privilege(pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_schema_privilege_id';
CREATE FUNCTION pg_catalog.has_schema_privilege(pg_catalog.oid, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_schema_privilege_id_name';
CREATE FUNCTION pg_catalog.has_schema_privilege(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_schema_privilege_name';
CREATE FUNCTION pg_catalog.has_server_privilege(pg_catalog.name, pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_server_privilege_name_id';
CREATE FUNCTION pg_catalog.has_server_privilege(pg_catalog.name, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_server_privilege_name_name';
CREATE FUNCTION pg_catalog.has_server_privilege(pg_catalog.oid, pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_server_privilege_id_id';
CREATE FUNCTION pg_catalog.has_server_privilege(pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_server_privilege_id';
CREATE FUNCTION pg_catalog.has_server_privilege(pg_catalog.oid, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_server_privilege_id_name';
CREATE FUNCTION pg_catalog.has_server_privilege(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_server_privilege_name';
CREATE FUNCTION pg_catalog.has_table_privilege(pg_catalog.name, pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_table_privilege_name_id';
CREATE FUNCTION pg_catalog.has_table_privilege(pg_catalog.name, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_table_privilege_name_name';
CREATE FUNCTION pg_catalog.has_table_privilege(pg_catalog.oid, pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_table_privilege_id_id';
CREATE FUNCTION pg_catalog.has_table_privilege(pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_table_privilege_id';
CREATE FUNCTION pg_catalog.has_table_privilege(pg_catalog.oid, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_table_privilege_id_name';
CREATE FUNCTION pg_catalog.has_table_privilege(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_table_privilege_name';
CREATE FUNCTION pg_catalog.has_tablespace_privilege(pg_catalog.name, pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_tablespace_privilege_name_id';
CREATE FUNCTION pg_catalog.has_tablespace_privilege(pg_catalog.name, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_tablespace_privilege_name_name';
CREATE FUNCTION pg_catalog.has_tablespace_privilege(pg_catalog.oid, pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_tablespace_privilege_id_id';
CREATE FUNCTION pg_catalog.has_tablespace_privilege(pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_tablespace_privilege_id';
CREATE FUNCTION pg_catalog.has_tablespace_privilege(pg_catalog.oid, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_tablespace_privilege_id_name';
CREATE FUNCTION pg_catalog.has_tablespace_privilege(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'has_tablespace_privilege_name';
CREATE FUNCTION pg_catalog.hash_aclitem(pg_catalog.aclitem) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'hash_aclitem';
CREATE FUNCTION pg_catalog.hash_numeric(pg_catalog."numeric") RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'hash_numeric';
CREATE FUNCTION pg_catalog.hashbeginscan(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'hashbeginscan';
CREATE FUNCTION pg_catalog.hashbpchar(pg_catalog.bpchar) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'hashbpchar';
CREATE FUNCTION pg_catalog.hashbuild(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'hashbuild';
CREATE FUNCTION pg_catalog.hashbulkdelete(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'hashbulkdelete';
CREATE FUNCTION pg_catalog.hashchar(pg_catalog."char") RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'hashchar';
CREATE FUNCTION pg_catalog.hashcostestimate(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'hashcostestimate';
CREATE FUNCTION pg_catalog.hashendscan(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'hashendscan';
CREATE FUNCTION pg_catalog.hashfloat4(pg_catalog.float4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'hashfloat4';
CREATE FUNCTION pg_catalog.hashfloat8(pg_catalog.float8) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'hashfloat8';
CREATE FUNCTION pg_catalog.hashgetmulti(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'hashgetmulti';
CREATE FUNCTION pg_catalog.hashgettuple(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'hashgettuple';
CREATE FUNCTION pg_catalog.hashinet(pg_catalog.inet) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'hashinet';
CREATE FUNCTION pg_catalog.hashinsert(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'hashinsert';
CREATE FUNCTION pg_catalog.hashint2(pg_catalog.int2) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'hashint2';
CREATE FUNCTION pg_catalog.hashint2vector(pg_catalog.int2vector) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'hashint2vector';
CREATE FUNCTION pg_catalog.hashint4(pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'hashint4';
CREATE FUNCTION pg_catalog.hashint8(pg_catalog.int8) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'hashint8';
CREATE FUNCTION pg_catalog.hashmacaddr(pg_catalog.macaddr) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'hashmacaddr';
CREATE FUNCTION pg_catalog.hashmarkpos(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'hashmarkpos';
CREATE FUNCTION pg_catalog.hashname(pg_catalog.name) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'hashname';
CREATE FUNCTION pg_catalog.hashoid(pg_catalog.oid) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'hashoid';
CREATE FUNCTION pg_catalog.hashoidvector(pg_catalog.oidvector) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'hashoidvector';
CREATE FUNCTION pg_catalog.hashoptions(pg_catalog._text, pg_catalog.bool) RETURNS pg_catalog.bytea LANGUAGE internal STABLE STRICT AS 'hashoptions';
CREATE FUNCTION pg_catalog.hashrescan(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'hashrescan';
CREATE FUNCTION pg_catalog.hashrestrpos(pg_catalog.internal) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'hashrestrpos';
CREATE FUNCTION pg_catalog.hashtext(pg_catalog.text) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'hashtext';
CREATE FUNCTION pg_catalog.hashvacuumcleanup(pg_catalog.internal, pg_catalog.internal) RETURNS pg_catalog.internal LANGUAGE internal VOLATILE STRICT AS 'hashvacuumcleanup';
CREATE FUNCTION pg_catalog.hashvarlena(pg_catalog.internal) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'hashvarlena';
CREATE FUNCTION pg_catalog.height(pg_catalog.box) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'box_height';
CREATE FUNCTION pg_catalog.host(pg_catalog.inet) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'network_host';
CREATE FUNCTION pg_catalog.hostmask(pg_catalog.inet) RETURNS pg_catalog.inet LANGUAGE internal IMMUTABLE STRICT AS 'network_hostmask';
CREATE FUNCTION pg_catalog.iclikejoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'iclikejoinsel';
CREATE FUNCTION pg_catalog.iclikesel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'iclikesel';
CREATE FUNCTION pg_catalog.icnlikejoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'icnlikejoinsel';
CREATE FUNCTION pg_catalog.icnlikesel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'icnlikesel';
CREATE FUNCTION pg_catalog.icregexeqjoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'icregexeqjoinsel';
CREATE FUNCTION pg_catalog.icregexeqsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'icregexeqsel';
CREATE FUNCTION pg_catalog.icregexnejoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'icregexnejoinsel';
CREATE FUNCTION pg_catalog.icregexnesel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'icregexnesel';
CREATE FUNCTION pg_catalog.inet(pg_catalog.text) RETURNS pg_catalog.inet LANGUAGE internal IMMUTABLE STRICT AS 'text_inet';
CREATE FUNCTION pg_catalog.inet_client_addr() RETURNS pg_catalog.inet LANGUAGE internal STABLE AS 'inet_client_addr';
CREATE FUNCTION pg_catalog.inet_client_port() RETURNS pg_catalog.int4 LANGUAGE internal STABLE AS 'inet_client_port';
CREATE FUNCTION pg_catalog.inet_in(pg_catalog.cstring) RETURNS pg_catalog.inet LANGUAGE internal IMMUTABLE STRICT AS 'inet_in';
CREATE FUNCTION pg_catalog.inet_out(pg_catalog.inet) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'inet_out';
CREATE FUNCTION pg_catalog.inet_recv(pg_catalog.internal) RETURNS pg_catalog.inet LANGUAGE internal IMMUTABLE STRICT AS 'inet_recv';
CREATE FUNCTION pg_catalog.inet_send(pg_catalog.inet) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'inet_send';
CREATE FUNCTION pg_catalog.inet_server_addr() RETURNS pg_catalog.inet LANGUAGE internal STABLE AS 'inet_server_addr';
CREATE FUNCTION pg_catalog.inet_server_port() RETURNS pg_catalog.int4 LANGUAGE internal STABLE AS 'inet_server_port';
CREATE FUNCTION pg_catalog.inetand(pg_catalog.inet, pg_catalog.inet) RETURNS pg_catalog.inet LANGUAGE internal IMMUTABLE STRICT AS 'inetand';
CREATE FUNCTION pg_catalog.inetmi(pg_catalog.inet, pg_catalog.inet) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'inetmi';
CREATE FUNCTION pg_catalog.inetmi_int8(pg_catalog.inet, pg_catalog.int8) RETURNS pg_catalog.inet LANGUAGE internal IMMUTABLE STRICT AS 'inetmi_int8';
CREATE FUNCTION pg_catalog.inetnot(pg_catalog.inet) RETURNS pg_catalog.inet LANGUAGE internal IMMUTABLE STRICT AS 'inetnot';
CREATE FUNCTION pg_catalog.inetor(pg_catalog.inet, pg_catalog.inet) RETURNS pg_catalog.inet LANGUAGE internal IMMUTABLE STRICT AS 'inetor';
CREATE FUNCTION pg_catalog.inetpl(pg_catalog.inet, pg_catalog.int8) RETURNS pg_catalog.inet LANGUAGE internal IMMUTABLE STRICT AS 'inetpl';
CREATE FUNCTION pg_catalog.initcap(pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'initcap';
CREATE FUNCTION pg_catalog.int2(pg_catalog."numeric") RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'numeric_int2';
CREATE FUNCTION pg_catalog.int2(pg_catalog.float4) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'ftoi2';
CREATE FUNCTION pg_catalog.int2(pg_catalog.float8) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'dtoi2';
CREATE FUNCTION pg_catalog.int2(pg_catalog.int4) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'i4toi2';
CREATE FUNCTION pg_catalog.int2(pg_catalog.int8) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int82';
CREATE FUNCTION pg_catalog.int2(pg_catalog.text) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'text_int2';
CREATE FUNCTION pg_catalog.int24div(pg_catalog.int2, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int24div';
CREATE FUNCTION pg_catalog.int24eq(pg_catalog.int2, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int24eq';
CREATE FUNCTION pg_catalog.int24ge(pg_catalog.int2, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int24ge';
CREATE FUNCTION pg_catalog.int24gt(pg_catalog.int2, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int24gt';
CREATE FUNCTION pg_catalog.int24le(pg_catalog.int2, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int24le';
CREATE FUNCTION pg_catalog.int24lt(pg_catalog.int2, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int24lt';
CREATE FUNCTION pg_catalog.int24mi(pg_catalog.int2, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int24mi';
CREATE FUNCTION pg_catalog.int24mod(pg_catalog.int2, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int24mod';
CREATE FUNCTION pg_catalog.int24mul(pg_catalog.int2, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int24mul';
CREATE FUNCTION pg_catalog.int24ne(pg_catalog.int2, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int24ne';
CREATE FUNCTION pg_catalog.int24pl(pg_catalog.int2, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int24pl';
CREATE FUNCTION pg_catalog.int28eq(pg_catalog.int2, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int28eq';
CREATE FUNCTION pg_catalog.int28ge(pg_catalog.int2, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int28ge';
CREATE FUNCTION pg_catalog.int28gt(pg_catalog.int2, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int28gt';
CREATE FUNCTION pg_catalog.int28le(pg_catalog.int2, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int28le';
CREATE FUNCTION pg_catalog.int28lt(pg_catalog.int2, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int28lt';
CREATE FUNCTION pg_catalog.int28ne(pg_catalog.int2, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int28ne';
CREATE FUNCTION pg_catalog.int2_accum(pg_catalog._numeric, pg_catalog.int2) RETURNS pg_catalog._numeric LANGUAGE internal IMMUTABLE STRICT AS 'int2_accum';
CREATE FUNCTION pg_catalog.int2_avg_accum(pg_catalog.bytea, pg_catalog.int2) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'int2_avg_accum';
CREATE FUNCTION pg_catalog.int2_avg_decum(pg_catalog.bytea, pg_catalog.int2) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'int2_avg_decum';
CREATE FUNCTION pg_catalog.int2_decum(pg_catalog._numeric, pg_catalog.int2) RETURNS pg_catalog._numeric LANGUAGE internal IMMUTABLE STRICT AS 'int2_decum';
CREATE FUNCTION pg_catalog.int2_invsum(pg_catalog.int8, pg_catalog.int2) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE AS 'int2_invsum';
CREATE FUNCTION pg_catalog.int2_matrix_accum(pg_catalog._int8, pg_catalog._int2) RETURNS pg_catalog._int8 LANGUAGE internal IMMUTABLE AS 'matrix_add';
CREATE FUNCTION pg_catalog.int2_mul_cash(pg_catalog.int2, pg_catalog.money) RETURNS pg_catalog.money LANGUAGE internal IMMUTABLE STRICT AS 'int2_mul_cash';
CREATE FUNCTION pg_catalog.int2_sum(pg_catalog.int8, pg_catalog.int2) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE AS 'int2_sum';
CREATE FUNCTION pg_catalog.int2abs(pg_catalog.int2) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int2abs';
CREATE FUNCTION pg_catalog.int2and(pg_catalog.int2, pg_catalog.int2) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int2and';
CREATE FUNCTION pg_catalog.int2div(pg_catalog.int2, pg_catalog.int2) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int2div';
CREATE FUNCTION pg_catalog.int2eq(pg_catalog.int2, pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int2eq';
CREATE FUNCTION pg_catalog.int2ge(pg_catalog.int2, pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int2ge';
CREATE FUNCTION pg_catalog.int2gt(pg_catalog.int2, pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int2gt';
CREATE FUNCTION pg_catalog.int2in(pg_catalog.cstring) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int2in';
CREATE FUNCTION pg_catalog.int2larger(pg_catalog.int2, pg_catalog.int2) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int2larger';
CREATE FUNCTION pg_catalog.int2le(pg_catalog.int2, pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int2le';
CREATE FUNCTION pg_catalog.int2lt(pg_catalog.int2, pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int2lt';
CREATE FUNCTION pg_catalog.int2mi(pg_catalog.int2, pg_catalog.int2) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int2mi';
CREATE FUNCTION pg_catalog.int2mod(pg_catalog.int2, pg_catalog.int2) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int2mod';
CREATE FUNCTION pg_catalog.int2mul(pg_catalog.int2, pg_catalog.int2) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int2mul';
CREATE FUNCTION pg_catalog.int2ne(pg_catalog.int2, pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int2ne';
CREATE FUNCTION pg_catalog.int2not(pg_catalog.int2) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int2not';
CREATE FUNCTION pg_catalog.int2or(pg_catalog.int2, pg_catalog.int2) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int2or';
CREATE FUNCTION pg_catalog.int2out(pg_catalog.int2) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'int2out';
CREATE FUNCTION pg_catalog.int2pl(pg_catalog.int2, pg_catalog.int2) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int2pl';
CREATE FUNCTION pg_catalog.int2recv(pg_catalog.internal) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int2recv';
CREATE FUNCTION pg_catalog.int2send(pg_catalog.int2) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'int2send';
CREATE FUNCTION pg_catalog.int2shl(pg_catalog.int2, pg_catalog.int4) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int2shl';
CREATE FUNCTION pg_catalog.int2shr(pg_catalog.int2, pg_catalog.int4) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int2shr';
CREATE FUNCTION pg_catalog.int2smaller(pg_catalog.int2, pg_catalog.int2) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int2smaller';
CREATE FUNCTION pg_catalog.int2um(pg_catalog.int2) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int2um';
CREATE FUNCTION pg_catalog.int2up(pg_catalog.int2) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int2up';
CREATE FUNCTION pg_catalog.int2vectoreq(pg_catalog.int2vector, pg_catalog.int2vector) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int2vectoreq';
CREATE FUNCTION pg_catalog.int2vectorin(pg_catalog.cstring) RETURNS pg_catalog.int2vector LANGUAGE internal IMMUTABLE STRICT AS 'int2vectorin';
CREATE FUNCTION pg_catalog.int2vectorout(pg_catalog.int2vector) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'int2vectorout';
CREATE FUNCTION pg_catalog.int2vectorrecv(pg_catalog.internal) RETURNS pg_catalog.int2vector LANGUAGE internal IMMUTABLE STRICT AS 'int2vectorrecv';
CREATE FUNCTION pg_catalog.int2vectorsend(pg_catalog.int2vector) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'int2vectorsend';
CREATE FUNCTION pg_catalog.int2xor(pg_catalog.int2, pg_catalog.int2) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int2xor';
CREATE FUNCTION pg_catalog.int4(pg_catalog."bit") RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'bittoint4';
CREATE FUNCTION pg_catalog.int4(pg_catalog."char") RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'chartoi4';
CREATE FUNCTION pg_catalog.int4(pg_catalog."numeric") RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'numeric_int4';
CREATE FUNCTION pg_catalog.int4(pg_catalog.bool) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'bool_int4';
CREATE FUNCTION pg_catalog.int4(pg_catalog.float4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'ftoi4';
CREATE FUNCTION pg_catalog.int4(pg_catalog.float8) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'dtoi4';
CREATE FUNCTION pg_catalog.int4(pg_catalog.int2) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'i2toi4';
CREATE FUNCTION pg_catalog.int4(pg_catalog.int8) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int84';
CREATE FUNCTION pg_catalog.int4(pg_catalog.text) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'text_int4';
CREATE FUNCTION pg_catalog.int42div(pg_catalog.int4, pg_catalog.int2) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int42div';
CREATE FUNCTION pg_catalog.int42eq(pg_catalog.int4, pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int42eq';
CREATE FUNCTION pg_catalog.int42ge(pg_catalog.int4, pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int42ge';
CREATE FUNCTION pg_catalog.int42gt(pg_catalog.int4, pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int42gt';
CREATE FUNCTION pg_catalog.int42le(pg_catalog.int4, pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int42le';
CREATE FUNCTION pg_catalog.int42lt(pg_catalog.int4, pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int42lt';
CREATE FUNCTION pg_catalog.int42mi(pg_catalog.int4, pg_catalog.int2) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int42mi';
CREATE FUNCTION pg_catalog.int42mod(pg_catalog.int4, pg_catalog.int2) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int42mod';
CREATE FUNCTION pg_catalog.int42mul(pg_catalog.int4, pg_catalog.int2) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int42mul';
CREATE FUNCTION pg_catalog.int42ne(pg_catalog.int4, pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int42ne';
CREATE FUNCTION pg_catalog.int42pl(pg_catalog.int4, pg_catalog.int2) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int42pl';
CREATE FUNCTION pg_catalog.int48div(pg_catalog.int4, pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int48div';
CREATE FUNCTION pg_catalog.int48eq(pg_catalog.int4, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int48eq';
CREATE FUNCTION pg_catalog.int48ge(pg_catalog.int4, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int48ge';
CREATE FUNCTION pg_catalog.int48gt(pg_catalog.int4, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int48gt';
CREATE FUNCTION pg_catalog.int48le(pg_catalog.int4, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int48le';
CREATE FUNCTION pg_catalog.int48lt(pg_catalog.int4, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int48lt';
CREATE FUNCTION pg_catalog.int48mi(pg_catalog.int4, pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int48mi';
CREATE FUNCTION pg_catalog.int48mul(pg_catalog.int4, pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int48mul';
CREATE FUNCTION pg_catalog.int48ne(pg_catalog.int4, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int48ne';
CREATE FUNCTION pg_catalog.int48pl(pg_catalog.int4, pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int48pl';
CREATE FUNCTION pg_catalog.int4_accum(pg_catalog._numeric, pg_catalog.int4) RETURNS pg_catalog._numeric LANGUAGE internal IMMUTABLE STRICT AS 'int4_accum';
CREATE FUNCTION pg_catalog.int4_avg_accum(pg_catalog.bytea, pg_catalog.int4) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'int4_avg_accum';
CREATE FUNCTION pg_catalog.int4_avg_decum(pg_catalog.bytea, pg_catalog.int4) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'int4_avg_decum';
CREATE FUNCTION pg_catalog.int4_decum(pg_catalog._numeric, pg_catalog.int4) RETURNS pg_catalog._numeric LANGUAGE internal IMMUTABLE STRICT AS 'int4_decum';
CREATE FUNCTION pg_catalog.int4_invsum(pg_catalog.int8, pg_catalog.int4) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE AS 'int4_invsum';
CREATE FUNCTION pg_catalog.int4_matrix_accum(pg_catalog._int8, pg_catalog._int4) RETURNS pg_catalog._int8 LANGUAGE internal IMMUTABLE AS 'matrix_add';
CREATE FUNCTION pg_catalog.int4_mul_cash(pg_catalog.int4, pg_catalog.money) RETURNS pg_catalog.money LANGUAGE internal IMMUTABLE STRICT AS 'int4_mul_cash';
CREATE FUNCTION pg_catalog.int4_pivot_accum(pg_catalog._int4, pg_catalog._text, pg_catalog.text, pg_catalog.int4) RETURNS pg_catalog._int4 LANGUAGE internal IMMUTABLE AS 'int4_pivot_accum';
CREATE FUNCTION pg_catalog.int4_sum(pg_catalog.int8, pg_catalog.int4) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE AS 'int4_sum';
CREATE FUNCTION pg_catalog.int4abs(pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4abs';
CREATE FUNCTION pg_catalog.int4and(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4and';
CREATE FUNCTION pg_catalog.int4div(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4div';
CREATE FUNCTION pg_catalog.int4eq(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int4eq';
CREATE FUNCTION pg_catalog.int4ge(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int4ge';
CREATE FUNCTION pg_catalog.int4gt(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int4gt';
CREATE FUNCTION pg_catalog.int4in(pg_catalog.cstring) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4in';
CREATE FUNCTION pg_catalog.int4inc(pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4inc';
CREATE FUNCTION pg_catalog.int4larger(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4larger';
CREATE FUNCTION pg_catalog.int4le(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int4le';
CREATE FUNCTION pg_catalog.int4lt(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int4lt';
CREATE FUNCTION pg_catalog.int4mi(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4mi';
CREATE FUNCTION pg_catalog.int4mod(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4mod';
CREATE FUNCTION pg_catalog.int4mul(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4mul';
CREATE FUNCTION pg_catalog.int4ne(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int4ne';
CREATE FUNCTION pg_catalog.int4not(pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4not';
CREATE FUNCTION pg_catalog.int4notin(pg_catalog.int4, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'int4notin';
CREATE FUNCTION pg_catalog.int4or(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4or';
CREATE FUNCTION pg_catalog.int4out(pg_catalog.int4) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'int4out';
CREATE FUNCTION pg_catalog.int4pl(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4pl';
CREATE FUNCTION pg_catalog.int4recv(pg_catalog.internal) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4recv';
CREATE FUNCTION pg_catalog.int4send(pg_catalog.int4) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'int4send';
CREATE FUNCTION pg_catalog.int4shl(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4shl';
CREATE FUNCTION pg_catalog.int4shr(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4shr';
CREATE FUNCTION pg_catalog.int4smaller(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4smaller';
CREATE FUNCTION pg_catalog.int4um(pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4um';
CREATE FUNCTION pg_catalog.int4up(pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4up';
CREATE FUNCTION pg_catalog.int4xor(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4xor';
CREATE FUNCTION pg_catalog.int8(pg_catalog."bit") RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'bittoint8';
CREATE FUNCTION pg_catalog.int8(pg_catalog."numeric") RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'numeric_int8';
CREATE FUNCTION pg_catalog.int8(pg_catalog.float4) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'ftoi8';
CREATE FUNCTION pg_catalog.int8(pg_catalog.float8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'dtoi8';
CREATE FUNCTION pg_catalog.int8(pg_catalog.int2) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int28';
CREATE FUNCTION pg_catalog.int8(pg_catalog.int4) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int48';
CREATE FUNCTION pg_catalog.int8(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'oidtoi8';
CREATE FUNCTION pg_catalog.int8(pg_catalog.text) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'text_int8';
CREATE FUNCTION pg_catalog.int8(pg_catalog.tid) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'tidtoi8';
CREATE FUNCTION pg_catalog.int82eq(pg_catalog.int8, pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int82eq';
CREATE FUNCTION pg_catalog.int82ge(pg_catalog.int8, pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int82ge';
CREATE FUNCTION pg_catalog.int82gt(pg_catalog.int8, pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int82gt';
CREATE FUNCTION pg_catalog.int82le(pg_catalog.int8, pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int82le';
CREATE FUNCTION pg_catalog.int82lt(pg_catalog.int8, pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int82lt';
CREATE FUNCTION pg_catalog.int82ne(pg_catalog.int8, pg_catalog.int2) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int82ne';
CREATE FUNCTION pg_catalog.int84div(pg_catalog.int8, pg_catalog.int4) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int84div';
CREATE FUNCTION pg_catalog.int84eq(pg_catalog.int8, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int84eq';
CREATE FUNCTION pg_catalog.int84ge(pg_catalog.int8, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int84ge';
CREATE FUNCTION pg_catalog.int84gt(pg_catalog.int8, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int84gt';
CREATE FUNCTION pg_catalog.int84le(pg_catalog.int8, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int84le';
CREATE FUNCTION pg_catalog.int84lt(pg_catalog.int8, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int84lt';
CREATE FUNCTION pg_catalog.int84mi(pg_catalog.int8, pg_catalog.int4) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int84mi';
CREATE FUNCTION pg_catalog.int84mul(pg_catalog.int8, pg_catalog.int4) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int84mul';
CREATE FUNCTION pg_catalog.int84ne(pg_catalog.int8, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int84ne';
CREATE FUNCTION pg_catalog.int84pl(pg_catalog.int8, pg_catalog.int4) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int84pl';
CREATE FUNCTION pg_catalog.int8_accum(pg_catalog._numeric, pg_catalog.int8) RETURNS pg_catalog._numeric LANGUAGE internal IMMUTABLE STRICT AS 'int8_accum';
CREATE FUNCTION pg_catalog.int8_avg(pg_catalog.bytea) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'int8_avg';
CREATE FUNCTION pg_catalog.int8_avg_accum(pg_catalog.bytea, pg_catalog.int8) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'int8_avg_accum';
CREATE FUNCTION pg_catalog.int8_avg_amalg(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'int8_avg_amalg';
CREATE FUNCTION pg_catalog.int8_avg_decum(pg_catalog.bytea, pg_catalog.int8) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'int8_avg_decum';
CREATE FUNCTION pg_catalog.int8_avg_demalg(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'int8_avg_demalg';
CREATE FUNCTION pg_catalog.int8_decum(pg_catalog._numeric, pg_catalog.int8) RETURNS pg_catalog._numeric LANGUAGE internal IMMUTABLE STRICT AS 'int8_decum';
CREATE FUNCTION pg_catalog.int8_invsum(pg_catalog."numeric", pg_catalog.int8) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE AS 'int8_invsum';
CREATE FUNCTION pg_catalog.int8_matrix_accum(pg_catalog._int8, pg_catalog._int8) RETURNS pg_catalog._int8 LANGUAGE internal IMMUTABLE STRICT AS 'matrix_add';
CREATE FUNCTION pg_catalog.int8_pivot_accum(pg_catalog._int8, pg_catalog._text, pg_catalog.text, pg_catalog.int8) RETURNS pg_catalog._int8 LANGUAGE internal IMMUTABLE AS 'int8_pivot_accum';
CREATE FUNCTION pg_catalog.int8_sum(pg_catalog."numeric", pg_catalog.int8) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE AS 'int8_sum';
CREATE FUNCTION pg_catalog.int8abs(pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8abs';
CREATE FUNCTION pg_catalog.int8and(pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8and';
CREATE FUNCTION pg_catalog.int8dec(pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8dec';
CREATE FUNCTION pg_catalog.int8div(pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8div';
CREATE FUNCTION pg_catalog.int8eq(pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int8eq';
CREATE FUNCTION pg_catalog.int8ge(pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int8ge';
CREATE FUNCTION pg_catalog.int8gt(pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int8gt';
CREATE FUNCTION pg_catalog.int8in(pg_catalog.cstring) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8in';
CREATE FUNCTION pg_catalog.int8inc(pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8inc';
CREATE FUNCTION pg_catalog.int8inc_any(pg_catalog.int8, pg_catalog."any") RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8inc_any';
CREATE FUNCTION pg_catalog.int8inc_float8_float8(pg_catalog.int8, pg_catalog.float8, pg_catalog.float8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8inc_float8_float8';
CREATE FUNCTION pg_catalog.int8larger(pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8larger';
CREATE FUNCTION pg_catalog.int8le(pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int8le';
CREATE FUNCTION pg_catalog.int8lt(pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int8lt';
CREATE FUNCTION pg_catalog.int8mi(pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8mi';
CREATE FUNCTION pg_catalog.int8mod(pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8mod';
CREATE FUNCTION pg_catalog.int8mul(pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8mul';
CREATE FUNCTION pg_catalog.int8ne(pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'int8ne';
CREATE FUNCTION pg_catalog.int8not(pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8not';
CREATE FUNCTION pg_catalog.int8or(pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8or';
CREATE FUNCTION pg_catalog.int8out(pg_catalog.int8) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'int8out';
CREATE FUNCTION pg_catalog.int8pl(pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8pl';
CREATE FUNCTION pg_catalog.int8pl_inet(pg_catalog.int8, pg_catalog.inet) RETURNS pg_catalog.inet LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog.inet';
CREATE FUNCTION pg_catalog.int8recv(pg_catalog.internal) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8recv';
CREATE FUNCTION pg_catalog.int8send(pg_catalog.int8) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'int8send';
CREATE FUNCTION pg_catalog.int8shl(pg_catalog.int8, pg_catalog.int4) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8shl';
CREATE FUNCTION pg_catalog.int8shr(pg_catalog.int8, pg_catalog.int4) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8shr';
CREATE FUNCTION pg_catalog.int8smaller(pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8smaller';
CREATE FUNCTION pg_catalog.int8um(pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8um';
CREATE FUNCTION pg_catalog.int8up(pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8up';
CREATE FUNCTION pg_catalog.int8xor(pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8xor';
CREATE FUNCTION pg_catalog.integer_pl_date(pg_catalog.int4, pg_catalog.date) RETURNS pg_catalog.date LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog.date';
CREATE FUNCTION pg_catalog.inter_lb(pg_catalog.line, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'inter_lb';
CREATE FUNCTION pg_catalog.inter_sb(pg_catalog.lseg, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'inter_sb';
CREATE FUNCTION pg_catalog.inter_sl(pg_catalog.lseg, pg_catalog.line) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'inter_sl';
CREATE FUNCTION pg_catalog.internal_in(pg_catalog.cstring) RETURNS pg_catalog.internal LANGUAGE internal IMMUTABLE STRICT AS 'internal_in';
CREATE FUNCTION pg_catalog.internal_out(pg_catalog.internal) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'internal_out';
CREATE FUNCTION pg_catalog.interval_accum(pg_catalog._interval, pg_catalog."interval") RETURNS pg_catalog._interval LANGUAGE internal IMMUTABLE STRICT AS 'interval_accum';
CREATE FUNCTION pg_catalog.interval_amalg(pg_catalog._interval, pg_catalog._interval) RETURNS pg_catalog._interval LANGUAGE internal IMMUTABLE STRICT AS 'interval_amalg';
CREATE FUNCTION pg_catalog.interval_avg(pg_catalog._interval) RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'interval_avg';
CREATE FUNCTION pg_catalog.interval_cmp(pg_catalog."interval", pg_catalog."interval") RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'interval_cmp';
CREATE FUNCTION pg_catalog.interval_decum(pg_catalog._interval, pg_catalog."interval") RETURNS pg_catalog._interval LANGUAGE internal IMMUTABLE STRICT AS 'interval_decum';
CREATE FUNCTION pg_catalog.interval_demalg(pg_catalog._interval, pg_catalog._interval) RETURNS pg_catalog._interval LANGUAGE internal IMMUTABLE STRICT AS 'interval_demalg';
CREATE FUNCTION pg_catalog.interval_div(pg_catalog."interval", pg_catalog.float8) RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'interval_div';
CREATE FUNCTION pg_catalog.interval_eq(pg_catalog."interval", pg_catalog."interval") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'interval_eq';
CREATE FUNCTION pg_catalog.interval_ge(pg_catalog."interval", pg_catalog."interval") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'interval_ge';
CREATE FUNCTION pg_catalog.interval_gt(pg_catalog."interval", pg_catalog."interval") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'interval_gt';
CREATE FUNCTION pg_catalog.interval_hash(pg_catalog."interval") RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'interval_hash';
CREATE FUNCTION pg_catalog.interval_in(pg_catalog.cstring, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog."interval" LANGUAGE internal STABLE STRICT AS 'interval_in';
CREATE FUNCTION pg_catalog.interval_larger(pg_catalog."interval", pg_catalog."interval") RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'interval_larger';
CREATE FUNCTION pg_catalog.interval_le(pg_catalog."interval", pg_catalog."interval") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'interval_le';
CREATE FUNCTION pg_catalog.interval_lt(pg_catalog."interval", pg_catalog."interval") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'interval_lt';
CREATE FUNCTION pg_catalog.interval_mi(pg_catalog."interval", pg_catalog."interval") RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'interval_mi';
CREATE FUNCTION pg_catalog.interval_mul(pg_catalog."interval", pg_catalog.float8) RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'interval_mul';
CREATE FUNCTION pg_catalog.interval_ne(pg_catalog."interval", pg_catalog."interval") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'interval_ne';
CREATE FUNCTION pg_catalog.interval_out(pg_catalog."interval") RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'interval_out';
CREATE FUNCTION pg_catalog.interval_pl(pg_catalog."interval", pg_catalog."interval") RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'interval_pl';
CREATE FUNCTION pg_catalog.interval_pl_date(pg_catalog."interval", pg_catalog.date) RETURNS pg_catalog."timestamp" LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog."timestamp"';
CREATE FUNCTION pg_catalog.interval_pl_time(pg_catalog."interval", pg_catalog."time") RETURNS pg_catalog."time" LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog."time"';
CREATE FUNCTION pg_catalog.interval_pl_timestamp(pg_catalog."interval", pg_catalog."timestamp") RETURNS pg_catalog."timestamp" LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog."timestamp"';
CREATE FUNCTION pg_catalog.interval_pl_timestamptz(pg_catalog."interval", pg_catalog.timestamptz) RETURNS pg_catalog.timestamptz LANGUAGE sql STABLE STRICT AS 'select null::pg_catalog.timestamptz';
CREATE FUNCTION pg_catalog.interval_pl_timetz(pg_catalog."interval", pg_catalog.timetz) RETURNS pg_catalog.timetz LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog.timetz';
CREATE FUNCTION pg_catalog.interval_recv(pg_catalog.internal, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'interval_recv';
CREATE FUNCTION pg_catalog.interval_send(pg_catalog."interval") RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'interval_send';
CREATE FUNCTION pg_catalog.interval_smaller(pg_catalog."interval", pg_catalog."interval") RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'interval_smaller';
CREATE FUNCTION pg_catalog.interval_um(pg_catalog."interval") RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'interval_um';
CREATE FUNCTION pg_catalog.intinterval(pg_catalog.abstime, pg_catalog.tinterval) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'intinterval';
CREATE FUNCTION pg_catalog.isclosed(pg_catalog.path) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'path_isclosed';
CREATE FUNCTION pg_catalog.isfalse(pg_catalog.bool) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE AS 'isfalse';
CREATE FUNCTION pg_catalog.isfinite(pg_catalog."interval") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'interval_finite';
CREATE FUNCTION pg_catalog.isfinite(pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_finite';
CREATE FUNCTION pg_catalog.isfinite(pg_catalog.abstime) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'abstime_finite';
CREATE FUNCTION pg_catalog.isfinite(pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_finite';
CREATE FUNCTION pg_catalog.ishorizontal(pg_catalog.line) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'line_horizontal';
CREATE FUNCTION pg_catalog.ishorizontal(pg_catalog.lseg) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'lseg_horizontal';
CREATE FUNCTION pg_catalog.ishorizontal(pg_catalog.point, pg_catalog.point) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'point_horiz';
CREATE FUNCTION pg_catalog.isnotfalse(pg_catalog.bool) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE AS 'isnotfalse';
CREATE FUNCTION pg_catalog.isnottrue(pg_catalog.bool) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE AS 'isnottrue';
CREATE FUNCTION pg_catalog.isopen(pg_catalog.path) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'path_isopen';
CREATE FUNCTION pg_catalog.isparallel(pg_catalog.line, pg_catalog.line) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'line_parallel';
CREATE FUNCTION pg_catalog.isparallel(pg_catalog.lseg, pg_catalog.lseg) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'lseg_parallel';
CREATE FUNCTION pg_catalog.isperp(pg_catalog.line, pg_catalog.line) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'line_perp';
CREATE FUNCTION pg_catalog.isperp(pg_catalog.lseg, pg_catalog.lseg) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'lseg_perp';
CREATE FUNCTION pg_catalog.istrue(pg_catalog.bool) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE AS 'istrue';
CREATE FUNCTION pg_catalog.isvertical(pg_catalog.line) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'line_vertical';
CREATE FUNCTION pg_catalog.isvertical(pg_catalog.lseg) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'lseg_vertical';
CREATE FUNCTION pg_catalog.isvertical(pg_catalog.point, pg_catalog.point) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'point_vert';
CREATE FUNCTION pg_catalog.justify_days(pg_catalog."interval") RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'interval_justify_days';
CREATE FUNCTION pg_catalog.justify_hours(pg_catalog."interval") RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'interval_justify_hours';
CREATE FUNCTION pg_catalog.justify_interval(pg_catalog."interval") RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'interval_justify_interval';
CREATE FUNCTION pg_catalog.language_handler_in(pg_catalog.cstring) RETURNS pg_catalog.language_handler LANGUAGE internal IMMUTABLE STRICT AS 'language_handler_in';
CREATE FUNCTION pg_catalog.language_handler_out(pg_catalog.language_handler) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'language_handler_out';
CREATE FUNCTION pg_catalog.lastval() RETURNS pg_catalog.int8 LANGUAGE internal VOLATILE STRICT AS 'lastval';
CREATE FUNCTION pg_catalog.length(pg_catalog."bit") RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'bitlength';
CREATE FUNCTION pg_catalog.length(pg_catalog.bpchar) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'bpcharlen';
CREATE FUNCTION pg_catalog.length(pg_catalog.bytea) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'byteaoctetlen';
CREATE FUNCTION pg_catalog.length(pg_catalog.lseg) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'lseg_length';
CREATE FUNCTION pg_catalog.length(pg_catalog.path) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'path_length';
CREATE FUNCTION pg_catalog.length(pg_catalog.text) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'textlen';
CREATE FUNCTION pg_catalog.like_escape(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'like_escape_bytea';
CREATE FUNCTION pg_catalog.like_escape(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'like_escape';
CREATE FUNCTION pg_catalog.likejoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'likejoinsel';
CREATE FUNCTION pg_catalog.likesel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'likesel';
CREATE FUNCTION pg_catalog.line(pg_catalog.point, pg_catalog.point) RETURNS pg_catalog.line LANGUAGE internal IMMUTABLE STRICT AS 'line_construct_pp';
CREATE FUNCTION pg_catalog.line_distance(pg_catalog.line, pg_catalog.line) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'line_distance';
CREATE FUNCTION pg_catalog.line_eq(pg_catalog.line, pg_catalog.line) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'line_eq';
CREATE FUNCTION pg_catalog.line_horizontal(pg_catalog.line) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'line_horizontal';
CREATE FUNCTION pg_catalog.line_in(pg_catalog.cstring) RETURNS pg_catalog.line LANGUAGE internal IMMUTABLE STRICT AS 'line_in';
CREATE FUNCTION pg_catalog.line_interpt(pg_catalog.line, pg_catalog.line) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'line_interpt';
CREATE FUNCTION pg_catalog.line_intersect(pg_catalog.line, pg_catalog.line) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'line_intersect';
CREATE FUNCTION pg_catalog.line_out(pg_catalog.line) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'line_out';
CREATE FUNCTION pg_catalog.line_parallel(pg_catalog.line, pg_catalog.line) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'line_parallel';
CREATE FUNCTION pg_catalog.line_perp(pg_catalog.line, pg_catalog.line) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'line_perp';
CREATE FUNCTION pg_catalog.line_recv(pg_catalog.internal) RETURNS pg_catalog.line LANGUAGE internal IMMUTABLE STRICT AS 'line_recv';
CREATE FUNCTION pg_catalog.line_send(pg_catalog.line) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'line_send';
CREATE FUNCTION pg_catalog.line_vertical(pg_catalog.line) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'line_vertical';
CREATE FUNCTION pg_catalog.ln(pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_ln';
CREATE FUNCTION pg_catalog.ln(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dlog1';
CREATE FUNCTION pg_catalog.lo_close(pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal VOLATILE STRICT AS 'lo_close';
CREATE FUNCTION pg_catalog.lo_creat(pg_catalog.int4) RETURNS pg_catalog.oid LANGUAGE internal VOLATILE STRICT AS 'lo_creat';
CREATE FUNCTION pg_catalog.lo_create(pg_catalog.oid) RETURNS pg_catalog.oid LANGUAGE internal VOLATILE STRICT AS 'lo_create';
CREATE FUNCTION pg_catalog.lo_export(pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.int4 LANGUAGE internal VOLATILE STRICT AS 'lo_export';
CREATE FUNCTION pg_catalog.lo_import(pg_catalog.text) RETURNS pg_catalog.oid LANGUAGE internal VOLATILE STRICT AS 'lo_import';
CREATE FUNCTION pg_catalog.lo_lseek(pg_catalog.int4, pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal VOLATILE STRICT AS 'lo_lseek';
CREATE FUNCTION pg_catalog.lo_open(pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal VOLATILE STRICT AS 'lo_open';
CREATE FUNCTION pg_catalog.lo_tell(pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal VOLATILE STRICT AS 'lo_tell';
CREATE FUNCTION pg_catalog.lo_truncate(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal VOLATILE STRICT AS 'lo_truncate';
CREATE FUNCTION pg_catalog.lo_unlink(pg_catalog.oid) RETURNS pg_catalog.int4 LANGUAGE internal VOLATILE STRICT AS 'lo_unlink';
CREATE FUNCTION pg_catalog.loread(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.bytea LANGUAGE internal VOLATILE STRICT AS 'loread';
CREATE FUNCTION pg_catalog.lower(pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'lower';
CREATE FUNCTION pg_catalog.lowrite(pg_catalog.int4, pg_catalog.bytea) RETURNS pg_catalog.int4 LANGUAGE internal VOLATILE STRICT AS 'lowrite';
CREATE FUNCTION pg_catalog.lpad(pg_catalog.text, pg_catalog.int4) RETURNS pg_catalog.text LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog.text';
CREATE FUNCTION pg_catalog.lpad(pg_catalog.text, pg_catalog.int4, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'lpad';
CREATE FUNCTION pg_catalog.lseg(pg_catalog.box) RETURNS pg_catalog.lseg LANGUAGE internal IMMUTABLE STRICT AS 'box_diagonal';
CREATE FUNCTION pg_catalog.lseg(pg_catalog.point, pg_catalog.point) RETURNS pg_catalog.lseg LANGUAGE internal IMMUTABLE STRICT AS 'lseg_construct';
CREATE FUNCTION pg_catalog.lseg_center(pg_catalog.lseg) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'lseg_center';
CREATE FUNCTION pg_catalog.lseg_distance(pg_catalog.lseg, pg_catalog.lseg) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'lseg_distance';
CREATE FUNCTION pg_catalog.lseg_eq(pg_catalog.lseg, pg_catalog.lseg) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'lseg_eq';
CREATE FUNCTION pg_catalog.lseg_ge(pg_catalog.lseg, pg_catalog.lseg) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'lseg_ge';
CREATE FUNCTION pg_catalog.lseg_gt(pg_catalog.lseg, pg_catalog.lseg) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'lseg_gt';
CREATE FUNCTION pg_catalog.lseg_horizontal(pg_catalog.lseg) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'lseg_horizontal';
CREATE FUNCTION pg_catalog.lseg_in(pg_catalog.cstring) RETURNS pg_catalog.lseg LANGUAGE internal IMMUTABLE STRICT AS 'lseg_in';
CREATE FUNCTION pg_catalog.lseg_interpt(pg_catalog.lseg, pg_catalog.lseg) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'lseg_interpt';
CREATE FUNCTION pg_catalog.lseg_intersect(pg_catalog.lseg, pg_catalog.lseg) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'lseg_intersect';
CREATE FUNCTION pg_catalog.lseg_le(pg_catalog.lseg, pg_catalog.lseg) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'lseg_le';
CREATE FUNCTION pg_catalog.lseg_length(pg_catalog.lseg) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'lseg_length';
CREATE FUNCTION pg_catalog.lseg_lt(pg_catalog.lseg, pg_catalog.lseg) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'lseg_lt';
CREATE FUNCTION pg_catalog.lseg_ne(pg_catalog.lseg, pg_catalog.lseg) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'lseg_ne';
CREATE FUNCTION pg_catalog.lseg_out(pg_catalog.lseg) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'lseg_out';
CREATE FUNCTION pg_catalog.lseg_parallel(pg_catalog.lseg, pg_catalog.lseg) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'lseg_parallel';
CREATE FUNCTION pg_catalog.lseg_perp(pg_catalog.lseg, pg_catalog.lseg) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'lseg_perp';
CREATE FUNCTION pg_catalog.lseg_recv(pg_catalog.internal) RETURNS pg_catalog.lseg LANGUAGE internal IMMUTABLE STRICT AS 'lseg_recv';
CREATE FUNCTION pg_catalog.lseg_send(pg_catalog.lseg) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'lseg_send';
CREATE FUNCTION pg_catalog.lseg_vertical(pg_catalog.lseg) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'lseg_vertical';
CREATE FUNCTION pg_catalog.ltrim(pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'ltrim1';
CREATE FUNCTION pg_catalog.ltrim(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'ltrim';
CREATE FUNCTION pg_catalog.macaddr(pg_catalog.text) RETURNS pg_catalog.macaddr LANGUAGE internal IMMUTABLE STRICT AS 'text_macaddr';
CREATE FUNCTION pg_catalog.macaddr_cmp(pg_catalog.macaddr, pg_catalog.macaddr) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'macaddr_cmp';
CREATE FUNCTION pg_catalog.macaddr_eq(pg_catalog.macaddr, pg_catalog.macaddr) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'macaddr_eq';
CREATE FUNCTION pg_catalog.macaddr_ge(pg_catalog.macaddr, pg_catalog.macaddr) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'macaddr_ge';
CREATE FUNCTION pg_catalog.macaddr_gt(pg_catalog.macaddr, pg_catalog.macaddr) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'macaddr_gt';
CREATE FUNCTION pg_catalog.macaddr_in(pg_catalog.cstring) RETURNS pg_catalog.macaddr LANGUAGE internal IMMUTABLE STRICT AS 'macaddr_in';
CREATE FUNCTION pg_catalog.macaddr_le(pg_catalog.macaddr, pg_catalog.macaddr) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'macaddr_le';
CREATE FUNCTION pg_catalog.macaddr_lt(pg_catalog.macaddr, pg_catalog.macaddr) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'macaddr_lt';
CREATE FUNCTION pg_catalog.macaddr_ne(pg_catalog.macaddr, pg_catalog.macaddr) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'macaddr_ne';
CREATE FUNCTION pg_catalog.macaddr_out(pg_catalog.macaddr) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'macaddr_out';
CREATE FUNCTION pg_catalog.macaddr_recv(pg_catalog.internal) RETURNS pg_catalog.macaddr LANGUAGE internal IMMUTABLE STRICT AS 'macaddr_recv';
CREATE FUNCTION pg_catalog.macaddr_send(pg_catalog.macaddr) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'macaddr_send';
CREATE FUNCTION pg_catalog.makeaclitem(pg_catalog.oid, pg_catalog.oid, pg_catalog.text, pg_catalog.bool) RETURNS pg_catalog.aclitem LANGUAGE internal IMMUTABLE STRICT AS 'makeaclitem';
CREATE FUNCTION pg_catalog.masklen(pg_catalog.inet) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'network_masklen';
CREATE FUNCTION pg_catalog.matrix_add(pg_catalog._float8, pg_catalog._float8) RETURNS pg_catalog._float8 LANGUAGE internal IMMUTABLE STRICT AS 'matrix_add';
CREATE FUNCTION pg_catalog.matrix_add(pg_catalog._int2, pg_catalog._int2) RETURNS pg_catalog._int2 LANGUAGE internal IMMUTABLE STRICT AS 'matrix_add';
CREATE FUNCTION pg_catalog.matrix_add(pg_catalog._int4, pg_catalog._int4) RETURNS pg_catalog._int4 LANGUAGE internal IMMUTABLE STRICT AS 'matrix_add';
CREATE FUNCTION pg_catalog.matrix_add(pg_catalog._int8, pg_catalog._int8) RETURNS pg_catalog._int8 LANGUAGE internal IMMUTABLE STRICT AS 'matrix_add';
CREATE FUNCTION pg_catalog.matrix_multiply(pg_catalog._float8, pg_catalog._float8) RETURNS pg_catalog._float8 LANGUAGE internal IMMUTABLE STRICT AS 'matrix_multiply';
CREATE FUNCTION pg_catalog.matrix_multiply(pg_catalog._float8, pg_catalog.float8) RETURNS pg_catalog._float8 LANGUAGE internal IMMUTABLE STRICT AS 'float8_matrix_smultiply';
CREATE FUNCTION pg_catalog.matrix_multiply(pg_catalog._int2, pg_catalog._int2) RETURNS pg_catalog._int8 LANGUAGE internal IMMUTABLE STRICT AS 'matrix_multiply';
CREATE FUNCTION pg_catalog.matrix_multiply(pg_catalog._int4, pg_catalog._int4) RETURNS pg_catalog._int8 LANGUAGE internal IMMUTABLE STRICT AS 'matrix_multiply';
CREATE FUNCTION pg_catalog.matrix_multiply(pg_catalog._int8, pg_catalog._int8) RETURNS pg_catalog._int8 LANGUAGE internal IMMUTABLE STRICT AS 'matrix_multiply';
CREATE FUNCTION pg_catalog.matrix_multiply(pg_catalog._int8, pg_catalog.int8) RETURNS pg_catalog._int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8_matrix_smultiply';
CREATE FUNCTION pg_catalog.matrix_transpose(pg_catalog.anyarray) RETURNS pg_catalog.anyarray LANGUAGE internal IMMUTABLE STRICT AS 'matrix_transpose';
CREATE FUNCTION pg_catalog.md5(pg_catalog.bytea) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'md5_bytea';
CREATE FUNCTION pg_catalog.md5(pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'md5_text';
CREATE FUNCTION pg_catalog.mktinterval(pg_catalog.abstime, pg_catalog.abstime) RETURNS pg_catalog.tinterval LANGUAGE internal IMMUTABLE STRICT AS 'mktinterval';
CREATE FUNCTION pg_catalog.mod(pg_catalog."numeric", pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_mod';
CREATE FUNCTION pg_catalog.mod(pg_catalog.int2, pg_catalog.int2) RETURNS pg_catalog.int2 LANGUAGE internal IMMUTABLE STRICT AS 'int2mod';
CREATE FUNCTION pg_catalog.mod(pg_catalog.int2, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int24mod';
CREATE FUNCTION pg_catalog.mod(pg_catalog.int4, pg_catalog.int2) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int42mod';
CREATE FUNCTION pg_catalog.mod(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'int4mod';
CREATE FUNCTION pg_catalog.mod(pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'int8mod';
CREATE FUNCTION pg_catalog.mul_d_interval(pg_catalog.float8, pg_catalog."interval") RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'mul_d_interval';
CREATE FUNCTION pg_catalog.name(pg_catalog."varchar") RETURNS pg_catalog.name LANGUAGE internal IMMUTABLE STRICT AS 'text_name';
CREATE FUNCTION pg_catalog.name(pg_catalog.bpchar) RETURNS pg_catalog.name LANGUAGE internal IMMUTABLE STRICT AS 'bpchar_name';
CREATE FUNCTION pg_catalog.name(pg_catalog.text) RETURNS pg_catalog.name LANGUAGE internal IMMUTABLE STRICT AS 'text_name';
CREATE FUNCTION pg_catalog.name_pattern_eq(pg_catalog.name, pg_catalog.name) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'name_pattern_eq';
CREATE FUNCTION pg_catalog.name_pattern_ge(pg_catalog.name, pg_catalog.name) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'name_pattern_ge';
CREATE FUNCTION pg_catalog.name_pattern_gt(pg_catalog.name, pg_catalog.name) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'name_pattern_gt';
CREATE FUNCTION pg_catalog.name_pattern_le(pg_catalog.name, pg_catalog.name) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'name_pattern_le';
CREATE FUNCTION pg_catalog.name_pattern_lt(pg_catalog.name, pg_catalog.name) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'name_pattern_lt';
CREATE FUNCTION pg_catalog.name_pattern_ne(pg_catalog.name, pg_catalog.name) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'name_pattern_ne';
CREATE FUNCTION pg_catalog.nameeq(pg_catalog.name, pg_catalog.name) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'nameeq';
CREATE FUNCTION pg_catalog.namege(pg_catalog.name, pg_catalog.name) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'namege';
CREATE FUNCTION pg_catalog.namegt(pg_catalog.name, pg_catalog.name) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'namegt';
CREATE FUNCTION pg_catalog.nameiclike(pg_catalog.name, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'nameiclike';
CREATE FUNCTION pg_catalog.nameicnlike(pg_catalog.name, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'nameicnlike';
CREATE FUNCTION pg_catalog.nameicregexeq(pg_catalog.name, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'nameicregexeq';
CREATE FUNCTION pg_catalog.nameicregexne(pg_catalog.name, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'nameicregexne';
CREATE FUNCTION pg_catalog.namein(pg_catalog.cstring) RETURNS pg_catalog.name LANGUAGE internal IMMUTABLE STRICT AS 'namein';
CREATE FUNCTION pg_catalog.namele(pg_catalog.name, pg_catalog.name) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'namele';
CREATE FUNCTION pg_catalog.namelike(pg_catalog.name, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'namelike';
CREATE FUNCTION pg_catalog.namelt(pg_catalog.name, pg_catalog.name) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'namelt';
CREATE FUNCTION pg_catalog.namene(pg_catalog.name, pg_catalog.name) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'namene';
CREATE FUNCTION pg_catalog.namenlike(pg_catalog.name, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'namenlike';
CREATE FUNCTION pg_catalog.nameout(pg_catalog.name) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'nameout';
CREATE FUNCTION pg_catalog.namerecv(pg_catalog.internal) RETURNS pg_catalog.name LANGUAGE internal STABLE STRICT AS 'namerecv';
CREATE FUNCTION pg_catalog.nameregexeq(pg_catalog.name, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'nameregexeq';
CREATE FUNCTION pg_catalog.nameregexne(pg_catalog.name, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'nameregexne';
CREATE FUNCTION pg_catalog.namesend(pg_catalog.name) RETURNS pg_catalog.bytea LANGUAGE internal STABLE STRICT AS 'namesend';
CREATE FUNCTION pg_catalog.nb_classify_accum(pg_catalog.nb_classification, pg_catalog._text, pg_catalog.int8, pg_catalog._int8, pg_catalog._int8) RETURNS pg_catalog.nb_classification LANGUAGE internal IMMUTABLE AS 'nb_classify_accum';
CREATE FUNCTION pg_catalog.nb_classify_combine(pg_catalog.nb_classification, pg_catalog.nb_classification) RETURNS pg_catalog.nb_classification LANGUAGE internal IMMUTABLE AS 'nb_classify_combine';
CREATE FUNCTION pg_catalog.nb_classify_final(pg_catalog.nb_classification) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'nb_classify_final';
CREATE FUNCTION pg_catalog.nb_classify_probabilities(pg_catalog.nb_classification) RETURNS pg_catalog._float8 LANGUAGE internal IMMUTABLE STRICT AS 'nb_classify_probabilities';
CREATE FUNCTION pg_catalog.neqjoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'neqjoinsel';
CREATE FUNCTION pg_catalog.neqsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'neqsel';
CREATE FUNCTION pg_catalog.netmask(pg_catalog.inet) RETURNS pg_catalog.inet LANGUAGE internal IMMUTABLE STRICT AS 'network_netmask';
CREATE FUNCTION pg_catalog.network(pg_catalog.inet) RETURNS pg_catalog.cidr LANGUAGE internal IMMUTABLE STRICT AS 'network_network';
CREATE FUNCTION pg_catalog.network_cmp(pg_catalog.inet, pg_catalog.inet) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'network_cmp';
CREATE FUNCTION pg_catalog.network_eq(pg_catalog.inet, pg_catalog.inet) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'network_eq';
CREATE FUNCTION pg_catalog.network_ge(pg_catalog.inet, pg_catalog.inet) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'network_ge';
CREATE FUNCTION pg_catalog.network_gt(pg_catalog.inet, pg_catalog.inet) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'network_gt';
CREATE FUNCTION pg_catalog.network_le(pg_catalog.inet, pg_catalog.inet) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'network_le';
CREATE FUNCTION pg_catalog.network_lt(pg_catalog.inet, pg_catalog.inet) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'network_lt';
CREATE FUNCTION pg_catalog.network_ne(pg_catalog.inet, pg_catalog.inet) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'network_ne';
CREATE FUNCTION pg_catalog.network_sub(pg_catalog.inet, pg_catalog.inet) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'network_sub';
CREATE FUNCTION pg_catalog.network_subeq(pg_catalog.inet, pg_catalog.inet) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'network_subeq';
CREATE FUNCTION pg_catalog.network_sup(pg_catalog.inet, pg_catalog.inet) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'network_sup';
CREATE FUNCTION pg_catalog.network_supeq(pg_catalog.inet, pg_catalog.inet) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'network_supeq';
CREATE FUNCTION pg_catalog.nextval(pg_catalog.regclass) RETURNS pg_catalog.int8 LANGUAGE internal VOLATILE STRICT AS 'nextval_oid';
CREATE FUNCTION pg_catalog.nlikejoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'nlikejoinsel';
CREATE FUNCTION pg_catalog.nlikesel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'nlikesel';
CREATE FUNCTION pg_catalog.nonnullvalue(pg_catalog."any") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE AS 'nonnullvalue';
CREATE FUNCTION pg_catalog.notlike(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'byteanlike';
CREATE FUNCTION pg_catalog.notlike(pg_catalog.name, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'namenlike';
CREATE FUNCTION pg_catalog.notlike(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'textnlike';
CREATE FUNCTION pg_catalog.now() RETURNS pg_catalog.timestamptz LANGUAGE internal STABLE STRICT AS 'now';
CREATE FUNCTION pg_catalog.npoints(pg_catalog.path) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'path_npoints';
CREATE FUNCTION pg_catalog.npoints(pg_catalog.polygon) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'poly_npoints';
CREATE FUNCTION pg_catalog.ntile_final(pg_catalog._int8, pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'ntile_final';
CREATE FUNCTION pg_catalog.ntile_prelim_bigint(pg_catalog.internal, pg_catalog.int8) RETURNS pg_catalog._int8 LANGUAGE internal IMMUTABLE STRICT AS 'ntile_prelim_bigint';
CREATE FUNCTION pg_catalog.ntile_prelim_int(pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog._int8 LANGUAGE internal IMMUTABLE STRICT AS 'ntile_prelim_int';
CREATE FUNCTION pg_catalog.ntile_prelim_numeric(pg_catalog.internal, pg_catalog."numeric") RETURNS pg_catalog._int8 LANGUAGE internal IMMUTABLE STRICT AS 'ntile_prelim_numeric';
CREATE FUNCTION pg_catalog.nullvalue(pg_catalog."any") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE AS 'nullvalue';
CREATE FUNCTION pg_catalog.numeric_abs(pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_abs';
CREATE FUNCTION pg_catalog.numeric_accum(pg_catalog._numeric, pg_catalog."numeric") RETURNS pg_catalog._numeric LANGUAGE internal IMMUTABLE STRICT AS 'numeric_accum';
CREATE FUNCTION pg_catalog.numeric_add(pg_catalog."numeric", pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_add';
CREATE FUNCTION pg_catalog.numeric_amalg(pg_catalog._numeric, pg_catalog._numeric) RETURNS pg_catalog._numeric LANGUAGE internal IMMUTABLE STRICT AS 'numeric_amalg';
CREATE FUNCTION pg_catalog.numeric_avg(pg_catalog.bytea) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_avg';
CREATE FUNCTION pg_catalog.numeric_avg_accum(pg_catalog.bytea, pg_catalog."numeric") RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'numeric_avg_accum';
CREATE FUNCTION pg_catalog.numeric_avg_amalg(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'numeric_avg_amalg';
CREATE FUNCTION pg_catalog.numeric_avg_decum(pg_catalog.bytea, pg_catalog."numeric") RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'numeric_avg_decum';
CREATE FUNCTION pg_catalog.numeric_avg_demalg(pg_catalog.bytea, pg_catalog.bytea) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'numeric_avg_demalg';
CREATE FUNCTION pg_catalog.numeric_cmp(pg_catalog."numeric", pg_catalog."numeric") RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'numeric_cmp';
CREATE FUNCTION pg_catalog.numeric_dec(pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_dec';
CREATE FUNCTION pg_catalog.numeric_decum(pg_catalog._numeric, pg_catalog."numeric") RETURNS pg_catalog._numeric LANGUAGE internal IMMUTABLE STRICT AS 'numeric_decum';
CREATE FUNCTION pg_catalog.numeric_demalg(pg_catalog._numeric, pg_catalog._numeric) RETURNS pg_catalog._numeric LANGUAGE internal IMMUTABLE STRICT AS 'numeric_demalg';
CREATE FUNCTION pg_catalog.numeric_div(pg_catalog."numeric", pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_div';
CREATE FUNCTION pg_catalog.numeric_eq(pg_catalog."numeric", pg_catalog."numeric") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'numeric_eq';
CREATE FUNCTION pg_catalog.numeric_exp(pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_exp';
CREATE FUNCTION pg_catalog.numeric_fac(pg_catalog.int8) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_fac';
CREATE FUNCTION pg_catalog.numeric_ge(pg_catalog."numeric", pg_catalog."numeric") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'numeric_ge';
CREATE FUNCTION pg_catalog.numeric_gt(pg_catalog."numeric", pg_catalog."numeric") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'numeric_gt';
CREATE FUNCTION pg_catalog.numeric_in(pg_catalog.cstring, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_in';
CREATE FUNCTION pg_catalog.numeric_inc(pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_inc';
CREATE FUNCTION pg_catalog.numeric_larger(pg_catalog."numeric", pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_larger';
CREATE FUNCTION pg_catalog.numeric_le(pg_catalog."numeric", pg_catalog."numeric") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'numeric_le';
CREATE FUNCTION pg_catalog.numeric_ln(pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_ln';
CREATE FUNCTION pg_catalog.numeric_log(pg_catalog."numeric", pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_log';
CREATE FUNCTION pg_catalog.numeric_lt(pg_catalog."numeric", pg_catalog."numeric") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'numeric_lt';
CREATE FUNCTION pg_catalog.numeric_mod(pg_catalog."numeric", pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_mod';
CREATE FUNCTION pg_catalog.numeric_mul(pg_catalog."numeric", pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_mul';
CREATE FUNCTION pg_catalog.numeric_ne(pg_catalog."numeric", pg_catalog."numeric") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'numeric_ne';
CREATE FUNCTION pg_catalog.numeric_out(pg_catalog."numeric") RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'numeric_out';
CREATE FUNCTION pg_catalog.numeric_power(pg_catalog."numeric", pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_power';
CREATE FUNCTION pg_catalog.numeric_recv(pg_catalog.internal, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_recv';
CREATE FUNCTION pg_catalog.numeric_send(pg_catalog."numeric") RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'numeric_send';
CREATE FUNCTION pg_catalog.numeric_smaller(pg_catalog."numeric", pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_smaller';
CREATE FUNCTION pg_catalog.numeric_sqrt(pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_sqrt';
CREATE FUNCTION pg_catalog.numeric_stddev_pop(pg_catalog._numeric) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_stddev_pop';
CREATE FUNCTION pg_catalog.numeric_stddev_samp(pg_catalog._numeric) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_stddev_samp';
CREATE FUNCTION pg_catalog.numeric_sub(pg_catalog."numeric", pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_sub';
CREATE FUNCTION pg_catalog.numeric_uminus(pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_uminus';
CREATE FUNCTION pg_catalog.numeric_uplus(pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_uplus';
CREATE FUNCTION pg_catalog.numeric_var_pop(pg_catalog._numeric) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_var_pop';
CREATE FUNCTION pg_catalog.numeric_var_samp(pg_catalog._numeric) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_var_samp';
CREATE FUNCTION pg_catalog.obj_description(pg_catalog.oid) RETURNS pg_catalog.text LANGUAGE sql STABLE STRICT AS 'select null::pg_catalog.text';
CREATE FUNCTION pg_catalog.obj_description(pg_catalog.oid, pg_catalog.name) RETURNS pg_catalog.text LANGUAGE sql STABLE STRICT AS 'select null::pg_catalog.text';
CREATE FUNCTION pg_catalog.octet_length(pg_catalog."bit") RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'bitoctetlength';
CREATE FUNCTION pg_catalog.octet_length(pg_catalog.bpchar) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'bpcharoctetlen';
CREATE FUNCTION pg_catalog.octet_length(pg_catalog.bytea) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'byteaoctetlen';
CREATE FUNCTION pg_catalog.octet_length(pg_catalog.text) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'textoctetlen';
CREATE FUNCTION pg_catalog.oid(pg_catalog.int8) RETURNS pg_catalog.oid LANGUAGE internal IMMUTABLE STRICT AS 'i8tooid';
CREATE FUNCTION pg_catalog.oid(pg_catalog.text) RETURNS pg_catalog.oid LANGUAGE internal IMMUTABLE STRICT AS 'text_oid';
CREATE FUNCTION pg_catalog.oideq(pg_catalog.oid, pg_catalog.oid) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'oideq';
CREATE FUNCTION pg_catalog.oidge(pg_catalog.oid, pg_catalog.oid) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'oidge';
CREATE FUNCTION pg_catalog.oidgt(pg_catalog.oid, pg_catalog.oid) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'oidgt';
CREATE FUNCTION pg_catalog.oidin(pg_catalog.cstring) RETURNS pg_catalog.oid LANGUAGE internal IMMUTABLE STRICT AS 'oidin';
CREATE FUNCTION pg_catalog.oidlarger(pg_catalog.oid, pg_catalog.oid) RETURNS pg_catalog.oid LANGUAGE internal IMMUTABLE STRICT AS 'oidlarger';
CREATE FUNCTION pg_catalog.oidle(pg_catalog.oid, pg_catalog.oid) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'oidle';
CREATE FUNCTION pg_catalog.oidlt(pg_catalog.oid, pg_catalog.oid) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'oidlt';
CREATE FUNCTION pg_catalog.oidne(pg_catalog.oid, pg_catalog.oid) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'oidne';
CREATE FUNCTION pg_catalog.oidnotin(pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'oidnotin';
CREATE FUNCTION pg_catalog.oidout(pg_catalog.oid) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'oidout';
CREATE FUNCTION pg_catalog.oidrecv(pg_catalog.internal) RETURNS pg_catalog.oid LANGUAGE internal IMMUTABLE STRICT AS 'oidrecv';
CREATE FUNCTION pg_catalog.oidsend(pg_catalog.oid) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'oidsend';
CREATE FUNCTION pg_catalog.oidsmaller(pg_catalog.oid, pg_catalog.oid) RETURNS pg_catalog.oid LANGUAGE internal IMMUTABLE STRICT AS 'oidsmaller';
CREATE FUNCTION pg_catalog.oidvectoreq(pg_catalog.oidvector, pg_catalog.oidvector) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'oidvectoreq';
CREATE FUNCTION pg_catalog.oidvectorge(pg_catalog.oidvector, pg_catalog.oidvector) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'oidvectorge';
CREATE FUNCTION pg_catalog.oidvectorgt(pg_catalog.oidvector, pg_catalog.oidvector) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'oidvectorgt';
CREATE FUNCTION pg_catalog.oidvectorin(pg_catalog.cstring) RETURNS pg_catalog.oidvector LANGUAGE internal IMMUTABLE STRICT AS 'oidvectorin';
CREATE FUNCTION pg_catalog.oidvectorle(pg_catalog.oidvector, pg_catalog.oidvector) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'oidvectorle';
CREATE FUNCTION pg_catalog.oidvectorlt(pg_catalog.oidvector, pg_catalog.oidvector) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'oidvectorlt';
CREATE FUNCTION pg_catalog.oidvectorne(pg_catalog.oidvector, pg_catalog.oidvector) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'oidvectorne';
CREATE FUNCTION pg_catalog.oidvectorout(pg_catalog.oidvector) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'oidvectorout';
CREATE FUNCTION pg_catalog.oidvectorrecv(pg_catalog.internal) RETURNS pg_catalog.oidvector LANGUAGE internal IMMUTABLE STRICT AS 'oidvectorrecv';
CREATE FUNCTION pg_catalog.oidvectorsend(pg_catalog.oidvector) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'oidvectorsend';
CREATE FUNCTION pg_catalog.oidvectortypes(pg_catalog.oidvector) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'oidvectortypes';
CREATE FUNCTION pg_catalog.on_pb(pg_catalog.point, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'on_pb';
CREATE FUNCTION pg_catalog.on_pl(pg_catalog.point, pg_catalog.line) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'on_pl';
CREATE FUNCTION pg_catalog.on_ppath(pg_catalog.point, pg_catalog.path) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'on_ppath';
CREATE FUNCTION pg_catalog.on_ps(pg_catalog.point, pg_catalog.lseg) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'on_ps';
CREATE FUNCTION pg_catalog.on_sb(pg_catalog.lseg, pg_catalog.box) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'on_sb';
CREATE FUNCTION pg_catalog.on_sl(pg_catalog.lseg, pg_catalog.line) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'on_sl';
CREATE FUNCTION pg_catalog.opaque_in(pg_catalog.cstring) RETURNS pg_catalog.opaque LANGUAGE internal IMMUTABLE STRICT AS 'opaque_in';
CREATE FUNCTION pg_catalog.opaque_out(pg_catalog.opaque) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'opaque_out';
CREATE FUNCTION pg_catalog.path(pg_catalog.polygon) RETURNS pg_catalog.path LANGUAGE internal IMMUTABLE STRICT AS 'poly_path';
CREATE FUNCTION pg_catalog.path_add(pg_catalog.path, pg_catalog.path) RETURNS pg_catalog.path LANGUAGE internal IMMUTABLE STRICT AS 'path_add';
CREATE FUNCTION pg_catalog.path_add_pt(pg_catalog.path, pg_catalog.point) RETURNS pg_catalog.path LANGUAGE internal IMMUTABLE STRICT AS 'path_add_pt';
CREATE FUNCTION pg_catalog.path_center(pg_catalog.path) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'path_center';
CREATE FUNCTION pg_catalog.path_contain_pt(pg_catalog.path, pg_catalog.point) RETURNS pg_catalog.bool LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog.bool';
CREATE FUNCTION pg_catalog.path_distance(pg_catalog.path, pg_catalog.path) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'path_distance';
CREATE FUNCTION pg_catalog.path_div_pt(pg_catalog.path, pg_catalog.point) RETURNS pg_catalog.path LANGUAGE internal IMMUTABLE STRICT AS 'path_div_pt';
CREATE FUNCTION pg_catalog.path_in(pg_catalog.cstring) RETURNS pg_catalog.path LANGUAGE internal IMMUTABLE STRICT AS 'path_in';
CREATE FUNCTION pg_catalog.path_inter(pg_catalog.path, pg_catalog.path) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'path_inter';
CREATE FUNCTION pg_catalog.path_length(pg_catalog.path) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'path_length';
CREATE FUNCTION pg_catalog.path_mul_pt(pg_catalog.path, pg_catalog.point) RETURNS pg_catalog.path LANGUAGE internal IMMUTABLE STRICT AS 'path_mul_pt';
CREATE FUNCTION pg_catalog.path_n_eq(pg_catalog.path, pg_catalog.path) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'path_n_eq';
CREATE FUNCTION pg_catalog.path_n_ge(pg_catalog.path, pg_catalog.path) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'path_n_ge';
CREATE FUNCTION pg_catalog.path_n_gt(pg_catalog.path, pg_catalog.path) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'path_n_gt';
CREATE FUNCTION pg_catalog.path_n_le(pg_catalog.path, pg_catalog.path) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'path_n_le';
CREATE FUNCTION pg_catalog.path_n_lt(pg_catalog.path, pg_catalog.path) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'path_n_lt';
CREATE FUNCTION pg_catalog.path_npoints(pg_catalog.path) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'path_npoints';
CREATE FUNCTION pg_catalog.path_out(pg_catalog.path) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'path_out';
CREATE FUNCTION pg_catalog.path_recv(pg_catalog.internal) RETURNS pg_catalog.path LANGUAGE internal IMMUTABLE STRICT AS 'path_recv';
CREATE FUNCTION pg_catalog.path_send(pg_catalog.path) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'path_send';
CREATE FUNCTION pg_catalog.path_sub_pt(pg_catalog.path, pg_catalog.point) RETURNS pg_catalog.path LANGUAGE internal IMMUTABLE STRICT AS 'path_sub_pt';
CREATE FUNCTION pg_catalog.pclose(pg_catalog.path) RETURNS pg_catalog.path LANGUAGE internal IMMUTABLE STRICT AS 'path_close';
CREATE FUNCTION pg_catalog.percent_rank_final(pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'percent_rank_final';
CREATE FUNCTION pg_catalog.pg_advisory_lock(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'pg_advisory_lock_int4';
CREATE FUNCTION pg_catalog.pg_advisory_lock(pg_catalog.int8) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'pg_advisory_lock_int8';
CREATE FUNCTION pg_catalog.pg_advisory_lock_shared(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'pg_advisory_lock_shared_int4';
CREATE FUNCTION pg_catalog.pg_advisory_lock_shared(pg_catalog.int8) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'pg_advisory_lock_shared_int8';
CREATE FUNCTION pg_catalog.pg_advisory_unlock(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'pg_advisory_unlock_int4';
CREATE FUNCTION pg_catalog.pg_advisory_unlock(pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'pg_advisory_unlock_int8';
CREATE FUNCTION pg_catalog.pg_advisory_unlock_all() RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'pg_advisory_unlock_all';
CREATE FUNCTION pg_catalog.pg_advisory_unlock_shared(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'pg_advisory_unlock_shared_int4';
CREATE FUNCTION pg_catalog.pg_advisory_unlock_shared(pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'pg_advisory_unlock_shared_int8';
CREATE FUNCTION pg_catalog.pg_backend_pid() RETURNS pg_catalog.int4 LANGUAGE internal STABLE STRICT AS 'pg_backend_pid';
CREATE FUNCTION pg_catalog.pg_cancel_backend(pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'pg_cancel_backend';
CREATE FUNCTION pg_catalog.pg_char_to_encoding(pg_catalog.name) RETURNS pg_catalog.int4 LANGUAGE internal STABLE STRICT AS 'PG_char_to_encoding';
CREATE FUNCTION pg_catalog.pg_client_encoding() RETURNS pg_catalog.name LANGUAGE internal STABLE STRICT AS 'pg_client_encoding';
CREATE FUNCTION pg_catalog.pg_column_size(pg_catalog."any") RETURNS pg_catalog.int4 LANGUAGE internal STABLE STRICT AS 'pg_column_size';
CREATE FUNCTION pg_catalog.pg_conversion_is_visible(pg_catalog.oid) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'pg_conversion_is_visible';
CREATE FUNCTION pg_catalog.pg_current_xlog_insert_location() RETURNS pg_catalog.text LANGUAGE internal VOLATILE STRICT AS 'pg_current_xlog_insert_location';
CREATE FUNCTION pg_catalog.pg_current_xlog_location() RETURNS pg_catalog.text LANGUAGE internal VOLATILE STRICT AS 'pg_current_xlog_location';
CREATE FUNCTION pg_catalog.pg_cursor() RETURNS SETOF pg_catalog.record LANGUAGE internal STABLE STRICT AS 'pg_cursor';
CREATE FUNCTION pg_catalog.pg_database_size(pg_catalog.name) RETURNS pg_catalog.int8 LANGUAGE internal VOLATILE STRICT AS 'pg_database_size_name';
CREATE FUNCTION pg_catalog.pg_database_size(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal VOLATILE STRICT AS 'pg_database_size_oid';
CREATE FUNCTION pg_catalog.pg_encoding_to_char(pg_catalog.int4) RETURNS pg_catalog.name LANGUAGE internal STABLE STRICT AS 'PG_encoding_to_char';
CREATE FUNCTION pg_catalog.pg_file_length(pg_catalog.text) RETURNS pg_catalog.int8 LANGUAGE internal VOLATILE STRICT AS 'pg_file_length';
CREATE FUNCTION pg_catalog.pg_file_read(pg_catalog.text, pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.text LANGUAGE internal VOLATILE STRICT AS 'pg_read_file';
CREATE FUNCTION pg_catalog.pg_file_rename(pg_catalog.text, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'pg_file_rename';
CREATE FUNCTION pg_catalog.pg_file_unlink(pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'pg_file_unlink';
CREATE FUNCTION pg_catalog.pg_file_write(pg_catalog.text, pg_catalog.text, pg_catalog.bool) RETURNS pg_catalog.int8 LANGUAGE internal VOLATILE STRICT AS 'pg_file_write';
CREATE FUNCTION pg_catalog.pg_function_is_visible(pg_catalog.oid) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'pg_function_is_visible';
CREATE FUNCTION pg_catalog.pg_get_constraintdef(pg_catalog.oid) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_get_constraintdef';
CREATE FUNCTION pg_catalog.pg_get_constraintdef(pg_catalog.oid, pg_catalog.bool) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_get_constraintdef_ext';
CREATE FUNCTION pg_catalog.pg_get_expr(pg_catalog.text, pg_catalog.oid) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_get_expr';
CREATE FUNCTION pg_catalog.pg_get_expr(pg_catalog.text, pg_catalog.oid, pg_catalog.bool) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_get_expr_ext';
CREATE FUNCTION pg_catalog.pg_get_indexdef(pg_catalog.oid) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_get_indexdef';
CREATE FUNCTION pg_catalog.pg_get_indexdef(pg_catalog.oid, pg_catalog.int4, pg_catalog.bool) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_get_indexdef_ext';
CREATE FUNCTION pg_catalog.pg_get_keywords(OUT word pg_catalog.text, OUT catcode pg_catalog."char", OUT catdesc pg_catalog.text) RETURNS SETOF pg_catalog.record LANGUAGE internal STABLE STRICT AS 'pg_get_keywords';
CREATE FUNCTION pg_catalog.pg_get_partition_def(pg_catalog.oid) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_get_partition_def';
CREATE FUNCTION pg_catalog.pg_get_partition_def(pg_catalog.oid, pg_catalog.bool) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_get_partition_def_ext';
CREATE FUNCTION pg_catalog.pg_get_partition_def(pg_catalog.oid, pg_catalog.bool, pg_catalog.bool) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_get_partition_def_ext2';
CREATE FUNCTION pg_catalog.pg_get_partition_rule_def(pg_catalog.oid) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_get_partition_rule_def';
CREATE FUNCTION pg_catalog.pg_get_partition_rule_def(pg_catalog.oid, pg_catalog.bool) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_get_partition_rule_def_ext';
CREATE FUNCTION pg_catalog.pg_get_partition_template_def(pg_catalog.oid, pg_catalog.bool, pg_catalog.bool) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_get_partition_template_def';
CREATE FUNCTION pg_catalog.pg_get_ruledef(pg_catalog.oid) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_get_ruledef';
CREATE FUNCTION pg_catalog.pg_get_ruledef(pg_catalog.oid, pg_catalog.bool) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_get_ruledef_ext';
CREATE FUNCTION pg_catalog.pg_get_serial_sequence(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_get_serial_sequence';
CREATE FUNCTION pg_catalog.pg_get_triggerdef(pg_catalog.oid) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_get_triggerdef';
CREATE FUNCTION pg_catalog.pg_get_userbyid(pg_catalog.oid) RETURNS pg_catalog.name LANGUAGE internal STABLE STRICT AS 'pg_get_userbyid';
CREATE FUNCTION pg_catalog.pg_get_viewdef(pg_catalog.oid) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_get_viewdef';
CREATE FUNCTION pg_catalog.pg_get_viewdef(pg_catalog.oid, pg_catalog.bool) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_get_viewdef_ext';
CREATE FUNCTION pg_catalog.pg_get_viewdef(pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_get_viewdef_name';
CREATE FUNCTION pg_catalog.pg_get_viewdef(pg_catalog.text, pg_catalog.bool) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_get_viewdef_name_ext';
CREATE FUNCTION pg_catalog.pg_has_role(pg_catalog.name, pg_catalog.name, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'pg_has_role_name_name';
CREATE FUNCTION pg_catalog.pg_has_role(pg_catalog.name, pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'pg_has_role_name_id';
CREATE FUNCTION pg_catalog.pg_has_role(pg_catalog.name, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'pg_has_role_name';
CREATE FUNCTION pg_catalog.pg_has_role(pg_catalog.oid, pg_catalog.name, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'pg_has_role_id_name';
CREATE FUNCTION pg_catalog.pg_has_role(pg_catalog.oid, pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'pg_has_role_id_id';
CREATE FUNCTION pg_catalog.pg_has_role(pg_catalog.oid, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'pg_has_role_id';
CREATE FUNCTION pg_catalog.pg_highest_oid() RETURNS pg_catalog.oid LANGUAGE internal VOLATILE STRICT AS 'pg_highest_oid';
CREATE FUNCTION pg_catalog.pg_is_other_temp_schema(pg_catalog.oid) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'pg_is_other_temp_schema';
CREATE FUNCTION pg_catalog.pg_lock_status() RETURNS SETOF pg_catalog.record LANGUAGE internal VOLATILE STRICT AS 'pg_lock_status';
CREATE FUNCTION pg_catalog.pg_logdir_ls() RETURNS SETOF pg_catalog.record LANGUAGE internal VOLATILE STRICT AS 'pg_logdir_ls';
CREATE FUNCTION pg_catalog.pg_logfile_rotate() RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'pg_rotate_logfile';
CREATE FUNCTION pg_catalog.pg_ls_dir(pg_catalog.text) RETURNS SETOF pg_catalog.text LANGUAGE internal VOLATILE STRICT AS 'pg_ls_dir';
CREATE FUNCTION pg_catalog.pg_my_temp_schema() RETURNS pg_catalog.oid LANGUAGE internal STABLE STRICT AS 'pg_my_temp_schema';
CREATE FUNCTION pg_catalog.pg_objname_to_oid(pg_catalog.text) RETURNS pg_catalog.oid LANGUAGE internal IMMUTABLE STRICT AS 'pg_objname_to_oid';
CREATE FUNCTION pg_catalog.pg_opclass_is_visible(pg_catalog.oid) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'pg_opclass_is_visible';
CREATE FUNCTION pg_catalog.pg_operator_is_visible(pg_catalog.oid) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'pg_operator_is_visible';
CREATE FUNCTION pg_catalog.pg_options_to_table(IN options_array pg_catalog._text, OUT option_name pg_catalog.text, OUT option_value pg_catalog.text) RETURNS SETOF pg_catalog.record LANGUAGE internal STABLE STRICT AS 'pg_options_to_table';
CREATE FUNCTION pg_catalog.pg_partition_oid_finalfn(pg_catalog.internal) RETURNS pg_catalog._oid LANGUAGE internal IMMUTABLE AS 'pg_partition_oid_finalfn';
CREATE FUNCTION pg_catalog.pg_partition_oid_transfn(pg_catalog.internal, pg_catalog.oid, pg_catalog.record) RETURNS pg_catalog.internal LANGUAGE internal IMMUTABLE AS 'pg_partition_oid_transfn';
CREATE FUNCTION pg_catalog.pg_postmaster_start_time() RETURNS pg_catalog.timestamptz LANGUAGE internal STABLE STRICT AS 'pgsql_postmaster_start_time';
CREATE FUNCTION pg_catalog.pg_prepared_statement() RETURNS SETOF pg_catalog.record LANGUAGE internal STABLE STRICT AS 'pg_prepared_statement';
CREATE FUNCTION pg_catalog.pg_prepared_xact() RETURNS SETOF pg_catalog.record LANGUAGE internal VOLATILE STRICT AS 'pg_prepared_xact';
CREATE FUNCTION pg_catalog.pg_read_file(pg_catalog.text, pg_catalog.int8, pg_catalog.int8) RETURNS pg_catalog.text LANGUAGE internal VOLATILE STRICT AS 'pg_read_file';
CREATE FUNCTION pg_catalog.pg_relation_size(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal VOLATILE STRICT AS 'pg_relation_size_oid';
CREATE FUNCTION pg_catalog.pg_relation_size(pg_catalog.text) RETURNS pg_catalog.int8 LANGUAGE internal VOLATILE STRICT AS 'pg_relation_size_name';
CREATE FUNCTION pg_catalog.pg_reload_conf() RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'pg_reload_conf';
CREATE FUNCTION pg_catalog.pg_renice_session(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal VOLATILE STRICT AS 'pg_renice_session';
CREATE FUNCTION pg_catalog.pg_resqueue_status() RETURNS SETOF pg_catalog.record LANGUAGE internal VOLATILE STRICT AS 'pg_resqueue_status';
CREATE FUNCTION pg_catalog.pg_resqueue_status_kv() RETURNS SETOF pg_catalog.record LANGUAGE internal VOLATILE STRICT AS 'pg_resqueue_status_kv';
CREATE FUNCTION pg_catalog.pg_rotate_logfile() RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'pg_rotate_logfile';
CREATE FUNCTION pg_catalog.pg_show_all_settings() RETURNS SETOF pg_catalog.record LANGUAGE internal STABLE STRICT AS 'show_all_settings';
CREATE FUNCTION pg_catalog.pg_size_pretty(pg_catalog.int8) RETURNS pg_catalog.text LANGUAGE internal VOLATILE STRICT AS 'pg_size_pretty';
CREATE FUNCTION pg_catalog.pg_sleep(pg_catalog.float8) RETURNS pg_catalog.void LANGUAGE internal VOLATILE STRICT AS 'pg_sleep';
CREATE FUNCTION pg_catalog.pg_start_backup(pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal VOLATILE STRICT AS 'pg_start_backup';
CREATE FUNCTION pg_catalog.pg_stat_file(IN filename pg_catalog.text, OUT size pg_catalog.int8, OUT access pg_catalog.timestamptz, OUT modification pg_catalog.timestamptz, OUT change pg_catalog.timestamptz, OUT creation pg_catalog.timestamptz, OUT isdir pg_catalog.bool) RETURNS pg_catalog.record LANGUAGE internal VOLATILE STRICT AS 'pg_stat_file';
CREATE FUNCTION pg_catalog.pg_stat_get_activity(IN pid pg_catalog.int4, OUT datid pg_catalog.oid, OUT procpid pg_catalog.int4, OUT usesysid pg_catalog.oid, OUT application_name pg_catalog.text, OUT current_query pg_catalog.text, OUT waiting pg_catalog.bool, OUT xact_start pg_catalog.timestamptz, OUT query_start pg_catalog.timestamptz, OUT backend_start pg_catalog.timestamptz, OUT client_addr pg_catalog.inet, OUT client_port pg_catalog.int4, OUT sess_id pg_catalog.int4) RETURNS SETOF pg_catalog.record LANGUAGE internal STABLE AS 'pg_stat_get_activity';
CREATE FUNCTION pg_catalog.pg_stat_get_backend_activity(pg_catalog.int4) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pg_stat_get_backend_activity';
CREATE FUNCTION pg_catalog.pg_stat_get_backend_activity_start(pg_catalog.int4) RETURNS pg_catalog.timestamptz LANGUAGE internal STABLE STRICT AS 'pg_stat_get_backend_activity_start';
CREATE FUNCTION pg_catalog.pg_stat_get_backend_client_addr(pg_catalog.int4) RETURNS pg_catalog.inet LANGUAGE internal STABLE STRICT AS 'pg_stat_get_backend_client_addr';
CREATE FUNCTION pg_catalog.pg_stat_get_backend_client_port(pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_backend_client_port';
CREATE FUNCTION pg_catalog.pg_stat_get_backend_dbid(pg_catalog.int4) RETURNS pg_catalog.oid LANGUAGE internal STABLE STRICT AS 'pg_stat_get_backend_dbid';
CREATE FUNCTION pg_catalog.pg_stat_get_backend_idset() RETURNS SETOF pg_catalog.int4 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_backend_idset';
CREATE FUNCTION pg_catalog.pg_stat_get_backend_pid(pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_backend_pid';
CREATE FUNCTION pg_catalog.pg_stat_get_backend_session_id(pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_backend_session_id';
CREATE FUNCTION pg_catalog.pg_stat_get_backend_start(pg_catalog.int4) RETURNS pg_catalog.timestamptz LANGUAGE internal STABLE STRICT AS 'pg_stat_get_backend_start';
CREATE FUNCTION pg_catalog.pg_stat_get_backend_userid(pg_catalog.int4) RETURNS pg_catalog.oid LANGUAGE internal STABLE STRICT AS 'pg_stat_get_backend_userid';
CREATE FUNCTION pg_catalog.pg_stat_get_backend_waiting(pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'pg_stat_get_backend_waiting';
CREATE FUNCTION pg_catalog.pg_stat_get_blocks_fetched(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_blocks_fetched';
CREATE FUNCTION pg_catalog.pg_stat_get_blocks_hit(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_blocks_hit';
CREATE FUNCTION pg_catalog.pg_stat_get_db_blocks_fetched(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_db_blocks_fetched';
CREATE FUNCTION pg_catalog.pg_stat_get_db_blocks_hit(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_db_blocks_hit';
CREATE FUNCTION pg_catalog.pg_stat_get_db_numbackends(pg_catalog.oid) RETURNS pg_catalog.int4 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_db_numbackends';
CREATE FUNCTION pg_catalog.pg_stat_get_db_xact_commit(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_db_xact_commit';
CREATE FUNCTION pg_catalog.pg_stat_get_db_xact_rollback(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_db_xact_rollback';
CREATE FUNCTION pg_catalog.pg_stat_get_last_analyze_time(pg_catalog.oid) RETURNS pg_catalog.timestamptz LANGUAGE internal STABLE STRICT AS 'pg_stat_get_last_analyze_time';
CREATE FUNCTION pg_catalog.pg_stat_get_last_autoanalyze_time(pg_catalog.oid) RETURNS pg_catalog.timestamptz LANGUAGE internal STABLE STRICT AS 'pg_stat_get_last_autoanalyze_time';
CREATE FUNCTION pg_catalog.pg_stat_get_last_autovacuum_time(pg_catalog.oid) RETURNS pg_catalog.timestamptz LANGUAGE internal STABLE STRICT AS 'pg_stat_get_last_autovacuum_time';
CREATE FUNCTION pg_catalog.pg_stat_get_last_vacuum_time(pg_catalog.oid) RETURNS pg_catalog.timestamptz LANGUAGE internal STABLE STRICT AS 'pg_stat_get_last_vacuum_time';
CREATE FUNCTION pg_catalog.pg_stat_get_numscans(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_numscans';
CREATE FUNCTION pg_catalog.pg_stat_get_queue_elapsed_exec(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_queue_elapsed_exec';
CREATE FUNCTION pg_catalog.pg_stat_get_queue_elapsed_wait(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_queue_elapsed_wait';
CREATE FUNCTION pg_catalog.pg_stat_get_queue_num_exec(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_queue_num_exec';
CREATE FUNCTION pg_catalog.pg_stat_get_queue_num_wait(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_queue_num_wait';
CREATE FUNCTION pg_catalog.pg_stat_get_tuples_deleted(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_tuples_deleted';
CREATE FUNCTION pg_catalog.pg_stat_get_tuples_fetched(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_tuples_fetched';
CREATE FUNCTION pg_catalog.pg_stat_get_tuples_inserted(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_tuples_inserted';
CREATE FUNCTION pg_catalog.pg_stat_get_tuples_returned(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_tuples_returned';
CREATE FUNCTION pg_catalog.pg_stat_get_tuples_updated(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal STABLE STRICT AS 'pg_stat_get_tuples_updated';
CREATE FUNCTION pg_catalog.pg_stat_reset() RETURNS pg_catalog.bool LANGUAGE internal VOLATILE AS 'pg_stat_reset';
CREATE FUNCTION pg_catalog.pg_stop_backup() RETURNS pg_catalog.text LANGUAGE internal VOLATILE STRICT AS 'pg_stop_backup';
CREATE FUNCTION pg_catalog.pg_switch_xlog() RETURNS pg_catalog.text LANGUAGE internal VOLATILE STRICT AS 'pg_switch_xlog';
CREATE FUNCTION pg_catalog.pg_table_is_visible(pg_catalog.oid) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'pg_table_is_visible';
CREATE FUNCTION pg_catalog.pg_tablespace_databases(pg_catalog.oid) RETURNS SETOF pg_catalog.oid LANGUAGE internal STABLE STRICT AS 'pg_tablespace_databases';
CREATE FUNCTION pg_catalog.pg_tablespace_size(pg_catalog.name) RETURNS pg_catalog.int8 LANGUAGE internal VOLATILE STRICT AS 'pg_tablespace_size_name';
CREATE FUNCTION pg_catalog.pg_tablespace_size(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal VOLATILE STRICT AS 'pg_tablespace_size_oid';
CREATE FUNCTION pg_catalog.pg_terminate_backend(pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'pg_terminate_backend';
CREATE FUNCTION pg_catalog.pg_timezone_abbrevs(OUT abbrev pg_catalog.text, OUT utc_offset pg_catalog."interval", OUT is_dst pg_catalog.bool) RETURNS SETOF pg_catalog.record LANGUAGE internal STABLE STRICT AS 'pg_timezone_abbrevs';
CREATE FUNCTION pg_catalog.pg_timezone_names(OUT name pg_catalog.text, OUT abbrev pg_catalog.text, OUT utc_offset pg_catalog."interval", OUT is_dst pg_catalog.bool) RETURNS SETOF pg_catalog.record LANGUAGE internal STABLE STRICT AS 'pg_timezone_names';
CREATE FUNCTION pg_catalog.pg_total_relation_size(pg_catalog.oid) RETURNS pg_catalog.int8 LANGUAGE internal VOLATILE STRICT AS 'pg_total_relation_size_oid';
CREATE FUNCTION pg_catalog.pg_total_relation_size(pg_catalog.text) RETURNS pg_catalog.int8 LANGUAGE internal VOLATILE STRICT AS 'pg_total_relation_size_name';
CREATE FUNCTION pg_catalog.pg_try_advisory_lock(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'pg_try_advisory_lock_int4';
CREATE FUNCTION pg_catalog.pg_try_advisory_lock(pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'pg_try_advisory_lock_int8';
CREATE FUNCTION pg_catalog.pg_try_advisory_lock_shared(pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'pg_try_advisory_lock_shared_int4';
CREATE FUNCTION pg_catalog.pg_try_advisory_lock_shared(pg_catalog.int8) RETURNS pg_catalog.bool LANGUAGE internal VOLATILE STRICT AS 'pg_try_advisory_lock_shared_int8';
CREATE FUNCTION pg_catalog.pg_type_is_visible(pg_catalog.oid) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'pg_type_is_visible';
CREATE FUNCTION pg_catalog.pg_typeof(pg_catalog."any") RETURNS pg_catalog.regtype LANGUAGE internal STABLE AS 'pg_typeof';
CREATE FUNCTION pg_catalog.pg_xlogfile_name(pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'pg_xlogfile_name';
CREATE FUNCTION pg_catalog.pg_xlogfile_name_offset(IN wal_location pg_catalog.text, OUT file_name pg_catalog.text, OUT file_offset pg_catalog.int4) RETURNS pg_catalog.record LANGUAGE internal IMMUTABLE STRICT AS 'pg_xlogfile_name_offset';
CREATE FUNCTION pg_catalog.pi() RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dpi';
CREATE FUNCTION pg_catalog.pinv(pg_catalog._float8) RETURNS pg_catalog._float8 LANGUAGE internal IMMUTABLE STRICT AS 'pseudoinverse';
CREATE FUNCTION pg_catalog.plpgsql_call_handler() RETURNS pg_catalog.language_handler LANGUAGE c VOLATILE AS '$libdir/plpgsql', 'plpgsql_call_handler';
CREATE FUNCTION pg_catalog.plpgsql_validator(pg_catalog.oid) RETURNS pg_catalog.void LANGUAGE c IMMUTABLE AS '$libdir/plpgsql', 'plpgsql_validator';
CREATE FUNCTION pg_catalog.point(pg_catalog.box) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'box_center';
CREATE FUNCTION pg_catalog.point(pg_catalog.circle) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'circle_center';
CREATE FUNCTION pg_catalog.point(pg_catalog.float8, pg_catalog.float8) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'construct_point';
CREATE FUNCTION pg_catalog.point(pg_catalog.lseg) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'lseg_center';
CREATE FUNCTION pg_catalog.point(pg_catalog.path) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'path_center';
CREATE FUNCTION pg_catalog.point(pg_catalog.polygon) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'poly_center';
CREATE FUNCTION pg_catalog.point_above(pg_catalog.point, pg_catalog.point) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'point_above';
CREATE FUNCTION pg_catalog.point_add(pg_catalog.point, pg_catalog.point) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'point_add';
CREATE FUNCTION pg_catalog.point_below(pg_catalog.point, pg_catalog.point) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'point_below';
CREATE FUNCTION pg_catalog.point_distance(pg_catalog.point, pg_catalog.point) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'point_distance';
CREATE FUNCTION pg_catalog.point_div(pg_catalog.point, pg_catalog.point) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'point_div';
CREATE FUNCTION pg_catalog.point_eq(pg_catalog.point, pg_catalog.point) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'point_eq';
CREATE FUNCTION pg_catalog.point_horiz(pg_catalog.point, pg_catalog.point) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'point_horiz';
CREATE FUNCTION pg_catalog.point_in(pg_catalog.cstring) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'point_in';
CREATE FUNCTION pg_catalog.point_left(pg_catalog.point, pg_catalog.point) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'point_left';
CREATE FUNCTION pg_catalog.point_mul(pg_catalog.point, pg_catalog.point) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'point_mul';
CREATE FUNCTION pg_catalog.point_ne(pg_catalog.point, pg_catalog.point) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'point_ne';
CREATE FUNCTION pg_catalog.point_out(pg_catalog.point) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'point_out';
CREATE FUNCTION pg_catalog.point_recv(pg_catalog.internal) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'point_recv';
CREATE FUNCTION pg_catalog.point_right(pg_catalog.point, pg_catalog.point) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'point_right';
CREATE FUNCTION pg_catalog.point_send(pg_catalog.point) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'point_send';
CREATE FUNCTION pg_catalog.point_sub(pg_catalog.point, pg_catalog.point) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'point_sub';
CREATE FUNCTION pg_catalog.point_vert(pg_catalog.point, pg_catalog.point) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'point_vert';
CREATE FUNCTION pg_catalog.poly_above(pg_catalog.polygon, pg_catalog.polygon) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'poly_above';
CREATE FUNCTION pg_catalog.poly_below(pg_catalog.polygon, pg_catalog.polygon) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'poly_below';
CREATE FUNCTION pg_catalog.poly_center(pg_catalog.polygon) RETURNS pg_catalog.point LANGUAGE internal IMMUTABLE STRICT AS 'poly_center';
CREATE FUNCTION pg_catalog.poly_contain(pg_catalog.polygon, pg_catalog.polygon) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'poly_contain';
CREATE FUNCTION pg_catalog.poly_contain_pt(pg_catalog.polygon, pg_catalog.point) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'poly_contain_pt';
CREATE FUNCTION pg_catalog.poly_contained(pg_catalog.polygon, pg_catalog.polygon) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'poly_contained';
CREATE FUNCTION pg_catalog.poly_distance(pg_catalog.polygon, pg_catalog.polygon) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'poly_distance';
CREATE FUNCTION pg_catalog.poly_in(pg_catalog.cstring) RETURNS pg_catalog.polygon LANGUAGE internal IMMUTABLE STRICT AS 'poly_in';
CREATE FUNCTION pg_catalog.poly_left(pg_catalog.polygon, pg_catalog.polygon) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'poly_left';
CREATE FUNCTION pg_catalog.poly_npoints(pg_catalog.polygon) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'poly_npoints';
CREATE FUNCTION pg_catalog.poly_out(pg_catalog.polygon) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'poly_out';
CREATE FUNCTION pg_catalog.poly_overabove(pg_catalog.polygon, pg_catalog.polygon) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'poly_overabove';
CREATE FUNCTION pg_catalog.poly_overbelow(pg_catalog.polygon, pg_catalog.polygon) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'poly_overbelow';
CREATE FUNCTION pg_catalog.poly_overlap(pg_catalog.polygon, pg_catalog.polygon) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'poly_overlap';
CREATE FUNCTION pg_catalog.poly_overleft(pg_catalog.polygon, pg_catalog.polygon) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'poly_overleft';
CREATE FUNCTION pg_catalog.poly_overright(pg_catalog.polygon, pg_catalog.polygon) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'poly_overright';
CREATE FUNCTION pg_catalog.poly_recv(pg_catalog.internal) RETURNS pg_catalog.polygon LANGUAGE internal IMMUTABLE STRICT AS 'poly_recv';
CREATE FUNCTION pg_catalog.poly_right(pg_catalog.polygon, pg_catalog.polygon) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'poly_right';
CREATE FUNCTION pg_catalog.poly_same(pg_catalog.polygon, pg_catalog.polygon) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'poly_same';
CREATE FUNCTION pg_catalog.poly_send(pg_catalog.polygon) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'poly_send';
CREATE FUNCTION pg_catalog.polygon(pg_catalog.box) RETURNS pg_catalog.polygon LANGUAGE internal IMMUTABLE STRICT AS 'box_poly';
CREATE FUNCTION pg_catalog.polygon(pg_catalog.circle) RETURNS pg_catalog.polygon LANGUAGE sql IMMUTABLE STRICT AS $$ SELECT null::pg_catalog.polygon$$;
CREATE FUNCTION pg_catalog.polygon(pg_catalog.int4, pg_catalog.circle) RETURNS pg_catalog.polygon LANGUAGE internal IMMUTABLE STRICT AS 'circle_poly';
CREATE FUNCTION pg_catalog.polygon(pg_catalog.path) RETURNS pg_catalog.polygon LANGUAGE internal IMMUTABLE STRICT AS 'path_poly';
CREATE FUNCTION pg_catalog.popen(pg_catalog.path) RETURNS pg_catalog.path LANGUAGE internal IMMUTABLE STRICT AS 'path_open';
CREATE FUNCTION pg_catalog.positionjoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'positionjoinsel';
CREATE FUNCTION pg_catalog.positionsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'positionsel';
CREATE FUNCTION pg_catalog.pow(pg_catalog."numeric", pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_power';
CREATE FUNCTION pg_catalog.pow(pg_catalog.float8, pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dpow';
CREATE FUNCTION pg_catalog.power(pg_catalog."numeric", pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_power';
CREATE FUNCTION pg_catalog.power(pg_catalog.float8, pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dpow';
CREATE FUNCTION pg_catalog.pt_contained_circle(pg_catalog.point, pg_catalog.circle) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'pt_contained_circle';
CREATE FUNCTION pg_catalog.pt_contained_poly(pg_catalog.point, pg_catalog.polygon) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'pt_contained_poly';
CREATE FUNCTION pg_catalog.quote_ident(pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'quote_ident';
CREATE FUNCTION pg_catalog.quote_literal(pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'quote_literal';
CREATE FUNCTION pg_catalog.radians(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'radians';
CREATE FUNCTION pg_catalog.radius(pg_catalog.circle) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'circle_radius';
CREATE FUNCTION pg_catalog.random() RETURNS pg_catalog.float8 LANGUAGE internal VOLATILE STRICT AS 'drandom';
CREATE FUNCTION pg_catalog.rank_immed(pg_catalog.internal) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'rank_immed';
CREATE FUNCTION pg_catalog.record_in(pg_catalog.cstring, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog.record LANGUAGE internal VOLATILE STRICT AS 'record_in';
CREATE FUNCTION pg_catalog.record_out(pg_catalog.record) RETURNS pg_catalog.cstring LANGUAGE internal VOLATILE STRICT AS 'record_out';
CREATE FUNCTION pg_catalog.record_recv(pg_catalog.internal, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog.record LANGUAGE internal VOLATILE STRICT AS 'record_recv';
CREATE FUNCTION pg_catalog.record_send(pg_catalog.record) RETURNS pg_catalog.bytea LANGUAGE internal VOLATILE STRICT AS 'record_send';
CREATE FUNCTION pg_catalog.regclass(pg_catalog.text) RETURNS pg_catalog.regclass LANGUAGE internal STABLE STRICT AS 'text_regclass';
CREATE FUNCTION pg_catalog.regclassin(pg_catalog.cstring) RETURNS pg_catalog.regclass LANGUAGE internal STABLE STRICT AS 'regclassin';
CREATE FUNCTION pg_catalog.regclassout(pg_catalog.regclass) RETURNS pg_catalog.cstring LANGUAGE internal STABLE STRICT AS 'regclassout';
CREATE FUNCTION pg_catalog.regclassrecv(pg_catalog.internal) RETURNS pg_catalog.regclass LANGUAGE internal IMMUTABLE STRICT AS 'regclassrecv';
CREATE FUNCTION pg_catalog.regclasssend(pg_catalog.regclass) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'regclasssend';
CREATE FUNCTION pg_catalog.regexeqjoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'regexeqjoinsel';
CREATE FUNCTION pg_catalog.regexeqsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'regexeqsel';
CREATE FUNCTION pg_catalog.regexnejoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'regexnejoinsel';
CREATE FUNCTION pg_catalog.regexnesel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'regexnesel';
CREATE FUNCTION pg_catalog.regexp_matches(pg_catalog.text, pg_catalog.text) RETURNS SETOF pg_catalog._text LANGUAGE internal IMMUTABLE STRICT AS 'regexp_matches_no_flags';
CREATE FUNCTION pg_catalog.regexp_matches(pg_catalog.text, pg_catalog.text, pg_catalog.text) RETURNS SETOF pg_catalog._text LANGUAGE internal IMMUTABLE STRICT AS 'regexp_matches';
CREATE FUNCTION pg_catalog.regexp_replace(pg_catalog.text, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'textregexreplace_noopt';
CREATE FUNCTION pg_catalog.regexp_replace(pg_catalog.text, pg_catalog.text, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'textregexreplace';
CREATE FUNCTION pg_catalog.regexp_split_to_array(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog._text LANGUAGE internal IMMUTABLE STRICT AS 'regexp_split_to_array_no_flags';
CREATE FUNCTION pg_catalog.regexp_split_to_array(pg_catalog.text, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog._text LANGUAGE internal IMMUTABLE STRICT AS 'regexp_split_to_array';
CREATE FUNCTION pg_catalog.regexp_split_to_table(pg_catalog.text, pg_catalog.text) RETURNS SETOF pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'regexp_split_to_table_no_flags';
CREATE FUNCTION pg_catalog.regexp_split_to_table(pg_catalog.text, pg_catalog.text, pg_catalog.text) RETURNS SETOF pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'regexp_split_to_table';
CREATE FUNCTION pg_catalog.regoperatorin(pg_catalog.cstring) RETURNS pg_catalog.regoperator LANGUAGE internal STABLE STRICT AS 'regoperatorin';
CREATE FUNCTION pg_catalog.regoperatorout(pg_catalog.regoperator) RETURNS pg_catalog.cstring LANGUAGE internal STABLE STRICT AS 'regoperatorout';
CREATE FUNCTION pg_catalog.regoperatorrecv(pg_catalog.internal) RETURNS pg_catalog.regoperator LANGUAGE internal IMMUTABLE STRICT AS 'regoperatorrecv';
CREATE FUNCTION pg_catalog.regoperatorsend(pg_catalog.regoperator) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'regoperatorsend';
CREATE FUNCTION pg_catalog.regoperin(pg_catalog.cstring) RETURNS pg_catalog.regoper LANGUAGE internal STABLE STRICT AS 'regoperin';
CREATE FUNCTION pg_catalog.regoperout(pg_catalog.regoper) RETURNS pg_catalog.cstring LANGUAGE internal STABLE STRICT AS 'regoperout';
CREATE FUNCTION pg_catalog.regoperrecv(pg_catalog.internal) RETURNS pg_catalog.regoper LANGUAGE internal IMMUTABLE STRICT AS 'regoperrecv';
CREATE FUNCTION pg_catalog.regopersend(pg_catalog.regoper) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'regopersend';
CREATE FUNCTION pg_catalog.regprocedurein(pg_catalog.cstring) RETURNS pg_catalog.regprocedure LANGUAGE internal STABLE STRICT AS 'regprocedurein';
CREATE FUNCTION pg_catalog.regprocedureout(pg_catalog.regprocedure) RETURNS pg_catalog.cstring LANGUAGE internal STABLE STRICT AS 'regprocedureout';
CREATE FUNCTION pg_catalog.regprocedurerecv(pg_catalog.internal) RETURNS pg_catalog.regprocedure LANGUAGE internal IMMUTABLE STRICT AS 'regprocedurerecv';
CREATE FUNCTION pg_catalog.regproceduresend(pg_catalog.regprocedure) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'regproceduresend';
CREATE FUNCTION pg_catalog.regprocin(pg_catalog.cstring) RETURNS pg_catalog.regproc LANGUAGE internal STABLE STRICT AS 'regprocin';
CREATE FUNCTION pg_catalog.regprocout(pg_catalog.regproc) RETURNS pg_catalog.cstring LANGUAGE internal STABLE STRICT AS 'regprocout';
CREATE FUNCTION pg_catalog.regprocrecv(pg_catalog.internal) RETURNS pg_catalog.regproc LANGUAGE internal IMMUTABLE STRICT AS 'regprocrecv';
CREATE FUNCTION pg_catalog.regprocsend(pg_catalog.regproc) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'regprocsend';
CREATE FUNCTION pg_catalog.regtypein(pg_catalog.cstring) RETURNS pg_catalog.regtype LANGUAGE internal STABLE STRICT AS 'regtypein';
CREATE FUNCTION pg_catalog.regtypeout(pg_catalog.regtype) RETURNS pg_catalog.cstring LANGUAGE internal STABLE STRICT AS 'regtypeout';
CREATE FUNCTION pg_catalog.regtyperecv(pg_catalog.internal) RETURNS pg_catalog.regtype LANGUAGE internal IMMUTABLE STRICT AS 'regtyperecv';
CREATE FUNCTION pg_catalog.regtypesend(pg_catalog.regtype) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'regtypesend';
CREATE FUNCTION pg_catalog.reltime(pg_catalog."interval") RETURNS pg_catalog.reltime LANGUAGE internal IMMUTABLE STRICT AS 'interval_reltime';
CREATE FUNCTION pg_catalog.reltimeeq(pg_catalog.reltime, pg_catalog.reltime) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'reltimeeq';
CREATE FUNCTION pg_catalog.reltimege(pg_catalog.reltime, pg_catalog.reltime) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'reltimege';
CREATE FUNCTION pg_catalog.reltimegt(pg_catalog.reltime, pg_catalog.reltime) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'reltimegt';
CREATE FUNCTION pg_catalog.reltimein(pg_catalog.cstring) RETURNS pg_catalog.reltime LANGUAGE internal STABLE STRICT AS 'reltimein';
CREATE FUNCTION pg_catalog.reltimele(pg_catalog.reltime, pg_catalog.reltime) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'reltimele';
CREATE FUNCTION pg_catalog.reltimelt(pg_catalog.reltime, pg_catalog.reltime) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'reltimelt';
CREATE FUNCTION pg_catalog.reltimene(pg_catalog.reltime, pg_catalog.reltime) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'reltimene';
CREATE FUNCTION pg_catalog.reltimeout(pg_catalog.reltime) RETURNS pg_catalog.cstring LANGUAGE internal STABLE STRICT AS 'reltimeout';
CREATE FUNCTION pg_catalog.reltimerecv(pg_catalog.internal) RETURNS pg_catalog.reltime LANGUAGE internal IMMUTABLE STRICT AS 'reltimerecv';
CREATE FUNCTION pg_catalog.reltimesend(pg_catalog.reltime) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'reltimesend';
CREATE FUNCTION pg_catalog.repeat(pg_catalog.text, pg_catalog.int4) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'repeat';
CREATE FUNCTION pg_catalog.replace(pg_catalog.text, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'replace_text';
CREATE FUNCTION pg_catalog.round(pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog."numeric"';
CREATE FUNCTION pg_catalog.round(pg_catalog."numeric", pg_catalog.int4) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_round';
CREATE FUNCTION pg_catalog.round(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dround';
CREATE FUNCTION pg_catalog.row_number_immed(pg_catalog.internal) RETURNS pg_catalog.int8 LANGUAGE internal IMMUTABLE STRICT AS 'row_number_immed';
CREATE FUNCTION pg_catalog.rpad(pg_catalog.text, pg_catalog.int4) RETURNS pg_catalog.text LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog.text';
CREATE FUNCTION pg_catalog.rpad(pg_catalog.text, pg_catalog.int4, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'rpad';
CREATE FUNCTION pg_catalog.rtrim(pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'rtrim1';
CREATE FUNCTION pg_catalog.rtrim(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'rtrim';
CREATE FUNCTION pg_catalog.scalargtjoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'scalargtjoinsel';
CREATE FUNCTION pg_catalog.scalargtsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'scalargtsel';
CREATE FUNCTION pg_catalog.scalarltjoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'scalarltjoinsel';
CREATE FUNCTION pg_catalog.scalarltsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'scalarltsel';
CREATE FUNCTION pg_catalog.set_bit(pg_catalog.bytea, pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'byteaSetBit';
CREATE FUNCTION pg_catalog.set_byte(pg_catalog.bytea, pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'byteaSetByte';
CREATE FUNCTION pg_catalog.set_config(pg_catalog.text, pg_catalog.text, pg_catalog.bool) RETURNS pg_catalog.text LANGUAGE internal VOLATILE AS 'set_config_by_name';
CREATE FUNCTION pg_catalog.set_masklen(pg_catalog.cidr, pg_catalog.int4) RETURNS pg_catalog.cidr LANGUAGE internal IMMUTABLE STRICT AS 'cidr_set_masklen';
CREATE FUNCTION pg_catalog.set_masklen(pg_catalog.inet, pg_catalog.int4) RETURNS pg_catalog.inet LANGUAGE internal IMMUTABLE STRICT AS 'inet_set_masklen';
CREATE FUNCTION pg_catalog.setseed(pg_catalog.float8) RETURNS pg_catalog.int4 LANGUAGE internal VOLATILE STRICT AS 'setseed';
CREATE FUNCTION pg_catalog.setval(pg_catalog.regclass, pg_catalog.int8) RETURNS pg_catalog.int8 LANGUAGE internal VOLATILE STRICT AS 'setval_oid';
CREATE FUNCTION pg_catalog.setval(pg_catalog.regclass, pg_catalog.int8, pg_catalog.bool) RETURNS pg_catalog.int8 LANGUAGE internal VOLATILE STRICT AS 'setval3_oid';
CREATE FUNCTION pg_catalog.shobj_description(pg_catalog.oid, pg_catalog.name) RETURNS pg_catalog.text LANGUAGE sql STABLE STRICT AS 'select null::pg_catalog.text';
CREATE FUNCTION pg_catalog.sign(pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_sign';
CREATE FUNCTION pg_catalog.sign(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dsign';
CREATE FUNCTION pg_catalog.similar_escape(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE AS 'similar_escape';
CREATE FUNCTION pg_catalog.sin(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dsin';
CREATE FUNCTION pg_catalog.sinh(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE AS 'dsinh';
CREATE FUNCTION pg_catalog.slope(pg_catalog.point, pg_catalog.point) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'point_slope';
CREATE FUNCTION pg_catalog.smgreq(pg_catalog.smgr, pg_catalog.smgr) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'smgreq';
CREATE FUNCTION pg_catalog.smgrin(pg_catalog.cstring) RETURNS pg_catalog.smgr LANGUAGE internal STABLE STRICT AS 'smgrin';
CREATE FUNCTION pg_catalog.smgrne(pg_catalog.smgr, pg_catalog.smgr) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'smgrne';
CREATE FUNCTION pg_catalog.smgrout(pg_catalog.smgr) RETURNS pg_catalog.cstring LANGUAGE internal STABLE STRICT AS 'smgrout';
CREATE FUNCTION pg_catalog.split_part(pg_catalog.text, pg_catalog.text, pg_catalog.int4) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'split_text';
CREATE FUNCTION pg_catalog.sqrt(pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_sqrt';
CREATE FUNCTION pg_catalog.sqrt(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dsqrt';
CREATE FUNCTION pg_catalog.statement_timestamp() RETURNS pg_catalog.timestamptz LANGUAGE internal STABLE STRICT AS 'statement_timestamp';
CREATE FUNCTION pg_catalog.string_agg_delim_transfn(pg_catalog.internal, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.internal LANGUAGE internal IMMUTABLE AS 'string_agg_delim_transfn';
CREATE FUNCTION pg_catalog.string_agg_finalfn(pg_catalog.internal) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE AS 'string_agg_finalfn';
CREATE FUNCTION pg_catalog.string_agg_transfn(pg_catalog.internal, pg_catalog.text) RETURNS pg_catalog.internal LANGUAGE internal IMMUTABLE AS 'string_agg_transfn';
CREATE FUNCTION pg_catalog.string_to_array(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog._text LANGUAGE internal IMMUTABLE STRICT AS 'text_to_array';
CREATE FUNCTION pg_catalog.strpos(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'textpos';
CREATE FUNCTION pg_catalog.substr(pg_catalog.bytea, pg_catalog.int4) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'bytea_substr_no_len';
CREATE FUNCTION pg_catalog.substr(pg_catalog.bytea, pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'bytea_substr';
CREATE FUNCTION pg_catalog.substr(pg_catalog.text, pg_catalog.int4) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'text_substr_no_len';
CREATE FUNCTION pg_catalog.substr(pg_catalog.text, pg_catalog.int4, pg_catalog.int4) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'text_substr';
CREATE FUNCTION pg_catalog.tan(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dtan';
CREATE FUNCTION pg_catalog.tanh(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE AS 'dtanh';
CREATE FUNCTION pg_catalog.text(pg_catalog."char") RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'char_text';
CREATE FUNCTION pg_catalog.text(pg_catalog."interval") RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'interval_text';
CREATE FUNCTION pg_catalog.text(pg_catalog."numeric") RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'numeric_text';
CREATE FUNCTION pg_catalog.text(pg_catalog."time") RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'time_text';
CREATE FUNCTION pg_catalog.text(pg_catalog."timestamp") RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'timestamp_text';
CREATE FUNCTION pg_catalog.text(pg_catalog.bool) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'booltext';
CREATE FUNCTION pg_catalog.text(pg_catalog.bpchar) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'rtrim1';
CREATE FUNCTION pg_catalog.text(pg_catalog.date) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'date_text';
CREATE FUNCTION pg_catalog.text(pg_catalog.float4) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'float4_text';
CREATE FUNCTION pg_catalog.text(pg_catalog.float8) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'float8_text';
CREATE FUNCTION pg_catalog.text(pg_catalog.inet) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'network_show';
CREATE FUNCTION pg_catalog.text(pg_catalog.int2) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'int2_text';
CREATE FUNCTION pg_catalog.text(pg_catalog.int4) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'int4_text';
CREATE FUNCTION pg_catalog.text(pg_catalog.int8) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'int8_text';
CREATE FUNCTION pg_catalog.text(pg_catalog.macaddr) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'macaddr_text';
CREATE FUNCTION pg_catalog.text(pg_catalog.name) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'name_text';
CREATE FUNCTION pg_catalog.text(pg_catalog.oid) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'oid_text';
CREATE FUNCTION pg_catalog.text(pg_catalog.timestamptz) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'timestamptz_text';
CREATE FUNCTION pg_catalog.text(pg_catalog.timetz) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'timetz_text';
CREATE FUNCTION pg_catalog.text(pg_catalog.xml) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'xmltotext';
CREATE FUNCTION pg_catalog.text_ge(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'text_ge';
CREATE FUNCTION pg_catalog.text_gt(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'text_gt';
CREATE FUNCTION pg_catalog.text_larger(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'text_larger';
CREATE FUNCTION pg_catalog.text_le(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'text_le';
CREATE FUNCTION pg_catalog.text_lt(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'text_lt';
CREATE FUNCTION pg_catalog.text_pattern_eq(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'texteq';
CREATE FUNCTION pg_catalog.text_pattern_ge(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'text_pattern_ge';
CREATE FUNCTION pg_catalog.text_pattern_gt(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'text_pattern_gt';
CREATE FUNCTION pg_catalog.text_pattern_le(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'text_pattern_le';
CREATE FUNCTION pg_catalog.text_pattern_lt(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'text_pattern_lt';
CREATE FUNCTION pg_catalog.text_pattern_ne(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'textne';
CREATE FUNCTION pg_catalog.text_smaller(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'text_smaller';
CREATE FUNCTION pg_catalog.textcat(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'textcat';
CREATE FUNCTION pg_catalog.texteq(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'texteq';
CREATE FUNCTION pg_catalog.texticlike(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'texticlike';
CREATE FUNCTION pg_catalog.texticnlike(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'texticnlike';
CREATE FUNCTION pg_catalog.texticregexeq(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'texticregexeq';
CREATE FUNCTION pg_catalog.texticregexne(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'texticregexne';
CREATE FUNCTION pg_catalog.textin(pg_catalog.cstring) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'textin';
CREATE FUNCTION pg_catalog.textlen(pg_catalog.text) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'textlen';
CREATE FUNCTION pg_catalog.textlike(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'textlike';
CREATE FUNCTION pg_catalog.textne(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'textne';
CREATE FUNCTION pg_catalog.textnlike(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'textnlike';
CREATE FUNCTION pg_catalog.textout(pg_catalog.text) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'textout';
CREATE FUNCTION pg_catalog.textrecv(pg_catalog.internal) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'textrecv';
CREATE FUNCTION pg_catalog.textregexeq(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'textregexeq';
CREATE FUNCTION pg_catalog.textregexne(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'textregexne';
CREATE FUNCTION pg_catalog.textsend(pg_catalog.text) RETURNS pg_catalog.bytea LANGUAGE internal STABLE STRICT AS 'textsend';
CREATE FUNCTION pg_catalog.tideq(pg_catalog.tid, pg_catalog.tid) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tideq';
CREATE FUNCTION pg_catalog.tidge(pg_catalog.tid, pg_catalog.tid) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tidge';
CREATE FUNCTION pg_catalog.tidgt(pg_catalog.tid, pg_catalog.tid) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tidgt';
CREATE FUNCTION pg_catalog.tidin(pg_catalog.cstring) RETURNS pg_catalog.tid LANGUAGE internal IMMUTABLE STRICT AS 'tidin';
CREATE FUNCTION pg_catalog.tidlarger(pg_catalog.tid, pg_catalog.tid) RETURNS pg_catalog.tid LANGUAGE internal IMMUTABLE STRICT AS 'tidlarger';
CREATE FUNCTION pg_catalog.tidle(pg_catalog.tid, pg_catalog.tid) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tidle';
CREATE FUNCTION pg_catalog.tidlt(pg_catalog.tid, pg_catalog.tid) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tidlt';
CREATE FUNCTION pg_catalog.tidne(pg_catalog.tid, pg_catalog.tid) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tidne';
CREATE FUNCTION pg_catalog.tidout(pg_catalog.tid) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'tidout';
CREATE FUNCTION pg_catalog.tidrecv(pg_catalog.internal) RETURNS pg_catalog.tid LANGUAGE internal IMMUTABLE STRICT AS 'tidrecv';
CREATE FUNCTION pg_catalog.tidsend(pg_catalog.tid) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'tidsend';
CREATE FUNCTION pg_catalog.tidsmaller(pg_catalog.tid, pg_catalog.tid) RETURNS pg_catalog.tid LANGUAGE internal IMMUTABLE STRICT AS 'tidsmaller';
CREATE FUNCTION pg_catalog.time_cmp(pg_catalog."time", pg_catalog."time") RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'time_cmp';
CREATE FUNCTION pg_catalog.time_eq(pg_catalog."time", pg_catalog."time") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'time_eq';
CREATE FUNCTION pg_catalog.time_ge(pg_catalog."time", pg_catalog."time") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'time_ge';
CREATE FUNCTION pg_catalog.time_gt(pg_catalog."time", pg_catalog."time") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'time_gt';
CREATE FUNCTION pg_catalog.time_in(pg_catalog.cstring, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog."time" LANGUAGE internal STABLE STRICT AS 'time_in';
CREATE FUNCTION pg_catalog.time_larger(pg_catalog."time", pg_catalog."time") RETURNS pg_catalog."time" LANGUAGE internal IMMUTABLE STRICT AS 'time_larger';
CREATE FUNCTION pg_catalog.time_le(pg_catalog."time", pg_catalog."time") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'time_le';
CREATE FUNCTION pg_catalog.time_lt(pg_catalog."time", pg_catalog."time") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'time_lt';
CREATE FUNCTION pg_catalog.time_mi_interval(pg_catalog."time", pg_catalog."interval") RETURNS pg_catalog."time" LANGUAGE internal IMMUTABLE STRICT AS 'time_mi_interval';
CREATE FUNCTION pg_catalog.time_mi_time(pg_catalog."time", pg_catalog."time") RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'time_mi_time';
CREATE FUNCTION pg_catalog.time_ne(pg_catalog."time", pg_catalog."time") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'time_ne';
CREATE FUNCTION pg_catalog.time_out(pg_catalog."time") RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'time_out';
CREATE FUNCTION pg_catalog.time_pl_interval(pg_catalog."time", pg_catalog."interval") RETURNS pg_catalog."time" LANGUAGE internal IMMUTABLE STRICT AS 'time_pl_interval';
CREATE FUNCTION pg_catalog.time_recv(pg_catalog.internal, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog."time" LANGUAGE internal IMMUTABLE STRICT AS 'time_recv';
CREATE FUNCTION pg_catalog.time_send(pg_catalog."time") RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'time_send';
CREATE FUNCTION pg_catalog.time_smaller(pg_catalog."time", pg_catalog."time") RETURNS pg_catalog."time" LANGUAGE internal IMMUTABLE STRICT AS 'time_smaller';
CREATE FUNCTION pg_catalog.timedate_pl(pg_catalog."time", pg_catalog.date) RETURNS pg_catalog."timestamp" LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog."timestamp"';
CREATE FUNCTION pg_catalog.timemi(pg_catalog.abstime, pg_catalog.reltime) RETURNS pg_catalog.abstime LANGUAGE internal IMMUTABLE STRICT AS 'timemi';
CREATE FUNCTION pg_catalog.timenow() RETURNS pg_catalog.abstime LANGUAGE internal STABLE STRICT AS 'timenow';
CREATE FUNCTION pg_catalog.timeofday() RETURNS pg_catalog.text LANGUAGE internal VOLATILE STRICT AS 'timeofday';
CREATE FUNCTION pg_catalog.timepl(pg_catalog.abstime, pg_catalog.reltime) RETURNS pg_catalog.abstime LANGUAGE internal IMMUTABLE STRICT AS 'timepl';
CREATE FUNCTION pg_catalog.timestamp_cmp(pg_catalog."timestamp", pg_catalog."timestamp") RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_cmp';
CREATE FUNCTION pg_catalog.timestamp_cmp_date(pg_catalog."timestamp", pg_catalog.date) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_cmp_date';
CREATE FUNCTION pg_catalog.timestamp_cmp_timestamptz(pg_catalog."timestamp", pg_catalog.timestamptz) RETURNS pg_catalog.int4 LANGUAGE internal STABLE STRICT AS 'timestamp_cmp_timestamptz';
CREATE FUNCTION pg_catalog.timestamp_eq(pg_catalog."timestamp", pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_eq';
CREATE FUNCTION pg_catalog.timestamp_eq_date(pg_catalog."timestamp", pg_catalog.date) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_eq_date';
CREATE FUNCTION pg_catalog.timestamp_eq_timestamptz(pg_catalog."timestamp", pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'timestamp_eq_timestamptz';
CREATE FUNCTION pg_catalog.timestamp_ge(pg_catalog."timestamp", pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_ge';
CREATE FUNCTION pg_catalog.timestamp_ge_date(pg_catalog."timestamp", pg_catalog.date) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_ge_date';
CREATE FUNCTION pg_catalog.timestamp_ge_timestamptz(pg_catalog."timestamp", pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'timestamp_ge_timestamptz';
CREATE FUNCTION pg_catalog.timestamp_gt(pg_catalog."timestamp", pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_gt';
CREATE FUNCTION pg_catalog.timestamp_gt_date(pg_catalog."timestamp", pg_catalog.date) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_gt_date';
CREATE FUNCTION pg_catalog.timestamp_gt_timestamptz(pg_catalog."timestamp", pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'timestamp_gt_timestamptz';
CREATE FUNCTION pg_catalog.timestamp_in(pg_catalog.cstring, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog."timestamp" LANGUAGE internal STABLE STRICT AS 'timestamp_in';
CREATE FUNCTION pg_catalog.timestamp_larger(pg_catalog."timestamp", pg_catalog."timestamp") RETURNS pg_catalog."timestamp" LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_larger';
CREATE FUNCTION pg_catalog.timestamp_le(pg_catalog."timestamp", pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_le';
CREATE FUNCTION pg_catalog.timestamp_le_date(pg_catalog."timestamp", pg_catalog.date) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_le_date';
CREATE FUNCTION pg_catalog.timestamp_le_timestamptz(pg_catalog."timestamp", pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'timestamp_le_timestamptz';
CREATE FUNCTION pg_catalog.timestamp_lt(pg_catalog."timestamp", pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_lt';
CREATE FUNCTION pg_catalog.timestamp_lt_date(pg_catalog."timestamp", pg_catalog.date) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_lt_date';
CREATE FUNCTION pg_catalog.timestamp_lt_timestamptz(pg_catalog."timestamp", pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'timestamp_lt_timestamptz';
CREATE FUNCTION pg_catalog.timestamp_mi(pg_catalog."timestamp", pg_catalog."timestamp") RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_mi';
CREATE FUNCTION pg_catalog.timestamp_mi_interval(pg_catalog."timestamp", pg_catalog."interval") RETURNS pg_catalog."timestamp" LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_mi_interval';
CREATE FUNCTION pg_catalog.timestamp_ne(pg_catalog."timestamp", pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_ne';
CREATE FUNCTION pg_catalog.timestamp_ne_date(pg_catalog."timestamp", pg_catalog.date) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_ne_date';
CREATE FUNCTION pg_catalog.timestamp_ne_timestamptz(pg_catalog."timestamp", pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'timestamp_ne_timestamptz';
CREATE FUNCTION pg_catalog.timestamp_out(pg_catalog."timestamp") RETURNS pg_catalog.cstring LANGUAGE internal STABLE STRICT AS 'timestamp_out';
CREATE FUNCTION pg_catalog.timestamp_pl_interval(pg_catalog."timestamp", pg_catalog."interval") RETURNS pg_catalog."timestamp" LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_pl_interval';
CREATE FUNCTION pg_catalog.timestamp_recv(pg_catalog.internal, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog."timestamp" LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_recv';
CREATE FUNCTION pg_catalog.timestamp_send(pg_catalog."timestamp") RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_send';
CREATE FUNCTION pg_catalog.timestamp_smaller(pg_catalog."timestamp", pg_catalog."timestamp") RETURNS pg_catalog."timestamp" LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_smaller';
CREATE FUNCTION pg_catalog.timestamptz(pg_catalog."timestamp") RETURNS pg_catalog.timestamptz LANGUAGE internal STABLE STRICT AS 'timestamp_timestamptz';
CREATE FUNCTION pg_catalog.timestamptz(pg_catalog.abstime) RETURNS pg_catalog.timestamptz LANGUAGE internal IMMUTABLE STRICT AS 'abstime_timestamptz';
CREATE FUNCTION pg_catalog.timestamptz(pg_catalog.date) RETURNS pg_catalog.timestamptz LANGUAGE internal STABLE STRICT AS 'date_timestamptz';
CREATE FUNCTION pg_catalog.timestamptz(pg_catalog.date, pg_catalog."time") RETURNS pg_catalog.timestamptz LANGUAGE sql STABLE STRICT AS 'select null::pg_catalog.timestamptz';
CREATE FUNCTION pg_catalog.timestamptz(pg_catalog.date, pg_catalog.timetz) RETURNS pg_catalog.timestamptz LANGUAGE internal IMMUTABLE STRICT AS 'datetimetz_timestamptz';
CREATE FUNCTION pg_catalog.timestamptz(pg_catalog.text) RETURNS pg_catalog.timestamptz LANGUAGE internal STABLE STRICT AS 'text_timestamptz';
CREATE FUNCTION pg_catalog.timestamptz(pg_catalog.timestamptz, pg_catalog.int4) RETURNS pg_catalog.timestamptz LANGUAGE internal IMMUTABLE STRICT AS 'timestamptz_scale';
CREATE FUNCTION pg_catalog.timestamptz_cmp(pg_catalog.timestamptz, pg_catalog.timestamptz) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_cmp';
CREATE FUNCTION pg_catalog.timestamptz_cmp_date(pg_catalog.timestamptz, pg_catalog.date) RETURNS pg_catalog.int4 LANGUAGE internal STABLE STRICT AS 'timestamptz_cmp_date';
CREATE FUNCTION pg_catalog.timestamptz_cmp_timestamp(pg_catalog.timestamptz, pg_catalog."timestamp") RETURNS pg_catalog.int4 LANGUAGE internal STABLE STRICT AS 'timestamptz_cmp_timestamp';
CREATE FUNCTION pg_catalog.timestamptz_eq(pg_catalog.timestamptz, pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_eq';
CREATE FUNCTION pg_catalog.timestamptz_eq_date(pg_catalog.timestamptz, pg_catalog.date) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'timestamptz_eq_date';
CREATE FUNCTION pg_catalog.timestamptz_eq_timestamp(pg_catalog.timestamptz, pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'timestamptz_eq_timestamp';
CREATE FUNCTION pg_catalog.timestamptz_ge(pg_catalog.timestamptz, pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_ge';
CREATE FUNCTION pg_catalog.timestamptz_ge_date(pg_catalog.timestamptz, pg_catalog.date) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'timestamptz_ge_date';
CREATE FUNCTION pg_catalog.timestamptz_ge_timestamp(pg_catalog.timestamptz, pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'timestamptz_ge_timestamp';
CREATE FUNCTION pg_catalog.timestamptz_gt(pg_catalog.timestamptz, pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_gt';
CREATE FUNCTION pg_catalog.timestamptz_gt_date(pg_catalog.timestamptz, pg_catalog.date) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'timestamptz_gt_date';
CREATE FUNCTION pg_catalog.timestamptz_gt_timestamp(pg_catalog.timestamptz, pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'timestamptz_gt_timestamp';
CREATE FUNCTION pg_catalog.timestamptz_in(pg_catalog.cstring, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog.timestamptz LANGUAGE internal STABLE STRICT AS 'timestamptz_in';
CREATE FUNCTION pg_catalog.timestamptz_larger(pg_catalog.timestamptz, pg_catalog.timestamptz) RETURNS pg_catalog.timestamptz LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_larger';
CREATE FUNCTION pg_catalog.timestamptz_le(pg_catalog.timestamptz, pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_le';
CREATE FUNCTION pg_catalog.timestamptz_le_date(pg_catalog.timestamptz, pg_catalog.date) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'timestamptz_le_date';
CREATE FUNCTION pg_catalog.timestamptz_le_timestamp(pg_catalog.timestamptz, pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'timestamptz_le_timestamp';
CREATE FUNCTION pg_catalog.timestamptz_lt(pg_catalog.timestamptz, pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_lt';
CREATE FUNCTION pg_catalog.timestamptz_lt_date(pg_catalog.timestamptz, pg_catalog.date) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'timestamptz_lt_date';
CREATE FUNCTION pg_catalog.timestamptz_lt_timestamp(pg_catalog.timestamptz, pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'timestamptz_lt_timestamp';
CREATE FUNCTION pg_catalog.timestamptz_mi(pg_catalog.timestamptz, pg_catalog.timestamptz) RETURNS pg_catalog."interval" LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_mi';
CREATE FUNCTION pg_catalog.timestamptz_mi_interval(pg_catalog.timestamptz, pg_catalog."interval") RETURNS pg_catalog.timestamptz LANGUAGE internal STABLE STRICT AS 'timestamptz_mi_interval';
CREATE FUNCTION pg_catalog.timestamptz_ne(pg_catalog.timestamptz, pg_catalog.timestamptz) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_ne';
CREATE FUNCTION pg_catalog.timestamptz_ne_date(pg_catalog.timestamptz, pg_catalog.date) RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'timestamptz_ne_date';
CREATE FUNCTION pg_catalog.timestamptz_ne_timestamp(pg_catalog.timestamptz, pg_catalog."timestamp") RETURNS pg_catalog.bool LANGUAGE internal STABLE STRICT AS 'timestamptz_ne_timestamp';
CREATE FUNCTION pg_catalog.timestamptz_out(pg_catalog.timestamptz) RETURNS pg_catalog.cstring LANGUAGE internal STABLE STRICT AS 'timestamptz_out';
CREATE FUNCTION pg_catalog.timestamptz_pl_interval(pg_catalog.timestamptz, pg_catalog."interval") RETURNS pg_catalog.timestamptz LANGUAGE internal STABLE STRICT AS 'timestamptz_pl_interval';
CREATE FUNCTION pg_catalog.timestamptz_recv(pg_catalog.internal, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog.timestamptz LANGUAGE internal IMMUTABLE STRICT AS 'timestamptz_recv';
CREATE FUNCTION pg_catalog.timestamptz_send(pg_catalog.timestamptz) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'timestamptz_send';
CREATE FUNCTION pg_catalog.timestamptz_smaller(pg_catalog.timestamptz, pg_catalog.timestamptz) RETURNS pg_catalog.timestamptz LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_smaller';
CREATE FUNCTION pg_catalog.timetz(pg_catalog."time") RETURNS pg_catalog.timetz LANGUAGE internal STABLE STRICT AS 'time_timetz';
CREATE FUNCTION pg_catalog.timetz(pg_catalog.text) RETURNS pg_catalog.timetz LANGUAGE internal STABLE STRICT AS 'text_timetz';
CREATE FUNCTION pg_catalog.timetz(pg_catalog.timestamptz) RETURNS pg_catalog.timetz LANGUAGE internal STABLE STRICT AS 'timestamptz_timetz';
CREATE FUNCTION pg_catalog.timetz(pg_catalog.timetz, pg_catalog.int4) RETURNS pg_catalog.timetz LANGUAGE internal IMMUTABLE STRICT AS 'timetz_scale';
CREATE FUNCTION pg_catalog.timetz_cmp(pg_catalog.timetz, pg_catalog.timetz) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'timetz_cmp';
CREATE FUNCTION pg_catalog.timetz_eq(pg_catalog.timetz, pg_catalog.timetz) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timetz_eq';
CREATE FUNCTION pg_catalog.timetz_ge(pg_catalog.timetz, pg_catalog.timetz) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timetz_ge';
CREATE FUNCTION pg_catalog.timetz_gt(pg_catalog.timetz, pg_catalog.timetz) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timetz_gt';
CREATE FUNCTION pg_catalog.timetz_hash(pg_catalog.timetz) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'timetz_hash';
CREATE FUNCTION pg_catalog.timetz_in(pg_catalog.cstring, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog.timetz LANGUAGE internal STABLE STRICT AS 'timetz_in';
CREATE FUNCTION pg_catalog.timetz_larger(pg_catalog.timetz, pg_catalog.timetz) RETURNS pg_catalog.timetz LANGUAGE internal IMMUTABLE STRICT AS 'timetz_larger';
CREATE FUNCTION pg_catalog.timetz_le(pg_catalog.timetz, pg_catalog.timetz) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timetz_le';
CREATE FUNCTION pg_catalog.timetz_lt(pg_catalog.timetz, pg_catalog.timetz) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timetz_lt';
CREATE FUNCTION pg_catalog.timetz_mi_interval(pg_catalog.timetz, pg_catalog."interval") RETURNS pg_catalog.timetz LANGUAGE internal IMMUTABLE STRICT AS 'timetz_mi_interval';
CREATE FUNCTION pg_catalog.timetz_ne(pg_catalog.timetz, pg_catalog.timetz) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'timetz_ne';
CREATE FUNCTION pg_catalog.timetz_out(pg_catalog.timetz) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'timetz_out';
CREATE FUNCTION pg_catalog.timetz_pl_interval(pg_catalog.timetz, pg_catalog."interval") RETURNS pg_catalog.timetz LANGUAGE internal IMMUTABLE STRICT AS 'timetz_pl_interval';
CREATE FUNCTION pg_catalog.timetz_recv(pg_catalog.internal, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog.timetz LANGUAGE internal IMMUTABLE STRICT AS 'timetz_recv';
CREATE FUNCTION pg_catalog.timetz_send(pg_catalog.timetz) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'timetz_send';
CREATE FUNCTION pg_catalog.timetz_smaller(pg_catalog.timetz, pg_catalog.timetz) RETURNS pg_catalog.timetz LANGUAGE internal IMMUTABLE STRICT AS 'timetz_smaller';
CREATE FUNCTION pg_catalog.timetzdate_pl(pg_catalog.timetz, pg_catalog.date) RETURNS pg_catalog.timestamptz LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog.timestamptz';
CREATE FUNCTION pg_catalog.timezone(pg_catalog."interval", pg_catalog."timestamp") RETURNS pg_catalog.timestamptz LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_izone';
CREATE FUNCTION pg_catalog.timezone(pg_catalog."interval", pg_catalog.timestamptz) RETURNS pg_catalog."timestamp" LANGUAGE internal IMMUTABLE STRICT AS 'timestamptz_izone';
CREATE FUNCTION pg_catalog.timezone(pg_catalog."interval", pg_catalog.timetz) RETURNS pg_catalog.timetz LANGUAGE internal IMMUTABLE STRICT AS 'timetz_izone';
CREATE FUNCTION pg_catalog.timezone(pg_catalog.text, pg_catalog."timestamp") RETURNS pg_catalog.timestamptz LANGUAGE internal IMMUTABLE STRICT AS 'timestamp_zone';
CREATE FUNCTION pg_catalog.timezone(pg_catalog.text, pg_catalog.timestamptz) RETURNS pg_catalog."timestamp" LANGUAGE internal IMMUTABLE STRICT AS 'timestamptz_zone';
CREATE FUNCTION pg_catalog.timezone(pg_catalog.text, pg_catalog.timetz) RETURNS pg_catalog.timetz LANGUAGE internal VOLATILE STRICT AS 'timetz_zone';
CREATE FUNCTION pg_catalog.tinterval(pg_catalog.abstime, pg_catalog.abstime) RETURNS pg_catalog.tinterval LANGUAGE internal IMMUTABLE STRICT AS 'mktinterval';
CREATE FUNCTION pg_catalog.tintervalct(pg_catalog.tinterval, pg_catalog.tinterval) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tintervalct';
CREATE FUNCTION pg_catalog.tintervalend(pg_catalog.tinterval) RETURNS pg_catalog.abstime LANGUAGE internal IMMUTABLE STRICT AS 'tintervalend';
CREATE FUNCTION pg_catalog.tintervaleq(pg_catalog.tinterval, pg_catalog.tinterval) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tintervaleq';
CREATE FUNCTION pg_catalog.tintervalge(pg_catalog.tinterval, pg_catalog.tinterval) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tintervalge';
CREATE FUNCTION pg_catalog.tintervalgt(pg_catalog.tinterval, pg_catalog.tinterval) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tintervalgt';
CREATE FUNCTION pg_catalog.tintervalin(pg_catalog.cstring) RETURNS pg_catalog.tinterval LANGUAGE internal STABLE STRICT AS 'tintervalin';
CREATE FUNCTION pg_catalog.tintervalle(pg_catalog.tinterval, pg_catalog.tinterval) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tintervalle';
CREATE FUNCTION pg_catalog.tintervalleneq(pg_catalog.tinterval, pg_catalog.reltime) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tintervalleneq';
CREATE FUNCTION pg_catalog.tintervallenge(pg_catalog.tinterval, pg_catalog.reltime) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tintervallenge';
CREATE FUNCTION pg_catalog.tintervallengt(pg_catalog.tinterval, pg_catalog.reltime) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tintervallengt';
CREATE FUNCTION pg_catalog.tintervallenle(pg_catalog.tinterval, pg_catalog.reltime) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tintervallenle';
CREATE FUNCTION pg_catalog.tintervallenlt(pg_catalog.tinterval, pg_catalog.reltime) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tintervallenlt';
CREATE FUNCTION pg_catalog.tintervallenne(pg_catalog.tinterval, pg_catalog.reltime) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tintervallenne';
CREATE FUNCTION pg_catalog.tintervallt(pg_catalog.tinterval, pg_catalog.tinterval) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tintervallt';
CREATE FUNCTION pg_catalog.tintervalne(pg_catalog.tinterval, pg_catalog.tinterval) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tintervalne';
CREATE FUNCTION pg_catalog.tintervalout(pg_catalog.tinterval) RETURNS pg_catalog.cstring LANGUAGE internal STABLE STRICT AS 'tintervalout';
CREATE FUNCTION pg_catalog.tintervalov(pg_catalog.tinterval, pg_catalog.tinterval) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tintervalov';
CREATE FUNCTION pg_catalog.tintervalrecv(pg_catalog.internal) RETURNS pg_catalog.tinterval LANGUAGE internal IMMUTABLE STRICT AS 'tintervalrecv';
CREATE FUNCTION pg_catalog.tintervalrel(pg_catalog.tinterval) RETURNS pg_catalog.reltime LANGUAGE internal IMMUTABLE STRICT AS 'tintervalrel';
CREATE FUNCTION pg_catalog.tintervalsame(pg_catalog.tinterval, pg_catalog.tinterval) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'tintervalsame';
CREATE FUNCTION pg_catalog.tintervalsend(pg_catalog.tinterval) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'tintervalsend';
CREATE FUNCTION pg_catalog.tintervalstart(pg_catalog.tinterval) RETURNS pg_catalog.abstime LANGUAGE internal IMMUTABLE STRICT AS 'tintervalstart';
CREATE FUNCTION pg_catalog.to_ascii(pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'to_ascii_default';
CREATE FUNCTION pg_catalog.to_ascii(pg_catalog.text, pg_catalog.int4) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'to_ascii_enc';
CREATE FUNCTION pg_catalog.to_ascii(pg_catalog.text, pg_catalog.name) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'to_ascii_encname';
CREATE FUNCTION pg_catalog.to_char(pg_catalog."interval", pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'interval_to_char';
CREATE FUNCTION pg_catalog.to_char(pg_catalog."numeric", pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'numeric_to_char';
CREATE FUNCTION pg_catalog.to_char(pg_catalog."timestamp", pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'timestamp_to_char';
CREATE FUNCTION pg_catalog.to_char(pg_catalog.float4, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'float4_to_char';
CREATE FUNCTION pg_catalog.to_char(pg_catalog.float8, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'float8_to_char';
CREATE FUNCTION pg_catalog.to_char(pg_catalog.int4, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'int4_to_char';
CREATE FUNCTION pg_catalog.to_char(pg_catalog.int8, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'int8_to_char';
CREATE FUNCTION pg_catalog.to_char(pg_catalog.timestamptz, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'timestamptz_to_char';
CREATE FUNCTION pg_catalog.to_date(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.date LANGUAGE internal STABLE STRICT AS 'to_date';
CREATE FUNCTION pg_catalog.to_hex(pg_catalog.int4) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'to_hex32';
CREATE FUNCTION pg_catalog.to_hex(pg_catalog.int8) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'to_hex64';
CREATE FUNCTION pg_catalog.to_number(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog."numeric" LANGUAGE internal STABLE STRICT AS 'numeric_to_number';
CREATE FUNCTION pg_catalog.to_timestamp(pg_catalog.float8) RETURNS pg_catalog.timestamptz LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog.timestamptz';
CREATE FUNCTION pg_catalog.to_timestamp(pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.timestamptz LANGUAGE internal STABLE STRICT AS 'to_timestamp';
CREATE FUNCTION pg_catalog.transaction_timestamp() RETURNS pg_catalog.timestamptz LANGUAGE internal STABLE STRICT AS 'now';
CREATE FUNCTION pg_catalog.translate(pg_catalog.text, pg_catalog.text, pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'translate';
CREATE FUNCTION pg_catalog.trigger_in(pg_catalog.cstring) RETURNS pg_catalog.trigger LANGUAGE internal IMMUTABLE STRICT AS 'trigger_in';
CREATE FUNCTION pg_catalog.trigger_out(pg_catalog.trigger) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'trigger_out';
CREATE FUNCTION pg_catalog.trunc(pg_catalog."numeric") RETURNS pg_catalog."numeric" LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog."numeric"';
CREATE FUNCTION pg_catalog.trunc(pg_catalog."numeric", pg_catalog.int4) RETURNS pg_catalog."numeric" LANGUAGE internal IMMUTABLE STRICT AS 'numeric_trunc';
CREATE FUNCTION pg_catalog.trunc(pg_catalog.float8) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'dtrunc';
CREATE FUNCTION pg_catalog.trunc(pg_catalog.macaddr) RETURNS pg_catalog.macaddr LANGUAGE internal IMMUTABLE STRICT AS 'macaddr_trunc';
CREATE FUNCTION pg_catalog.unknownin(pg_catalog.cstring) RETURNS pg_catalog.unknown LANGUAGE internal IMMUTABLE STRICT AS 'unknownin';
CREATE FUNCTION pg_catalog.unknownout(pg_catalog.unknown) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'unknownout';
CREATE FUNCTION pg_catalog.unknownrecv(pg_catalog.internal) RETURNS pg_catalog.unknown LANGUAGE internal IMMUTABLE STRICT AS 'unknownrecv';
CREATE FUNCTION pg_catalog.unknownsend(pg_catalog.unknown) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'unknownsend';
CREATE FUNCTION pg_catalog.unnest(pg_catalog.anyarray) RETURNS SETOF pg_catalog.anyelement LANGUAGE internal IMMUTABLE STRICT AS 'unnest';
CREATE FUNCTION pg_catalog.upper(pg_catalog.text) RETURNS pg_catalog.text LANGUAGE internal IMMUTABLE STRICT AS 'upper';
CREATE FUNCTION pg_catalog.varbit(pg_catalog.varbit, pg_catalog.int4, pg_catalog.bool) RETURNS pg_catalog.varbit LANGUAGE internal IMMUTABLE STRICT AS 'varbit';
CREATE FUNCTION pg_catalog.varbit_in(pg_catalog.cstring, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog.varbit LANGUAGE internal IMMUTABLE STRICT AS 'varbit_in';
CREATE FUNCTION pg_catalog.varbit_out(pg_catalog.varbit) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'varbit_out';
CREATE FUNCTION pg_catalog.varbit_recv(pg_catalog.internal, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog.varbit LANGUAGE internal IMMUTABLE STRICT AS 'varbit_recv';
CREATE FUNCTION pg_catalog.varbit_send(pg_catalog.varbit) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'varbit_send';
CREATE FUNCTION pg_catalog.varbitcmp(pg_catalog.varbit, pg_catalog.varbit) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'bitcmp';
CREATE FUNCTION pg_catalog.varbiteq(pg_catalog.varbit, pg_catalog.varbit) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'biteq';
CREATE FUNCTION pg_catalog.varbitge(pg_catalog.varbit, pg_catalog.varbit) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'bitge';
CREATE FUNCTION pg_catalog.varbitgt(pg_catalog.varbit, pg_catalog.varbit) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'bitgt';
CREATE FUNCTION pg_catalog.varbitle(pg_catalog.varbit, pg_catalog.varbit) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'bitle';
CREATE FUNCTION pg_catalog.varbitlt(pg_catalog.varbit, pg_catalog.varbit) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'bitlt';
CREATE FUNCTION pg_catalog.varbitne(pg_catalog.varbit, pg_catalog.varbit) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'bitne';
CREATE FUNCTION pg_catalog.varcharin(pg_catalog.cstring, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog."varchar" LANGUAGE internal IMMUTABLE STRICT AS 'varcharin';
CREATE FUNCTION pg_catalog.varcharout(pg_catalog."varchar") RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'varcharout';
CREATE FUNCTION pg_catalog.varcharrecv(pg_catalog.internal, pg_catalog.oid, pg_catalog.int4) RETURNS pg_catalog."varchar" LANGUAGE internal STABLE STRICT AS 'varcharrecv';
CREATE FUNCTION pg_catalog.varcharsend(pg_catalog."varchar") RETURNS pg_catalog.bytea LANGUAGE internal STABLE STRICT AS 'varcharsend';
CREATE FUNCTION pg_catalog.version() RETURNS pg_catalog.text LANGUAGE internal STABLE STRICT AS 'pgsql_version';
CREATE FUNCTION pg_catalog.void_in(pg_catalog.cstring) RETURNS pg_catalog.void LANGUAGE internal IMMUTABLE STRICT AS 'void_in';
CREATE FUNCTION pg_catalog.void_out(pg_catalog.void) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'void_out';
CREATE FUNCTION pg_catalog.width(pg_catalog.box) RETURNS pg_catalog.float8 LANGUAGE internal IMMUTABLE STRICT AS 'box_width';
CREATE FUNCTION pg_catalog.width_bucket(pg_catalog."numeric", pg_catalog."numeric", pg_catalog."numeric", pg_catalog.int4) RETURNS pg_catalog.int4 LANGUAGE internal IMMUTABLE STRICT AS 'width_bucket_numeric';
CREATE FUNCTION pg_catalog.xideq(pg_catalog.xid, pg_catalog.xid) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'xideq';
CREATE FUNCTION pg_catalog.xideqint4(pg_catalog.xid, pg_catalog.int4) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'xideq';
CREATE FUNCTION pg_catalog.xidin(pg_catalog.cstring) RETURNS pg_catalog.xid LANGUAGE internal IMMUTABLE STRICT AS 'xidin';
CREATE FUNCTION pg_catalog.xidout(pg_catalog.xid) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'xidout';
CREATE FUNCTION pg_catalog.xidrecv(pg_catalog.internal) RETURNS pg_catalog.xid LANGUAGE internal IMMUTABLE STRICT AS 'xidrecv';
CREATE FUNCTION pg_catalog.xidsend(pg_catalog.xid) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'xidsend';
CREATE FUNCTION pg_catalog.xml(pg_catalog.text) RETURNS pg_catalog.xml LANGUAGE internal IMMUTABLE STRICT AS 'texttoxml';
CREATE FUNCTION pg_catalog.xml_in(pg_catalog.cstring) RETURNS pg_catalog.xml LANGUAGE internal IMMUTABLE STRICT AS 'xml_in';
CREATE FUNCTION pg_catalog.xml_is_well_formed(pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'xml_is_well_formed';
CREATE FUNCTION pg_catalog.xml_is_well_formed_content(pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'xml_is_well_formed_content';
CREATE FUNCTION pg_catalog.xml_is_well_formed_document(pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'xml_is_well_formed_document';
CREATE FUNCTION pg_catalog.xml_out(pg_catalog.xml) RETURNS pg_catalog.cstring LANGUAGE internal IMMUTABLE STRICT AS 'xml_out';
CREATE FUNCTION pg_catalog.xml_recv(pg_catalog.internal) RETURNS pg_catalog.xml LANGUAGE internal IMMUTABLE STRICT AS 'xml_recv';
CREATE FUNCTION pg_catalog.xml_send(pg_catalog.xml) RETURNS pg_catalog.bytea LANGUAGE internal IMMUTABLE STRICT AS 'xml_send';
CREATE FUNCTION pg_catalog.xmlcomment(pg_catalog.text) RETURNS pg_catalog.xml LANGUAGE internal IMMUTABLE STRICT AS 'xmlcomment';
CREATE FUNCTION pg_catalog.xmlconcat2(pg_catalog.xml, pg_catalog.xml) RETURNS pg_catalog.xml LANGUAGE internal IMMUTABLE STRICT AS 'xmlconcat2';
CREATE FUNCTION pg_catalog.xmlexists(pg_catalog.text, pg_catalog.xml) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'xmlexists';
CREATE FUNCTION pg_catalog.xmlvalidate(pg_catalog.xml, pg_catalog.text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'xmlvalidate';
CREATE FUNCTION pg_catalog.xpath(pg_catalog.text, pg_catalog.xml) RETURNS pg_catalog._xml LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog._xml';
CREATE FUNCTION pg_catalog.xpath(pg_catalog.text, pg_catalog.xml, pg_catalog._text) RETURNS pg_catalog._xml LANGUAGE internal IMMUTABLE STRICT AS 'xpath';
CREATE FUNCTION pg_catalog.xpath_exists(pg_catalog.text, pg_catalog.xml) RETURNS pg_catalog.bool LANGUAGE sql IMMUTABLE STRICT AS 'select null::pg_catalog.bool';
CREATE FUNCTION pg_catalog.xpath_exists(pg_catalog.text, pg_catalog.xml, pg_catalog._text) RETURNS pg_catalog.bool LANGUAGE internal IMMUTABLE STRICT AS 'xpath_exists';
CREATE INDEX gp_db_interfaces_dbid_index ON pg_catalog.gp_db_interfaces USING btree(dbid);
CREATE INDEX pg_attribute_encoding_attrelid_index ON pg_catalog.pg_attribute_encoding USING btree(attrelid);
CREATE INDEX pg_authid_rolresqueue_index ON pg_catalog.pg_authid USING btree(rolresqueue);
CREATE INDEX pg_constraint_conname_nsp_index ON pg_catalog.pg_constraint USING btree(conname, connamespace);
CREATE INDEX pg_constraint_conrelid_index ON pg_catalog.pg_constraint USING btree(conrelid);
CREATE INDEX pg_constraint_contypid_index ON pg_catalog.pg_constraint USING btree(contypid);
CREATE INDEX pg_depend_depender_index ON pg_catalog.pg_depend USING btree(classid, objid, objsubid);
CREATE INDEX pg_depend_reference_index ON pg_catalog.pg_depend USING btree(refclassid, refobjid, refobjsubid);
CREATE INDEX pg_filespace_entry_fs_index ON pg_catalog.pg_filespace_entry USING btree(fsefsoid);
CREATE INDEX pg_index_indrelid_index ON pg_catalog.pg_index USING btree(indrelid);
CREATE INDEX pg_partition_encoding_parencoid_index ON pg_catalog.pg_partition_encoding USING btree(parencoid);
CREATE INDEX pg_partition_parrelid_index ON pg_catalog.pg_partition USING btree(parrelid);
CREATE INDEX pg_partition_parrelid_parlevel_istemplate_index ON pg_catalog.pg_partition USING btree(parrelid, parlevel, paristemplate);
CREATE INDEX pg_partition_rule_parchildrelid_index ON pg_catalog.pg_partition_rule USING btree(parchildrelid);
CREATE INDEX pg_partition_rule_parchildrelid_parparentrule_parruleord_index ON pg_catalog.pg_partition_rule USING btree(parchildrelid, parparentrule, parruleord);
CREATE INDEX pg_partition_rule_paroid_parentrule_ruleord_index ON pg_catalog.pg_partition_rule USING btree(paroid, parparentrule, parruleord);
CREATE INDEX pg_resqueuecapability_resqueueid_index ON pg_catalog.pg_resqueuecapability USING btree(resqueueid);
CREATE INDEX pg_resqueuecapability_restypid_index ON pg_catalog.pg_resqueuecapability USING btree(restypid);
CREATE INDEX pg_shdepend_depender_index ON pg_catalog.pg_shdepend USING btree(dbid, classid, objid);
CREATE INDEX pg_shdepend_reference_index ON pg_catalog.pg_shdepend USING btree(refclassid, refobjid);
CREATE INDEX pg_statlastop_classid_objid_index ON pg_catalog.pg_stat_last_operation USING btree(classid, objid);
CREATE INDEX pg_statlastshop_classid_objid_index ON pg_catalog.pg_stat_last_shoperation USING btree(classid, objid);
CREATE INDEX pg_trigger_tgconstrname_index ON pg_catalog.pg_trigger USING btree(tgconstrname);
CREATE INDEX pg_trigger_tgconstrrelid_index ON pg_catalog.pg_trigger USING btree(tgconstrrelid);
CREATE OPERATOR CLASS _abstime_ops DEFAULT FOR TYPE pg_catalog._abstime USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.btabstimecmp(pg_catalog.abstime, pg_catalog.abstime),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE abstime;
CREATE OPERATOR CLASS _bit_ops DEFAULT FOR TYPE pg_catalog._bit USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.bitcmp(pg_catalog."bit", pg_catalog."bit"),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE "bit";
CREATE OPERATOR CLASS _bool_ops DEFAULT FOR TYPE pg_catalog._bool USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.btboolcmp(pg_catalog.bool, pg_catalog.bool),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE bool;
CREATE OPERATOR CLASS _bpchar_ops DEFAULT FOR TYPE pg_catalog._bpchar USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.bpcharcmp(pg_catalog.bpchar, pg_catalog.bpchar),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE bpchar;
CREATE OPERATOR CLASS _bytea_ops DEFAULT FOR TYPE pg_catalog._bytea USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.byteacmp(pg_catalog.bytea, pg_catalog.bytea),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE bytea;
CREATE OPERATOR CLASS _char_ops DEFAULT FOR TYPE pg_catalog._char USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.btcharcmp(pg_catalog."char", pg_catalog."char"),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE "char";
CREATE OPERATOR CLASS _cidr_ops DEFAULT FOR TYPE pg_catalog._cidr USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.network_cmp(pg_catalog.inet, pg_catalog.inet),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE cidr;
CREATE OPERATOR CLASS _date_ops DEFAULT FOR TYPE pg_catalog._date USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.date_cmp(pg_catalog.date, pg_catalog.date),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE date;
CREATE OPERATOR CLASS _float4_ops DEFAULT FOR TYPE pg_catalog._float4 USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.btfloat4cmp(pg_catalog.float4, pg_catalog.float4),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE float4;
CREATE OPERATOR CLASS _float8_ops DEFAULT FOR TYPE pg_catalog._float8 USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.btfloat8cmp(pg_catalog.float8, pg_catalog.float8),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE float8;
CREATE OPERATOR CLASS _inet_ops DEFAULT FOR TYPE pg_catalog._inet USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.network_cmp(pg_catalog.inet, pg_catalog.inet),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE inet;
CREATE OPERATOR CLASS _int2_ops DEFAULT FOR TYPE pg_catalog._int2 USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.btint2cmp(pg_catalog.int2, pg_catalog.int2),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE int2;
CREATE OPERATOR CLASS _int4_ops DEFAULT FOR TYPE pg_catalog._int4 USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.btint4cmp(pg_catalog.int4, pg_catalog.int4),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE int4;
CREATE OPERATOR CLASS _int8_ops DEFAULT FOR TYPE pg_catalog._int8 USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.btint8cmp(pg_catalog.int8, pg_catalog.int8),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE int8;
CREATE OPERATOR CLASS _interval_ops DEFAULT FOR TYPE pg_catalog._interval USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.interval_cmp(pg_catalog."interval", pg_catalog."interval"),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE "interval";
CREATE OPERATOR CLASS _macaddr_ops DEFAULT FOR TYPE pg_catalog._macaddr USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.macaddr_cmp(pg_catalog.macaddr, pg_catalog.macaddr),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE macaddr;
CREATE OPERATOR CLASS _money_ops DEFAULT FOR TYPE pg_catalog._money USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.cash_cmp(pg_catalog.money, pg_catalog.money),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE money;
CREATE OPERATOR CLASS _name_ops DEFAULT FOR TYPE pg_catalog._name USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.btnamecmp(pg_catalog.name, pg_catalog.name),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE name;
CREATE OPERATOR CLASS _numeric_ops DEFAULT FOR TYPE pg_catalog._numeric USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.numeric_cmp(pg_catalog."numeric", pg_catalog."numeric"),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE "numeric";
CREATE OPERATOR CLASS _oid_ops DEFAULT FOR TYPE pg_catalog._oid USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.btoidcmp(pg_catalog.oid, pg_catalog.oid),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE oid;
CREATE OPERATOR CLASS _oidvector_ops DEFAULT FOR TYPE pg_catalog._oidvector USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.btoidvectorcmp(pg_catalog.oidvector, pg_catalog.oidvector),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE oidvector;
CREATE OPERATOR CLASS _reltime_ops DEFAULT FOR TYPE pg_catalog._reltime USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.btreltimecmp(pg_catalog.reltime, pg_catalog.reltime),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE reltime;
CREATE OPERATOR CLASS _text_ops DEFAULT FOR TYPE pg_catalog._text USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.bttextcmp(pg_catalog.text, pg_catalog.text),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE text;
CREATE OPERATOR CLASS _time_ops DEFAULT FOR TYPE pg_catalog._time USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.time_cmp(pg_catalog."time", pg_catalog."time"),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE "time";
CREATE OPERATOR CLASS _timestamp_ops DEFAULT FOR TYPE pg_catalog._timestamp USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.timestamp_cmp(pg_catalog."timestamp", pg_catalog."timestamp"),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE "timestamp";
CREATE OPERATOR CLASS _timestamptz_ops DEFAULT FOR TYPE pg_catalog._timestamptz USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.timestamptz_cmp(pg_catalog.timestamptz, pg_catalog.timestamptz),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE timestamptz;
CREATE OPERATOR CLASS _timetz_ops DEFAULT FOR TYPE pg_catalog._timetz USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.timetz_cmp(pg_catalog.timetz, pg_catalog.timetz),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE timetz;
CREATE OPERATOR CLASS _tinterval_ops DEFAULT FOR TYPE pg_catalog._tinterval USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.bttintervalcmp(pg_catalog.tinterval, pg_catalog.tinterval),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE tinterval;
CREATE OPERATOR CLASS _varbit_ops DEFAULT FOR TYPE pg_catalog._varbit USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.varbitcmp(pg_catalog.varbit, pg_catalog.varbit),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE varbit;
CREATE OPERATOR CLASS _varchar_ops DEFAULT FOR TYPE pg_catalog._varchar USING gin AS   OPERATOR 1 pg_catalog.&&(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.@>(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.<@(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   OPERATOR 4 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray) RECHECK,   FUNCTION 1 pg_catalog.bttextcmp(pg_catalog.text, pg_catalog.text),   FUNCTION 2 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 3 pg_catalog.ginarrayextract(pg_catalog.anyarray, pg_catalog.internal),   FUNCTION 4 pg_catalog.ginarrayconsistent(pg_catalog.internal, pg_catalog.int2, pg_catalog.internal),   STORAGE "varchar";
CREATE OPERATOR CLASS abstime_ops DEFAULT FOR TYPE pg_catalog.abstime USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.abstime, pg_catalog.abstime),   OPERATOR 2 pg_catalog.<=(pg_catalog.abstime, pg_catalog.abstime),   OPERATOR 3 pg_catalog.=(pg_catalog.abstime, pg_catalog.abstime),   OPERATOR 4 pg_catalog.>=(pg_catalog.abstime, pg_catalog.abstime),   OPERATOR 5 pg_catalog.>(pg_catalog.abstime, pg_catalog.abstime),   FUNCTION 1 pg_catalog.btabstimecmp(pg_catalog.abstime, pg_catalog.abstime);
CREATE OPERATOR CLASS abstime_ops DEFAULT FOR TYPE pg_catalog.abstime USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.abstime, pg_catalog.abstime),   OPERATOR 2 pg_catalog.<=(pg_catalog.abstime, pg_catalog.abstime),   OPERATOR 3 pg_catalog.=(pg_catalog.abstime, pg_catalog.abstime),   OPERATOR 4 pg_catalog.>=(pg_catalog.abstime, pg_catalog.abstime),   OPERATOR 5 pg_catalog.>(pg_catalog.abstime, pg_catalog.abstime),   FUNCTION 1 pg_catalog.btabstimecmp(pg_catalog.abstime, pg_catalog.abstime);
CREATE OPERATOR CLASS abstime_ops DEFAULT FOR TYPE pg_catalog.abstime USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.abstime, pg_catalog.abstime),   FUNCTION 1 pg_catalog.hashint4(pg_catalog.int4);
CREATE OPERATOR CLASS aclitem_ops DEFAULT FOR TYPE pg_catalog.aclitem USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.aclitem, pg_catalog.aclitem),   FUNCTION 1 pg_catalog.hash_aclitem(pg_catalog.aclitem);
CREATE OPERATOR CLASS array_ops DEFAULT FOR TYPE pg_catalog.anyarray USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.<=(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 4 pg_catalog.>=(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 5 pg_catalog.>(pg_catalog.anyarray, pg_catalog.anyarray),   FUNCTION 1 pg_catalog.btarraycmp(pg_catalog.anyarray, pg_catalog.anyarray);
CREATE OPERATOR CLASS array_ops DEFAULT FOR TYPE pg_catalog.anyarray USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 2 pg_catalog.<=(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 3 pg_catalog.=(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 4 pg_catalog.>=(pg_catalog.anyarray, pg_catalog.anyarray),   OPERATOR 5 pg_catalog.>(pg_catalog.anyarray, pg_catalog.anyarray),   FUNCTION 1 pg_catalog.btarraycmp(pg_catalog.anyarray, pg_catalog.anyarray);
CREATE OPERATOR CLASS bit_ops DEFAULT FOR TYPE pg_catalog."bit" USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.bit, pg_catalog.bit),   OPERATOR 2 pg_catalog.<=(pg_catalog.bit, pg_catalog.bit),   OPERATOR 3 pg_catalog.=(pg_catalog.bit, pg_catalog.bit),   OPERATOR 4 pg_catalog.>=(pg_catalog.bit, pg_catalog.bit),   OPERATOR 5 pg_catalog.>(pg_catalog.bit, pg_catalog.bit),   FUNCTION 1 pg_catalog.bitcmp(pg_catalog."bit", pg_catalog."bit");
CREATE OPERATOR CLASS bit_ops DEFAULT FOR TYPE pg_catalog."bit" USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.bit, pg_catalog.bit),   OPERATOR 2 pg_catalog.<=(pg_catalog.bit, pg_catalog.bit),   OPERATOR 3 pg_catalog.=(pg_catalog.bit, pg_catalog.bit),   OPERATOR 4 pg_catalog.>=(pg_catalog.bit, pg_catalog.bit),   OPERATOR 5 pg_catalog.>(pg_catalog.bit, pg_catalog.bit),   FUNCTION 1 pg_catalog.bitcmp(pg_catalog."bit", pg_catalog."bit");
CREATE OPERATOR CLASS bool_ops DEFAULT FOR TYPE pg_catalog.bool USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.bool, pg_catalog.bool),   OPERATOR 2 pg_catalog.<=(pg_catalog.bool, pg_catalog.bool),   OPERATOR 3 pg_catalog.=(pg_catalog.bool, pg_catalog.bool),   OPERATOR 4 pg_catalog.>=(pg_catalog.bool, pg_catalog.bool),   OPERATOR 5 pg_catalog.>(pg_catalog.bool, pg_catalog.bool),   FUNCTION 1 pg_catalog.btboolcmp(pg_catalog.bool, pg_catalog.bool);
CREATE OPERATOR CLASS bool_ops DEFAULT FOR TYPE pg_catalog.bool USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.bool, pg_catalog.bool),   OPERATOR 2 pg_catalog.<=(pg_catalog.bool, pg_catalog.bool),   OPERATOR 3 pg_catalog.=(pg_catalog.bool, pg_catalog.bool),   OPERATOR 4 pg_catalog.>=(pg_catalog.bool, pg_catalog.bool),   OPERATOR 5 pg_catalog.>(pg_catalog.bool, pg_catalog.bool),   FUNCTION 1 pg_catalog.btboolcmp(pg_catalog.bool, pg_catalog.bool);
CREATE OPERATOR CLASS bool_ops DEFAULT FOR TYPE pg_catalog.bool USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.bool, pg_catalog.bool),   FUNCTION 1 pg_catalog.hashchar(pg_catalog."char");
CREATE OPERATOR CLASS box_ops DEFAULT FOR TYPE pg_catalog.box USING gist AS   OPERATOR 1 pg_catalog.<<(pg_catalog.box, pg_catalog.box),   OPERATOR 2 pg_catalog.&<(pg_catalog.box, pg_catalog.box),   OPERATOR 3 pg_catalog.&&(pg_catalog.box, pg_catalog.box),   OPERATOR 4 pg_catalog.&>(pg_catalog.box, pg_catalog.box),   OPERATOR 5 pg_catalog.>>(pg_catalog.box, pg_catalog.box),   OPERATOR 6 pg_catalog.~=(pg_catalog.box, pg_catalog.box),   OPERATOR 7 pg_catalog.@>(pg_catalog.box, pg_catalog.box),   OPERATOR 8 pg_catalog.<@(pg_catalog.box, pg_catalog.box),   OPERATOR 9 pg_catalog.&<|(pg_catalog.box, pg_catalog.box),   OPERATOR 10 pg_catalog.<<|(pg_catalog.box, pg_catalog.box),   OPERATOR 11 pg_catalog.|>>(pg_catalog.box, pg_catalog.box),   OPERATOR 12 pg_catalog.|&>(pg_catalog.box, pg_catalog.box),   OPERATOR 13 pg_catalog.~(pg_catalog.box, pg_catalog.box),   OPERATOR 14 pg_catalog.@(pg_catalog.box, pg_catalog.box),   FUNCTION 1 pg_catalog.gist_box_consistent(pg_catalog.internal, pg_catalog.box, pg_catalog.int4),   FUNCTION 2 pg_catalog.gist_box_union(pg_catalog.internal, pg_catalog.internal),   FUNCTION 3 pg_catalog.gist_box_compress(pg_catalog.internal),   FUNCTION 4 pg_catalog.gist_box_decompress(pg_catalog.internal),   FUNCTION 5 pg_catalog.gist_box_penalty(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal),   FUNCTION 6 pg_catalog.gist_box_picksplit(pg_catalog.internal, pg_catalog.internal),   FUNCTION 7 pg_catalog.gist_box_same(pg_catalog.box, pg_catalog.box, pg_catalog.internal);
CREATE OPERATOR CLASS bpchar_ops DEFAULT FOR TYPE pg_catalog.bpchar USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.bpchar, pg_catalog.bpchar),   OPERATOR 2 pg_catalog.<=(pg_catalog.bpchar, pg_catalog.bpchar),   OPERATOR 3 pg_catalog.=(pg_catalog.bpchar, pg_catalog.bpchar),   OPERATOR 4 pg_catalog.>=(pg_catalog.bpchar, pg_catalog.bpchar),   OPERATOR 5 pg_catalog.>(pg_catalog.bpchar, pg_catalog.bpchar),   FUNCTION 1 pg_catalog.bpcharcmp(pg_catalog.bpchar, pg_catalog.bpchar);
CREATE OPERATOR CLASS bpchar_ops DEFAULT FOR TYPE pg_catalog.bpchar USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.bpchar, pg_catalog.bpchar),   OPERATOR 2 pg_catalog.<=(pg_catalog.bpchar, pg_catalog.bpchar),   OPERATOR 3 pg_catalog.=(pg_catalog.bpchar, pg_catalog.bpchar),   OPERATOR 4 pg_catalog.>=(pg_catalog.bpchar, pg_catalog.bpchar),   OPERATOR 5 pg_catalog.>(pg_catalog.bpchar, pg_catalog.bpchar),   FUNCTION 1 pg_catalog.bpcharcmp(pg_catalog.bpchar, pg_catalog.bpchar);
CREATE OPERATOR CLASS bpchar_ops DEFAULT FOR TYPE pg_catalog.bpchar USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.bpchar, pg_catalog.bpchar),   FUNCTION 1 pg_catalog.hashbpchar(pg_catalog.bpchar);
CREATE OPERATOR CLASS bpchar_pattern_ops FOR TYPE pg_catalog.bpchar USING bitmap AS   OPERATOR 1 pg_catalog.~<~(pg_catalog.bpchar, pg_catalog.bpchar),   OPERATOR 2 pg_catalog.~<=~(pg_catalog.bpchar, pg_catalog.bpchar),   OPERATOR 3 pg_catalog.~=~(pg_catalog.bpchar, pg_catalog.bpchar),   OPERATOR 4 pg_catalog.~>=~(pg_catalog.bpchar, pg_catalog.bpchar),   OPERATOR 5 pg_catalog.~>~(pg_catalog.bpchar, pg_catalog.bpchar),   FUNCTION 1 pg_catalog.btbpchar_pattern_cmp(pg_catalog.bpchar, pg_catalog.bpchar);
CREATE OPERATOR CLASS bpchar_pattern_ops FOR TYPE pg_catalog.bpchar USING btree AS   OPERATOR 1 pg_catalog.~<~(pg_catalog.bpchar, pg_catalog.bpchar),   OPERATOR 2 pg_catalog.~<=~(pg_catalog.bpchar, pg_catalog.bpchar),   OPERATOR 3 pg_catalog.~=~(pg_catalog.bpchar, pg_catalog.bpchar),   OPERATOR 4 pg_catalog.~>=~(pg_catalog.bpchar, pg_catalog.bpchar),   OPERATOR 5 pg_catalog.~>~(pg_catalog.bpchar, pg_catalog.bpchar),   FUNCTION 1 pg_catalog.btbpchar_pattern_cmp(pg_catalog.bpchar, pg_catalog.bpchar);
CREATE OPERATOR CLASS bpchar_pattern_ops FOR TYPE pg_catalog.bpchar USING hash AS   OPERATOR 1 pg_catalog.~=~(pg_catalog.bpchar, pg_catalog.bpchar),   FUNCTION 1 pg_catalog.hashvarlena(pg_catalog.internal);
CREATE OPERATOR CLASS bytea_ops DEFAULT FOR TYPE pg_catalog.bytea USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.bytea, pg_catalog.bytea),   OPERATOR 2 pg_catalog.<=(pg_catalog.bytea, pg_catalog.bytea),   OPERATOR 3 pg_catalog.=(pg_catalog.bytea, pg_catalog.bytea),   OPERATOR 4 pg_catalog.>=(pg_catalog.bytea, pg_catalog.bytea),   OPERATOR 5 pg_catalog.>(pg_catalog.bytea, pg_catalog.bytea),   FUNCTION 1 pg_catalog.byteacmp(pg_catalog.bytea, pg_catalog.bytea);
CREATE OPERATOR CLASS bytea_ops DEFAULT FOR TYPE pg_catalog.bytea USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.bytea, pg_catalog.bytea),   OPERATOR 2 pg_catalog.<=(pg_catalog.bytea, pg_catalog.bytea),   OPERATOR 3 pg_catalog.=(pg_catalog.bytea, pg_catalog.bytea),   OPERATOR 4 pg_catalog.>=(pg_catalog.bytea, pg_catalog.bytea),   OPERATOR 5 pg_catalog.>(pg_catalog.bytea, pg_catalog.bytea),   FUNCTION 1 pg_catalog.byteacmp(pg_catalog.bytea, pg_catalog.bytea);
CREATE OPERATOR CLASS bytea_ops DEFAULT FOR TYPE pg_catalog.bytea USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.bytea, pg_catalog.bytea),   FUNCTION 1 pg_catalog.hashvarlena(pg_catalog.internal);
CREATE OPERATOR CLASS char_ops DEFAULT FOR TYPE pg_catalog."char" USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.char, pg_catalog.char),   OPERATOR 2 pg_catalog.<=(pg_catalog.char, pg_catalog.char),   OPERATOR 3 pg_catalog.=(pg_catalog.char, pg_catalog.char),   OPERATOR 4 pg_catalog.>=(pg_catalog.char, pg_catalog.char),   OPERATOR 5 pg_catalog.>(pg_catalog.char, pg_catalog.char),   FUNCTION 1 pg_catalog.btcharcmp(pg_catalog."char", pg_catalog."char");
CREATE OPERATOR CLASS char_ops DEFAULT FOR TYPE pg_catalog."char" USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.char, pg_catalog.char),   OPERATOR 2 pg_catalog.<=(pg_catalog.char, pg_catalog.char),   OPERATOR 3 pg_catalog.=(pg_catalog.char, pg_catalog.char),   OPERATOR 4 pg_catalog.>=(pg_catalog.char, pg_catalog.char),   OPERATOR 5 pg_catalog.>(pg_catalog.char, pg_catalog.char),   FUNCTION 1 pg_catalog.btcharcmp(pg_catalog."char", pg_catalog."char");
CREATE OPERATOR CLASS char_ops DEFAULT FOR TYPE pg_catalog."char" USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.char, pg_catalog.char),   FUNCTION 1 pg_catalog.hashchar(pg_catalog."char");
CREATE OPERATOR CLASS cid_ops DEFAULT FOR TYPE pg_catalog.cid USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.cid, pg_catalog.cid),   FUNCTION 1 pg_catalog.hashint4(pg_catalog.int4);
CREATE OPERATOR CLASS cidr_ops  FOR TYPE pg_catalog.inet USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.inet, pg_catalog.inet),   OPERATOR 2 pg_catalog.<=(pg_catalog.inet, pg_catalog.inet),   OPERATOR 3 pg_catalog.=(pg_catalog.inet, pg_catalog.inet),   OPERATOR 4 pg_catalog.>=(pg_catalog.inet, pg_catalog.inet),   OPERATOR 5 pg_catalog.>(pg_catalog.inet, pg_catalog.inet),   FUNCTION 1 pg_catalog.network_cmp(pg_catalog.inet, pg_catalog.inet);
CREATE OPERATOR CLASS cidr_ops  FOR TYPE pg_catalog.inet USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.inet, pg_catalog.inet),   OPERATOR 2 pg_catalog.<=(pg_catalog.inet, pg_catalog.inet),   OPERATOR 3 pg_catalog.=(pg_catalog.inet, pg_catalog.inet),   OPERATOR 4 pg_catalog.>=(pg_catalog.inet, pg_catalog.inet),   OPERATOR 5 pg_catalog.>(pg_catalog.inet, pg_catalog.inet),   FUNCTION 1 pg_catalog.network_cmp(pg_catalog.inet, pg_catalog.inet);
CREATE OPERATOR CLASS cidr_ops  FOR TYPE pg_catalog.inet USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.inet, pg_catalog.inet),   FUNCTION 1 pg_catalog.hashinet(pg_catalog.inet);
CREATE OPERATOR CLASS circle_ops DEFAULT FOR TYPE pg_catalog.circle USING gist AS   OPERATOR 1 pg_catalog.<<(pg_catalog.circle, pg_catalog.circle) RECHECK,   OPERATOR 2 pg_catalog.&<(pg_catalog.circle, pg_catalog.circle) RECHECK,   OPERATOR 3 pg_catalog.&&(pg_catalog.circle, pg_catalog.circle) RECHECK,   OPERATOR 4 pg_catalog.&>(pg_catalog.circle, pg_catalog.circle) RECHECK,   OPERATOR 5 pg_catalog.>>(pg_catalog.circle, pg_catalog.circle) RECHECK,   OPERATOR 6 pg_catalog.~=(pg_catalog.circle, pg_catalog.circle) RECHECK,   OPERATOR 7 pg_catalog.@>(pg_catalog.circle, pg_catalog.circle) RECHECK,   OPERATOR 8 pg_catalog.<@(pg_catalog.circle, pg_catalog.circle) RECHECK,   OPERATOR 9 pg_catalog.&<|(pg_catalog.circle, pg_catalog.circle) RECHECK,   OPERATOR 10 pg_catalog.<<|(pg_catalog.circle, pg_catalog.circle) RECHECK,   OPERATOR 11 pg_catalog.|>>(pg_catalog.circle, pg_catalog.circle) RECHECK,   OPERATOR 12 pg_catalog.|&>(pg_catalog.circle, pg_catalog.circle) RECHECK,   OPERATOR 13 pg_catalog.~(pg_catalog.circle, pg_catalog.circle) RECHECK,   OPERATOR 14 pg_catalog.@(pg_catalog.circle, pg_catalog.circle) RECHECK,   FUNCTION 1 pg_catalog.gist_circle_consistent(pg_catalog.internal, pg_catalog.circle, pg_catalog.int4),   FUNCTION 2 pg_catalog.gist_box_union(pg_catalog.internal, pg_catalog.internal),   FUNCTION 3 pg_catalog.gist_circle_compress(pg_catalog.internal),   FUNCTION 4 pg_catalog.gist_box_decompress(pg_catalog.internal),   FUNCTION 5 pg_catalog.gist_box_penalty(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal),   FUNCTION 6 pg_catalog.gist_box_picksplit(pg_catalog.internal, pg_catalog.internal),   FUNCTION 7 pg_catalog.gist_box_same(pg_catalog.box, pg_catalog.box, pg_catalog.internal),   STORAGE box;
CREATE OPERATOR CLASS date_ops DEFAULT FOR TYPE pg_catalog.date USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.date, pg_catalog.date),   OPERATOR 2 pg_catalog.<=(pg_catalog.date, pg_catalog.date),   OPERATOR 3 pg_catalog.=(pg_catalog.date, pg_catalog.date),   OPERATOR 4 pg_catalog.>=(pg_catalog.date, pg_catalog.date),   OPERATOR 5 pg_catalog.>(pg_catalog.date, pg_catalog.date),   FUNCTION 1 pg_catalog.date_cmp(pg_catalog.date, pg_catalog.date),   OPERATOR 1 pg_catalog.<(pg_catalog.date, pg_catalog.timestamp),   OPERATOR 2 pg_catalog.<=(pg_catalog.date, pg_catalog.timestamp),   OPERATOR 3 pg_catalog.=(pg_catalog.date, pg_catalog.timestamp),   OPERATOR 4 pg_catalog.>=(pg_catalog.date, pg_catalog.timestamp),   OPERATOR 5 pg_catalog.>(pg_catalog.date, pg_catalog.timestamp),   FUNCTION 1 pg_catalog.date_cmp_timestamp(pg_catalog.date, pg_catalog."timestamp"),   OPERATOR 1 pg_catalog.<(pg_catalog.date, pg_catalog.timestamptz),   OPERATOR 2 pg_catalog.<=(pg_catalog.date, pg_catalog.timestamptz),   OPERATOR 3 pg_catalog.=(pg_catalog.date, pg_catalog.timestamptz),   OPERATOR 4 pg_catalog.>=(pg_catalog.date, pg_catalog.timestamptz),   OPERATOR 5 pg_catalog.>(pg_catalog.date, pg_catalog.timestamptz),   FUNCTION 1 pg_catalog.date_cmp_timestamptz(pg_catalog.date, pg_catalog.timestamptz);
CREATE OPERATOR CLASS date_ops DEFAULT FOR TYPE pg_catalog.date USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.date, pg_catalog.date),   OPERATOR 2 pg_catalog.<=(pg_catalog.date, pg_catalog.date),   OPERATOR 3 pg_catalog.=(pg_catalog.date, pg_catalog.date),   OPERATOR 4 pg_catalog.>=(pg_catalog.date, pg_catalog.date),   OPERATOR 5 pg_catalog.>(pg_catalog.date, pg_catalog.date),   FUNCTION 1 pg_catalog.date_cmp(pg_catalog.date, pg_catalog.date),   OPERATOR 1 pg_catalog.<(pg_catalog.date, pg_catalog.timestamp),   OPERATOR 2 pg_catalog.<=(pg_catalog.date, pg_catalog.timestamp),   OPERATOR 3 pg_catalog.=(pg_catalog.date, pg_catalog.timestamp),   OPERATOR 4 pg_catalog.>=(pg_catalog.date, pg_catalog.timestamp),   OPERATOR 5 pg_catalog.>(pg_catalog.date, pg_catalog.timestamp),   FUNCTION 1 pg_catalog.date_cmp_timestamp(pg_catalog.date, pg_catalog."timestamp"),   OPERATOR 1 pg_catalog.<(pg_catalog.date, pg_catalog.timestamptz),   OPERATOR 2 pg_catalog.<=(pg_catalog.date, pg_catalog.timestamptz),   OPERATOR 3 pg_catalog.=(pg_catalog.date, pg_catalog.timestamptz),   OPERATOR 4 pg_catalog.>=(pg_catalog.date, pg_catalog.timestamptz),   OPERATOR 5 pg_catalog.>(pg_catalog.date, pg_catalog.timestamptz),   FUNCTION 1 pg_catalog.date_cmp_timestamptz(pg_catalog.date, pg_catalog.timestamptz);
CREATE OPERATOR CLASS date_ops DEFAULT FOR TYPE pg_catalog.date USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.date, pg_catalog.date),   FUNCTION 1 pg_catalog.hashint4(pg_catalog.int4);
CREATE OPERATOR CLASS float4_ops DEFAULT FOR TYPE pg_catalog.float4 USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.float4, pg_catalog.float4),   OPERATOR 2 pg_catalog.<=(pg_catalog.float4, pg_catalog.float4),   OPERATOR 3 pg_catalog.=(pg_catalog.float4, pg_catalog.float4),   OPERATOR 4 pg_catalog.>=(pg_catalog.float4, pg_catalog.float4),   OPERATOR 5 pg_catalog.>(pg_catalog.float4, pg_catalog.float4),   FUNCTION 1 pg_catalog.btfloat4cmp(pg_catalog.float4, pg_catalog.float4),   OPERATOR 1 pg_catalog.<(pg_catalog.float4, pg_catalog.float8),   OPERATOR 2 pg_catalog.<=(pg_catalog.float4, pg_catalog.float8),   OPERATOR 3 pg_catalog.=(pg_catalog.float4, pg_catalog.float8),   OPERATOR 4 pg_catalog.>=(pg_catalog.float4, pg_catalog.float8),   OPERATOR 5 pg_catalog.>(pg_catalog.float4, pg_catalog.float8),   FUNCTION 1 pg_catalog.btfloat48cmp(pg_catalog.float4, pg_catalog.float8);
CREATE OPERATOR CLASS float4_ops DEFAULT FOR TYPE pg_catalog.float4 USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.float4, pg_catalog.float4),   OPERATOR 2 pg_catalog.<=(pg_catalog.float4, pg_catalog.float4),   OPERATOR 3 pg_catalog.=(pg_catalog.float4, pg_catalog.float4),   OPERATOR 4 pg_catalog.>=(pg_catalog.float4, pg_catalog.float4),   OPERATOR 5 pg_catalog.>(pg_catalog.float4, pg_catalog.float4),   FUNCTION 1 pg_catalog.btfloat4cmp(pg_catalog.float4, pg_catalog.float4),   OPERATOR 1 pg_catalog.<(pg_catalog.float4, pg_catalog.float8),   OPERATOR 2 pg_catalog.<=(pg_catalog.float4, pg_catalog.float8),   OPERATOR 3 pg_catalog.=(pg_catalog.float4, pg_catalog.float8),   OPERATOR 4 pg_catalog.>=(pg_catalog.float4, pg_catalog.float8),   OPERATOR 5 pg_catalog.>(pg_catalog.float4, pg_catalog.float8),   FUNCTION 1 pg_catalog.btfloat48cmp(pg_catalog.float4, pg_catalog.float8);
CREATE OPERATOR CLASS float4_ops DEFAULT FOR TYPE pg_catalog.float4 USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.float4, pg_catalog.float4),   FUNCTION 1 pg_catalog.hashfloat4(pg_catalog.float4);
CREATE OPERATOR CLASS float8_ops DEFAULT FOR TYPE pg_catalog.float8 USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.float8, pg_catalog.float8),   OPERATOR 2 pg_catalog.<=(pg_catalog.float8, pg_catalog.float8),   OPERATOR 3 pg_catalog.=(pg_catalog.float8, pg_catalog.float8),   OPERATOR 4 pg_catalog.>=(pg_catalog.float8, pg_catalog.float8),   OPERATOR 5 pg_catalog.>(pg_catalog.float8, pg_catalog.float8),   FUNCTION 1 pg_catalog.btfloat8cmp(pg_catalog.float8, pg_catalog.float8),   OPERATOR 1 pg_catalog.<(pg_catalog.float8, pg_catalog.float4),   OPERATOR 2 pg_catalog.<=(pg_catalog.float8, pg_catalog.float4),   OPERATOR 3 pg_catalog.=(pg_catalog.float8, pg_catalog.float4),   OPERATOR 4 pg_catalog.>=(pg_catalog.float8, pg_catalog.float4),   OPERATOR 5 pg_catalog.>(pg_catalog.float8, pg_catalog.float4),   FUNCTION 1 pg_catalog.btfloat84cmp(pg_catalog.float8, pg_catalog.float4);
CREATE OPERATOR CLASS float8_ops DEFAULT FOR TYPE pg_catalog.float8 USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.float8, pg_catalog.float8),   OPERATOR 2 pg_catalog.<=(pg_catalog.float8, pg_catalog.float8),   OPERATOR 3 pg_catalog.=(pg_catalog.float8, pg_catalog.float8),   OPERATOR 4 pg_catalog.>=(pg_catalog.float8, pg_catalog.float8),   OPERATOR 5 pg_catalog.>(pg_catalog.float8, pg_catalog.float8),   FUNCTION 1 pg_catalog.btfloat8cmp(pg_catalog.float8, pg_catalog.float8),   OPERATOR 1 pg_catalog.<(pg_catalog.float8, pg_catalog.float4),   OPERATOR 2 pg_catalog.<=(pg_catalog.float8, pg_catalog.float4),   OPERATOR 3 pg_catalog.=(pg_catalog.float8, pg_catalog.float4),   OPERATOR 4 pg_catalog.>=(pg_catalog.float8, pg_catalog.float4),   OPERATOR 5 pg_catalog.>(pg_catalog.float8, pg_catalog.float4),   FUNCTION 1 pg_catalog.btfloat84cmp(pg_catalog.float8, pg_catalog.float4);
CREATE OPERATOR CLASS float8_ops DEFAULT FOR TYPE pg_catalog.float8 USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.float8, pg_catalog.float8),   FUNCTION 1 pg_catalog.hashfloat8(pg_catalog.float8);
CREATE OPERATOR CLASS inet_ops DEFAULT FOR TYPE pg_catalog.inet USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.inet, pg_catalog.inet),   OPERATOR 2 pg_catalog.<=(pg_catalog.inet, pg_catalog.inet),   OPERATOR 3 pg_catalog.=(pg_catalog.inet, pg_catalog.inet),   OPERATOR 4 pg_catalog.>=(pg_catalog.inet, pg_catalog.inet),   OPERATOR 5 pg_catalog.>(pg_catalog.inet, pg_catalog.inet),   FUNCTION 1 pg_catalog.network_cmp(pg_catalog.inet, pg_catalog.inet);
CREATE OPERATOR CLASS inet_ops DEFAULT FOR TYPE pg_catalog.inet USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.inet, pg_catalog.inet),   OPERATOR 2 pg_catalog.<=(pg_catalog.inet, pg_catalog.inet),   OPERATOR 3 pg_catalog.=(pg_catalog.inet, pg_catalog.inet),   OPERATOR 4 pg_catalog.>=(pg_catalog.inet, pg_catalog.inet),   OPERATOR 5 pg_catalog.>(pg_catalog.inet, pg_catalog.inet),   FUNCTION 1 pg_catalog.network_cmp(pg_catalog.inet, pg_catalog.inet);
CREATE OPERATOR CLASS inet_ops DEFAULT FOR TYPE pg_catalog.inet USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.inet, pg_catalog.inet),   FUNCTION 1 pg_catalog.hashinet(pg_catalog.inet);
CREATE OPERATOR CLASS int2_ops DEFAULT FOR TYPE pg_catalog.int2 USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.int2, pg_catalog.int2),   OPERATOR 2 pg_catalog.<=(pg_catalog.int2, pg_catalog.int2),   OPERATOR 3 pg_catalog.=(pg_catalog.int2, pg_catalog.int2),   OPERATOR 4 pg_catalog.>=(pg_catalog.int2, pg_catalog.int2),   OPERATOR 5 pg_catalog.>(pg_catalog.int2, pg_catalog.int2),   FUNCTION 1 pg_catalog.btint2cmp(pg_catalog.int2, pg_catalog.int2),   OPERATOR 1 pg_catalog.<(pg_catalog.int2, pg_catalog.int8),   OPERATOR 2 pg_catalog.<=(pg_catalog.int2, pg_catalog.int8),   OPERATOR 3 pg_catalog.=(pg_catalog.int2, pg_catalog.int8),   OPERATOR 4 pg_catalog.>=(pg_catalog.int2, pg_catalog.int8),   OPERATOR 5 pg_catalog.>(pg_catalog.int2, pg_catalog.int8),   FUNCTION 1 pg_catalog.btint28cmp(pg_catalog.int2, pg_catalog.int8),   OPERATOR 1 pg_catalog.<(pg_catalog.int2, pg_catalog.int4),   OPERATOR 2 pg_catalog.<=(pg_catalog.int2, pg_catalog.int4),   OPERATOR 3 pg_catalog.=(pg_catalog.int2, pg_catalog.int4),   OPERATOR 4 pg_catalog.>=(pg_catalog.int2, pg_catalog.int4),   OPERATOR 5 pg_catalog.>(pg_catalog.int2, pg_catalog.int4),   FUNCTION 1 pg_catalog.btint24cmp(pg_catalog.int2, pg_catalog.int4);
CREATE OPERATOR CLASS int2_ops DEFAULT FOR TYPE pg_catalog.int2 USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.int2, pg_catalog.int2),   OPERATOR 2 pg_catalog.<=(pg_catalog.int2, pg_catalog.int2),   OPERATOR 3 pg_catalog.=(pg_catalog.int2, pg_catalog.int2),   OPERATOR 4 pg_catalog.>=(pg_catalog.int2, pg_catalog.int2),   OPERATOR 5 pg_catalog.>(pg_catalog.int2, pg_catalog.int2),   FUNCTION 1 pg_catalog.btint2cmp(pg_catalog.int2, pg_catalog.int2),   OPERATOR 1 pg_catalog.<(pg_catalog.int2, pg_catalog.int8),   OPERATOR 2 pg_catalog.<=(pg_catalog.int2, pg_catalog.int8),   OPERATOR 3 pg_catalog.=(pg_catalog.int2, pg_catalog.int8),   OPERATOR 4 pg_catalog.>=(pg_catalog.int2, pg_catalog.int8),   OPERATOR 5 pg_catalog.>(pg_catalog.int2, pg_catalog.int8),   FUNCTION 1 pg_catalog.btint28cmp(pg_catalog.int2, pg_catalog.int8),   OPERATOR 1 pg_catalog.<(pg_catalog.int2, pg_catalog.int4),   OPERATOR 2 pg_catalog.<=(pg_catalog.int2, pg_catalog.int4),   OPERATOR 3 pg_catalog.=(pg_catalog.int2, pg_catalog.int4),   OPERATOR 4 pg_catalog.>=(pg_catalog.int2, pg_catalog.int4),   OPERATOR 5 pg_catalog.>(pg_catalog.int2, pg_catalog.int4),   FUNCTION 1 pg_catalog.btint24cmp(pg_catalog.int2, pg_catalog.int4);
CREATE OPERATOR CLASS int2_ops DEFAULT FOR TYPE pg_catalog.int2 USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.int2, pg_catalog.int2),   FUNCTION 1 pg_catalog.hashint2(pg_catalog.int2);
CREATE OPERATOR CLASS int2vector_ops DEFAULT FOR TYPE pg_catalog.int2vector USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.int2vector, pg_catalog.int2vector),   FUNCTION 1 pg_catalog.hashint2vector(pg_catalog.int2vector);
CREATE OPERATOR CLASS int4_ops DEFAULT FOR TYPE pg_catalog.int4 USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.int4, pg_catalog.int4),   OPERATOR 2 pg_catalog.<=(pg_catalog.int4, pg_catalog.int4),   OPERATOR 3 pg_catalog.=(pg_catalog.int4, pg_catalog.int4),   OPERATOR 4 pg_catalog.>=(pg_catalog.int4, pg_catalog.int4),   OPERATOR 5 pg_catalog.>(pg_catalog.int4, pg_catalog.int4),   FUNCTION 1 pg_catalog.btint4cmp(pg_catalog.int4, pg_catalog.int4),   OPERATOR 1 pg_catalog.<(pg_catalog.int4, pg_catalog.int8),   OPERATOR 2 pg_catalog.<=(pg_catalog.int4, pg_catalog.int8),   OPERATOR 3 pg_catalog.=(pg_catalog.int4, pg_catalog.int8),   OPERATOR 4 pg_catalog.>=(pg_catalog.int4, pg_catalog.int8),   OPERATOR 5 pg_catalog.>(pg_catalog.int4, pg_catalog.int8),   FUNCTION 1 pg_catalog.btint42cmp(pg_catalog.int4, pg_catalog.int2),   OPERATOR 1 pg_catalog.<(pg_catalog.int4, pg_catalog.int2),   OPERATOR 2 pg_catalog.<=(pg_catalog.int4, pg_catalog.int2),   OPERATOR 3 pg_catalog.=(pg_catalog.int4, pg_catalog.int2),   OPERATOR 4 pg_catalog.>=(pg_catalog.int4, pg_catalog.int2),   OPERATOR 5 pg_catalog.>(pg_catalog.int4, pg_catalog.int2),   FUNCTION 1 pg_catalog.btint48cmp(pg_catalog.int4, pg_catalog.int8);
CREATE OPERATOR CLASS int4_ops DEFAULT FOR TYPE pg_catalog.int4 USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.int4, pg_catalog.int4),   OPERATOR 2 pg_catalog.<=(pg_catalog.int4, pg_catalog.int4),   OPERATOR 3 pg_catalog.=(pg_catalog.int4, pg_catalog.int4),   OPERATOR 4 pg_catalog.>=(pg_catalog.int4, pg_catalog.int4),   OPERATOR 5 pg_catalog.>(pg_catalog.int4, pg_catalog.int4),   FUNCTION 1 pg_catalog.btint4cmp(pg_catalog.int4, pg_catalog.int4),   OPERATOR 1 pg_catalog.<(pg_catalog.int4, pg_catalog.int8),   OPERATOR 2 pg_catalog.<=(pg_catalog.int4, pg_catalog.int8),   OPERATOR 3 pg_catalog.=(pg_catalog.int4, pg_catalog.int8),   OPERATOR 4 pg_catalog.>=(pg_catalog.int4, pg_catalog.int8),   OPERATOR 5 pg_catalog.>(pg_catalog.int4, pg_catalog.int8),   FUNCTION 1 pg_catalog.btint48cmp(pg_catalog.int4, pg_catalog.int8),   OPERATOR 1 pg_catalog.<(pg_catalog.int4, pg_catalog.int2),   OPERATOR 2 pg_catalog.<=(pg_catalog.int4, pg_catalog.int2),   OPERATOR 3 pg_catalog.=(pg_catalog.int4, pg_catalog.int2),   OPERATOR 4 pg_catalog.>=(pg_catalog.int4, pg_catalog.int2),   OPERATOR 5 pg_catalog.>(pg_catalog.int4, pg_catalog.int2),   FUNCTION 1 pg_catalog.btint42cmp(pg_catalog.int4, pg_catalog.int2);
CREATE OPERATOR CLASS int4_ops DEFAULT FOR TYPE pg_catalog.int4 USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.int4, pg_catalog.int4),   FUNCTION 1 pg_catalog.hashint4(pg_catalog.int4);
CREATE OPERATOR CLASS int8_ops DEFAULT FOR TYPE pg_catalog.int8 USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.int8, pg_catalog.int8),   OPERATOR 2 pg_catalog.<=(pg_catalog.int8, pg_catalog.int8),   OPERATOR 3 pg_catalog.=(pg_catalog.int8, pg_catalog.int8),   OPERATOR 4 pg_catalog.>=(pg_catalog.int8, pg_catalog.int8),   OPERATOR 5 pg_catalog.>(pg_catalog.int8, pg_catalog.int8),   FUNCTION 1 pg_catalog.btint8cmp(pg_catalog.int8, pg_catalog.int8),   OPERATOR 1 pg_catalog.<(pg_catalog.int8, pg_catalog.int2),   OPERATOR 2 pg_catalog.<=(pg_catalog.int8, pg_catalog.int2),   OPERATOR 3 pg_catalog.=(pg_catalog.int8, pg_catalog.int2),   OPERATOR 4 pg_catalog.>=(pg_catalog.int8, pg_catalog.int2),   OPERATOR 5 pg_catalog.>(pg_catalog.int8, pg_catalog.int2),   FUNCTION 1 pg_catalog.btint82cmp(pg_catalog.int8, pg_catalog.int2),   OPERATOR 1 pg_catalog.<(pg_catalog.int8, pg_catalog.int4),   OPERATOR 2 pg_catalog.<=(pg_catalog.int8, pg_catalog.int4),   OPERATOR 3 pg_catalog.=(pg_catalog.int8, pg_catalog.int4),   OPERATOR 4 pg_catalog.>=(pg_catalog.int8, pg_catalog.int4),   OPERATOR 5 pg_catalog.>(pg_catalog.int8, pg_catalog.int4),   FUNCTION 1 pg_catalog.btint84cmp(pg_catalog.int8, pg_catalog.int4);
CREATE OPERATOR CLASS int8_ops DEFAULT FOR TYPE pg_catalog.int8 USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.int8, pg_catalog.int8),   OPERATOR 2 pg_catalog.<=(pg_catalog.int8, pg_catalog.int8),   OPERATOR 3 pg_catalog.=(pg_catalog.int8, pg_catalog.int8),   OPERATOR 4 pg_catalog.>=(pg_catalog.int8, pg_catalog.int8),   OPERATOR 5 pg_catalog.>(pg_catalog.int8, pg_catalog.int8),   FUNCTION 1 pg_catalog.btint8cmp(pg_catalog.int8, pg_catalog.int8),   OPERATOR 1 pg_catalog.<(pg_catalog.int8, pg_catalog.int2),   OPERATOR 2 pg_catalog.<=(pg_catalog.int8, pg_catalog.int2),   OPERATOR 3 pg_catalog.=(pg_catalog.int8, pg_catalog.int2),   OPERATOR 4 pg_catalog.>=(pg_catalog.int8, pg_catalog.int2),   OPERATOR 5 pg_catalog.>(pg_catalog.int8, pg_catalog.int2),   FUNCTION 1 pg_catalog.btint82cmp(pg_catalog.int8, pg_catalog.int2),   OPERATOR 1 pg_catalog.<(pg_catalog.int8, pg_catalog.int4),   OPERATOR 2 pg_catalog.<=(pg_catalog.int8, pg_catalog.int4),   OPERATOR 3 pg_catalog.=(pg_catalog.int8, pg_catalog.int4),   OPERATOR 4 pg_catalog.>=(pg_catalog.int8, pg_catalog.int4),   OPERATOR 5 pg_catalog.>(pg_catalog.int8, pg_catalog.int4),   FUNCTION 1 pg_catalog.btint84cmp(pg_catalog.int8, pg_catalog.int4);
CREATE OPERATOR CLASS int8_ops DEFAULT FOR TYPE pg_catalog.int8 USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.int8, pg_catalog.int8),   FUNCTION 1 pg_catalog.hashint8(pg_catalog.int8);
CREATE OPERATOR CLASS interval_ops DEFAULT FOR TYPE pg_catalog."interval" USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.interval, pg_catalog.interval),   OPERATOR 2 pg_catalog.<=(pg_catalog.interval, pg_catalog.interval),   OPERATOR 3 pg_catalog.=(pg_catalog.interval, pg_catalog.interval),   OPERATOR 4 pg_catalog.>=(pg_catalog.interval, pg_catalog.interval),   OPERATOR 5 pg_catalog.>(pg_catalog.interval, pg_catalog.interval),   FUNCTION 1 pg_catalog.interval_cmp(pg_catalog."interval", pg_catalog."interval");
CREATE OPERATOR CLASS interval_ops DEFAULT FOR TYPE pg_catalog."interval" USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.interval, pg_catalog.interval),   OPERATOR 2 pg_catalog.<=(pg_catalog.interval, pg_catalog.interval),   OPERATOR 3 pg_catalog.=(pg_catalog.interval, pg_catalog.interval),   OPERATOR 4 pg_catalog.>=(pg_catalog.interval, pg_catalog.interval),   OPERATOR 5 pg_catalog.>(pg_catalog.interval, pg_catalog.interval),   FUNCTION 1 pg_catalog.interval_cmp(pg_catalog."interval", pg_catalog."interval");
CREATE OPERATOR CLASS interval_ops DEFAULT FOR TYPE pg_catalog."interval" USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.interval, pg_catalog.interval),   FUNCTION 1 pg_catalog.interval_hash(pg_catalog."interval");
CREATE OPERATOR CLASS macaddr_ops DEFAULT FOR TYPE pg_catalog.macaddr USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.macaddr, pg_catalog.macaddr),   OPERATOR 2 pg_catalog.<=(pg_catalog.macaddr, pg_catalog.macaddr),   OPERATOR 3 pg_catalog.=(pg_catalog.macaddr, pg_catalog.macaddr),   OPERATOR 4 pg_catalog.>=(pg_catalog.macaddr, pg_catalog.macaddr),   OPERATOR 5 pg_catalog.>(pg_catalog.macaddr, pg_catalog.macaddr),   FUNCTION 1 pg_catalog.macaddr_cmp(pg_catalog.macaddr, pg_catalog.macaddr);
CREATE OPERATOR CLASS macaddr_ops DEFAULT FOR TYPE pg_catalog.macaddr USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.macaddr, pg_catalog.macaddr),   OPERATOR 2 pg_catalog.<=(pg_catalog.macaddr, pg_catalog.macaddr),   OPERATOR 3 pg_catalog.=(pg_catalog.macaddr, pg_catalog.macaddr),   OPERATOR 4 pg_catalog.>=(pg_catalog.macaddr, pg_catalog.macaddr),   OPERATOR 5 pg_catalog.>(pg_catalog.macaddr, pg_catalog.macaddr),   FUNCTION 1 pg_catalog.macaddr_cmp(pg_catalog.macaddr, pg_catalog.macaddr);
CREATE OPERATOR CLASS macaddr_ops DEFAULT FOR TYPE pg_catalog.macaddr USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.macaddr, pg_catalog.macaddr),   FUNCTION 1 pg_catalog.hashmacaddr(pg_catalog.macaddr);
CREATE OPERATOR CLASS money_ops DEFAULT FOR TYPE pg_catalog.money USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.money, pg_catalog.money),   OPERATOR 2 pg_catalog.<=(pg_catalog.money, pg_catalog.money),   OPERATOR 3 pg_catalog.=(pg_catalog.money, pg_catalog.money),   OPERATOR 4 pg_catalog.>=(pg_catalog.money, pg_catalog.money),   OPERATOR 5 pg_catalog.>(pg_catalog.money, pg_catalog.money),   FUNCTION 1 pg_catalog.cash_cmp(pg_catalog.money, pg_catalog.money);
CREATE OPERATOR CLASS money_ops DEFAULT FOR TYPE pg_catalog.money USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.money, pg_catalog.money),   OPERATOR 2 pg_catalog.<=(pg_catalog.money, pg_catalog.money),   OPERATOR 3 pg_catalog.=(pg_catalog.money, pg_catalog.money),   OPERATOR 4 pg_catalog.>=(pg_catalog.money, pg_catalog.money),   OPERATOR 5 pg_catalog.>(pg_catalog.money, pg_catalog.money),   FUNCTION 1 pg_catalog.cash_cmp(pg_catalog.money, pg_catalog.money);
CREATE OPERATOR CLASS name_ops DEFAULT FOR TYPE pg_catalog.name USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.name, pg_catalog.name),   OPERATOR 2 pg_catalog.<=(pg_catalog.name, pg_catalog.name),   OPERATOR 3 pg_catalog.=(pg_catalog.name, pg_catalog.name),   OPERATOR 4 pg_catalog.>=(pg_catalog.name, pg_catalog.name),   OPERATOR 5 pg_catalog.>(pg_catalog.name, pg_catalog.name),   FUNCTION 1 pg_catalog.btnamecmp(pg_catalog.name, pg_catalog.name);
CREATE OPERATOR CLASS name_ops DEFAULT FOR TYPE pg_catalog.name USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.name, pg_catalog.name),   OPERATOR 2 pg_catalog.<=(pg_catalog.name, pg_catalog.name),   OPERATOR 3 pg_catalog.=(pg_catalog.name, pg_catalog.name),   OPERATOR 4 pg_catalog.>=(pg_catalog.name, pg_catalog.name),   OPERATOR 5 pg_catalog.>(pg_catalog.name, pg_catalog.name),   FUNCTION 1 pg_catalog.btnamecmp(pg_catalog.name, pg_catalog.name);
CREATE OPERATOR CLASS name_ops DEFAULT FOR TYPE pg_catalog.name USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.name, pg_catalog.name),   FUNCTION 1 pg_catalog.hashname(pg_catalog.name);
CREATE OPERATOR CLASS name_pattern_ops FOR TYPE pg_catalog.name USING bitmap AS   OPERATOR 1 pg_catalog.~<~(pg_catalog.name, pg_catalog.name),   OPERATOR 2 pg_catalog.~<=~(pg_catalog.name, pg_catalog.name),   OPERATOR 3 pg_catalog.~=~(pg_catalog.name, pg_catalog.name),   OPERATOR 4 pg_catalog.~>=~(pg_catalog.name, pg_catalog.name),   OPERATOR 5 pg_catalog.~>~(pg_catalog.name, pg_catalog.name),   FUNCTION 1 pg_catalog.btname_pattern_cmp(pg_catalog.name, pg_catalog.name);
CREATE OPERATOR CLASS name_pattern_ops FOR TYPE pg_catalog.name USING btree AS   OPERATOR 1 pg_catalog.~<~(pg_catalog.name, pg_catalog.name),   OPERATOR 2 pg_catalog.~<=~(pg_catalog.name, pg_catalog.name),   OPERATOR 3 pg_catalog.~=~(pg_catalog.name, pg_catalog.name),   OPERATOR 4 pg_catalog.~>=~(pg_catalog.name, pg_catalog.name),   OPERATOR 5 pg_catalog.~>~(pg_catalog.name, pg_catalog.name),   FUNCTION 1 pg_catalog.btname_pattern_cmp(pg_catalog.name, pg_catalog.name);
CREATE OPERATOR CLASS name_pattern_ops FOR TYPE pg_catalog.name USING hash AS   OPERATOR 1 pg_catalog.~=~(pg_catalog.name, pg_catalog.name),   FUNCTION 1 pg_catalog.hashname(pg_catalog.name);
CREATE OPERATOR CLASS numeric_ops DEFAULT FOR TYPE pg_catalog."numeric" USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.numeric, pg_catalog.numeric),   OPERATOR 2 pg_catalog.<=(pg_catalog.numeric, pg_catalog.numeric),   OPERATOR 3 pg_catalog.=(pg_catalog.numeric, pg_catalog.numeric),   OPERATOR 4 pg_catalog.>=(pg_catalog.numeric, pg_catalog.numeric),   OPERATOR 5 pg_catalog.>(pg_catalog.numeric, pg_catalog.numeric),   FUNCTION 1 pg_catalog.numeric_cmp(pg_catalog."numeric", pg_catalog."numeric");
CREATE OPERATOR CLASS numeric_ops DEFAULT FOR TYPE pg_catalog."numeric" USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.numeric, pg_catalog.numeric),   OPERATOR 2 pg_catalog.<=(pg_catalog.numeric, pg_catalog.numeric),   OPERATOR 3 pg_catalog.=(pg_catalog.numeric, pg_catalog.numeric),   OPERATOR 4 pg_catalog.>=(pg_catalog.numeric, pg_catalog.numeric),   OPERATOR 5 pg_catalog.>(pg_catalog.numeric, pg_catalog.numeric),   FUNCTION 1 pg_catalog.numeric_cmp(pg_catalog."numeric", pg_catalog."numeric");
CREATE OPERATOR CLASS numeric_ops DEFAULT FOR TYPE pg_catalog."numeric" USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.numeric, pg_catalog.numeric),   FUNCTION 1 pg_catalog.hash_numeric(pg_catalog."numeric");
CREATE OPERATOR CLASS oid_ops DEFAULT FOR TYPE pg_catalog.oid USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.oid, pg_catalog.oid),   OPERATOR 2 pg_catalog.<=(pg_catalog.oid, pg_catalog.oid),   OPERATOR 3 pg_catalog.=(pg_catalog.oid, pg_catalog.oid),   OPERATOR 4 pg_catalog.>=(pg_catalog.oid, pg_catalog.oid),   OPERATOR 5 pg_catalog.>(pg_catalog.oid, pg_catalog.oid),   FUNCTION 1 pg_catalog.btoidcmp(pg_catalog.oid, pg_catalog.oid);
CREATE OPERATOR CLASS oid_ops DEFAULT FOR TYPE pg_catalog.oid USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.oid, pg_catalog.oid),   OPERATOR 2 pg_catalog.<=(pg_catalog.oid, pg_catalog.oid),   OPERATOR 3 pg_catalog.=(pg_catalog.oid, pg_catalog.oid),   OPERATOR 4 pg_catalog.>=(pg_catalog.oid, pg_catalog.oid),   OPERATOR 5 pg_catalog.>(pg_catalog.oid, pg_catalog.oid),   FUNCTION 1 pg_catalog.btoidcmp(pg_catalog.oid, pg_catalog.oid);
CREATE OPERATOR CLASS oid_ops DEFAULT FOR TYPE pg_catalog.oid USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.oid, pg_catalog.oid),   FUNCTION 1 pg_catalog.hashoid(pg_catalog.oid);
CREATE OPERATOR CLASS oidvector_ops DEFAULT FOR TYPE pg_catalog.oidvector USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.oidvector, pg_catalog.oidvector),   OPERATOR 2 pg_catalog.<=(pg_catalog.oidvector, pg_catalog.oidvector),   OPERATOR 3 pg_catalog.=(pg_catalog.oidvector, pg_catalog.oidvector),   OPERATOR 4 pg_catalog.>=(pg_catalog.oidvector, pg_catalog.oidvector),   OPERATOR 5 pg_catalog.>(pg_catalog.oidvector, pg_catalog.oidvector),   FUNCTION 1 pg_catalog.btoidvectorcmp(pg_catalog.oidvector, pg_catalog.oidvector);
CREATE OPERATOR CLASS oidvector_ops DEFAULT FOR TYPE pg_catalog.oidvector USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.oidvector, pg_catalog.oidvector),   OPERATOR 2 pg_catalog.<=(pg_catalog.oidvector, pg_catalog.oidvector),   OPERATOR 3 pg_catalog.=(pg_catalog.oidvector, pg_catalog.oidvector),   OPERATOR 4 pg_catalog.>=(pg_catalog.oidvector, pg_catalog.oidvector),   OPERATOR 5 pg_catalog.>(pg_catalog.oidvector, pg_catalog.oidvector),   FUNCTION 1 pg_catalog.btoidvectorcmp(pg_catalog.oidvector, pg_catalog.oidvector);
CREATE OPERATOR CLASS oidvector_ops DEFAULT FOR TYPE pg_catalog.oidvector USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.oidvector, pg_catalog.oidvector),   FUNCTION 1 pg_catalog.hashoidvector(pg_catalog.oidvector);
CREATE OPERATOR CLASS poly_ops DEFAULT FOR TYPE pg_catalog.polygon USING gist AS   OPERATOR 1 pg_catalog.<<(pg_catalog.polygon, pg_catalog.polygon) RECHECK,   OPERATOR 2 pg_catalog.&<(pg_catalog.polygon, pg_catalog.polygon) RECHECK,   OPERATOR 3 pg_catalog.&&(pg_catalog.polygon, pg_catalog.polygon) RECHECK,   OPERATOR 4 pg_catalog.&>(pg_catalog.polygon, pg_catalog.polygon) RECHECK,   OPERATOR 5 pg_catalog.>>(pg_catalog.polygon, pg_catalog.polygon) RECHECK,   OPERATOR 6 pg_catalog.~=(pg_catalog.polygon, pg_catalog.polygon) RECHECK,   OPERATOR 7 pg_catalog.@>(pg_catalog.polygon, pg_catalog.polygon) RECHECK,   OPERATOR 8 pg_catalog.<@(pg_catalog.polygon, pg_catalog.polygon) RECHECK,   OPERATOR 9 pg_catalog.&<|(pg_catalog.polygon, pg_catalog.polygon) RECHECK,   OPERATOR 10 pg_catalog.<<|(pg_catalog.polygon, pg_catalog.polygon) RECHECK,   OPERATOR 11 pg_catalog.|>>(pg_catalog.polygon, pg_catalog.polygon) RECHECK,   OPERATOR 12 pg_catalog.|&>(pg_catalog.polygon, pg_catalog.polygon) RECHECK,   OPERATOR 13 pg_catalog.~(pg_catalog.polygon, pg_catalog.polygon) RECHECK,   OPERATOR 14 pg_catalog.@(pg_catalog.polygon, pg_catalog.polygon) RECHECK,   FUNCTION 1 pg_catalog.gist_poly_consistent(pg_catalog.internal, pg_catalog.polygon, pg_catalog.int4),   FUNCTION 2 pg_catalog.gist_box_union(pg_catalog.internal, pg_catalog.internal),   FUNCTION 3 pg_catalog.gist_poly_compress(pg_catalog.internal),   FUNCTION 4 pg_catalog.gist_box_decompress(pg_catalog.internal),   FUNCTION 5 pg_catalog.gist_box_penalty(pg_catalog.internal, pg_catalog.internal, pg_catalog.internal),   FUNCTION 6 pg_catalog.gist_box_picksplit(pg_catalog.internal, pg_catalog.internal),   FUNCTION 7 pg_catalog.gist_box_same(pg_catalog.box, pg_catalog.box, pg_catalog.internal),   STORAGE box;
CREATE OPERATOR CLASS reltime_ops DEFAULT FOR TYPE pg_catalog.reltime USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.reltime, pg_catalog.reltime),   OPERATOR 2 pg_catalog.<=(pg_catalog.reltime, pg_catalog.reltime),   OPERATOR 3 pg_catalog.=(pg_catalog.reltime, pg_catalog.reltime),   OPERATOR 4 pg_catalog.>=(pg_catalog.reltime, pg_catalog.reltime),   OPERATOR 5 pg_catalog.>(pg_catalog.reltime, pg_catalog.reltime),   FUNCTION 1 pg_catalog.btreltimecmp(pg_catalog.reltime, pg_catalog.reltime);
CREATE OPERATOR CLASS reltime_ops DEFAULT FOR TYPE pg_catalog.reltime USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.reltime, pg_catalog.reltime),   OPERATOR 2 pg_catalog.<=(pg_catalog.reltime, pg_catalog.reltime),   OPERATOR 3 pg_catalog.=(pg_catalog.reltime, pg_catalog.reltime),   OPERATOR 4 pg_catalog.>=(pg_catalog.reltime, pg_catalog.reltime),   OPERATOR 5 pg_catalog.>(pg_catalog.reltime, pg_catalog.reltime),   FUNCTION 1 pg_catalog.btreltimecmp(pg_catalog.reltime, pg_catalog.reltime);
CREATE OPERATOR CLASS reltime_ops DEFAULT FOR TYPE pg_catalog.reltime USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.reltime, pg_catalog.reltime),   FUNCTION 1 pg_catalog.hashint4(pg_catalog.int4);
CREATE OPERATOR CLASS text_ops DEFAULT FOR TYPE pg_catalog.text USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.text, pg_catalog.text),   OPERATOR 2 pg_catalog.<=(pg_catalog.text, pg_catalog.text),   OPERATOR 3 pg_catalog.=(pg_catalog.text, pg_catalog.text),   OPERATOR 4 pg_catalog.>=(pg_catalog.text, pg_catalog.text),   OPERATOR 5 pg_catalog.>(pg_catalog.text, pg_catalog.text),   FUNCTION 1 pg_catalog.bttextcmp(pg_catalog.text, pg_catalog.text);
CREATE OPERATOR CLASS text_ops DEFAULT FOR TYPE pg_catalog.text USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.text, pg_catalog.text),   OPERATOR 2 pg_catalog.<=(pg_catalog.text, pg_catalog.text),   OPERATOR 3 pg_catalog.=(pg_catalog.text, pg_catalog.text),   OPERATOR 4 pg_catalog.>=(pg_catalog.text, pg_catalog.text),   OPERATOR 5 pg_catalog.>(pg_catalog.text, pg_catalog.text),   FUNCTION 1 pg_catalog.bttextcmp(pg_catalog.text, pg_catalog.text);
CREATE OPERATOR CLASS text_ops DEFAULT FOR TYPE pg_catalog.text USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.text, pg_catalog.text),   FUNCTION 1 pg_catalog.hashtext(pg_catalog.text);
CREATE OPERATOR CLASS text_pattern_ops FOR TYPE pg_catalog.text USING bitmap AS   OPERATOR 1 pg_catalog.~<~(pg_catalog.text, pg_catalog.text),   OPERATOR 2 pg_catalog.~<=~(pg_catalog.text, pg_catalog.text),   OPERATOR 3 pg_catalog.~=~(pg_catalog.text, pg_catalog.text),   OPERATOR 4 pg_catalog.~>=~(pg_catalog.text, pg_catalog.text),   OPERATOR 5 pg_catalog.~>~(pg_catalog.text, pg_catalog.text),   FUNCTION 1 pg_catalog.bttext_pattern_cmp(pg_catalog.text, pg_catalog.text);
CREATE OPERATOR CLASS text_pattern_ops FOR TYPE pg_catalog.text USING btree AS   OPERATOR 1 pg_catalog.~<~(pg_catalog.text, pg_catalog.text),   OPERATOR 2 pg_catalog.~<=~(pg_catalog.text, pg_catalog.text),   OPERATOR 3 pg_catalog.~=~(pg_catalog.text, pg_catalog.text),   OPERATOR 4 pg_catalog.~>=~(pg_catalog.text, pg_catalog.text),   OPERATOR 5 pg_catalog.~>~(pg_catalog.text, pg_catalog.text),   FUNCTION 1 pg_catalog.bttext_pattern_cmp(pg_catalog.text, pg_catalog.text);
CREATE OPERATOR CLASS text_pattern_ops FOR TYPE pg_catalog.text USING hash AS   OPERATOR 1 pg_catalog.~=~(pg_catalog.text, pg_catalog.text),   FUNCTION 1 pg_catalog.hashvarlena(pg_catalog.internal);
CREATE OPERATOR CLASS tid_ops DEFAULT FOR TYPE pg_catalog.tid USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.tid, pg_catalog.tid),   OPERATOR 2 pg_catalog.<=(pg_catalog.tid, pg_catalog.tid),   OPERATOR 3 pg_catalog.=(pg_catalog.tid, pg_catalog.tid),   OPERATOR 4 pg_catalog.>=(pg_catalog.tid, pg_catalog.tid),   OPERATOR 5 pg_catalog.>(pg_catalog.tid, pg_catalog.tid),   FUNCTION 1 pg_catalog.bttidcmp(pg_catalog.tid, pg_catalog.tid);
CREATE OPERATOR CLASS time_ops DEFAULT FOR TYPE pg_catalog."time" USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.time, pg_catalog.time),   OPERATOR 2 pg_catalog.<=(pg_catalog.time, pg_catalog.time),   OPERATOR 3 pg_catalog.=(pg_catalog.time, pg_catalog.time),   OPERATOR 4 pg_catalog.>=(pg_catalog.time, pg_catalog.time),   OPERATOR 5 pg_catalog.>(pg_catalog.time, pg_catalog.time),   FUNCTION 1 pg_catalog.time_cmp(pg_catalog."time", pg_catalog."time");
CREATE OPERATOR CLASS time_ops DEFAULT FOR TYPE pg_catalog."time" USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.time, pg_catalog.time),   OPERATOR 2 pg_catalog.<=(pg_catalog.time, pg_catalog.time),   OPERATOR 3 pg_catalog.=(pg_catalog.time, pg_catalog.time),   OPERATOR 4 pg_catalog.>=(pg_catalog.time, pg_catalog.time),   OPERATOR 5 pg_catalog.>(pg_catalog.time, pg_catalog.time),   FUNCTION 1 pg_catalog.time_cmp(pg_catalog."time", pg_catalog."time");
CREATE OPERATOR CLASS time_ops DEFAULT FOR TYPE pg_catalog."time" USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.time, pg_catalog.time),   FUNCTION 1 pg_catalog.hashfloat8(pg_catalog.float8);
CREATE OPERATOR CLASS timestamp_ops DEFAULT FOR TYPE pg_catalog."timestamp" USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.timestamp, pg_catalog.timestamp),   OPERATOR 2 pg_catalog.<=(pg_catalog.timestamp, pg_catalog.timestamp),   OPERATOR 3 pg_catalog.=(pg_catalog.timestamp, pg_catalog.timestamp),   OPERATOR 4 pg_catalog.>=(pg_catalog.timestamp, pg_catalog.timestamp),   OPERATOR 5 pg_catalog.>(pg_catalog.timestamp, pg_catalog.timestamp),   FUNCTION 1 pg_catalog.timestamp_cmp(pg_catalog."timestamp", pg_catalog."timestamp"),   OPERATOR 1 pg_catalog.<(pg_catalog.timestamp, pg_catalog.date),   OPERATOR 2 pg_catalog.<=(pg_catalog.timestamp, pg_catalog.date),   OPERATOR 3 pg_catalog.=(pg_catalog.timestamp, pg_catalog.date),   OPERATOR 4 pg_catalog.>=(pg_catalog.timestamp, pg_catalog.date),   OPERATOR 5 pg_catalog.>(pg_catalog.timestamp, pg_catalog.date),   FUNCTION 1 pg_catalog.timestamp_cmp_date(pg_catalog."timestamp", pg_catalog.date),   OPERATOR 1 pg_catalog.<(pg_catalog.timestamp, pg_catalog.timestamptz),   OPERATOR 2 pg_catalog.<=(pg_catalog.timestamp, pg_catalog.timestamptz),   OPERATOR 3 pg_catalog.=(pg_catalog.timestamp, pg_catalog.timestamptz),   OPERATOR 4 pg_catalog.>=(pg_catalog.timestamp, pg_catalog.timestamptz),   OPERATOR 5 pg_catalog.>(pg_catalog.timestamp, pg_catalog.timestamptz),   FUNCTION 1 pg_catalog.timestamp_cmp_timestamptz(pg_catalog."timestamp", pg_catalog.timestamptz);
CREATE OPERATOR CLASS timestamp_ops DEFAULT FOR TYPE pg_catalog."timestamp" USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.timestamp, pg_catalog.timestamp),   OPERATOR 2 pg_catalog.<=(pg_catalog.timestamp, pg_catalog.timestamp),   OPERATOR 3 pg_catalog.=(pg_catalog.timestamp, pg_catalog.timestamp),   OPERATOR 4 pg_catalog.>=(pg_catalog.timestamp, pg_catalog.timestamp),   OPERATOR 5 pg_catalog.>(pg_catalog.timestamp, pg_catalog.timestamp),   FUNCTION 1 pg_catalog.timestamp_cmp(pg_catalog."timestamp", pg_catalog."timestamp"),   OPERATOR 1 pg_catalog.<(pg_catalog.timestamp, pg_catalog.date),   OPERATOR 2 pg_catalog.<=(pg_catalog.timestamp, pg_catalog.date),   OPERATOR 3 pg_catalog.=(pg_catalog.timestamp, pg_catalog.date),   OPERATOR 4 pg_catalog.>=(pg_catalog.timestamp, pg_catalog.date),   OPERATOR 5 pg_catalog.>(pg_catalog.timestamp, pg_catalog.date),   FUNCTION 1 pg_catalog.timestamp_cmp_date(pg_catalog."timestamp", pg_catalog.date),   OPERATOR 1 pg_catalog.<(pg_catalog.timestamp, pg_catalog.timestamptz),   OPERATOR 2 pg_catalog.<=(pg_catalog.timestamp, pg_catalog.timestamptz),   OPERATOR 3 pg_catalog.=(pg_catalog.timestamp, pg_catalog.timestamptz),   OPERATOR 4 pg_catalog.>=(pg_catalog.timestamp, pg_catalog.timestamptz),   OPERATOR 5 pg_catalog.>(pg_catalog.timestamp, pg_catalog.timestamptz),   FUNCTION 1 pg_catalog.timestamp_cmp_timestamptz(pg_catalog."timestamp", pg_catalog.timestamptz);
CREATE OPERATOR CLASS timestamp_ops DEFAULT FOR TYPE pg_catalog."timestamp" USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.timestamp, pg_catalog.timestamp),   FUNCTION 1 pg_catalog.hashfloat8(pg_catalog.float8);
CREATE OPERATOR CLASS timestamptz_ops DEFAULT FOR TYPE pg_catalog.timestamptz USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.timestamptz, pg_catalog.timestamptz),   OPERATOR 2 pg_catalog.<=(pg_catalog.timestamptz, pg_catalog.timestamptz),   OPERATOR 3 pg_catalog.=(pg_catalog.timestamptz, pg_catalog.timestamptz),   OPERATOR 4 pg_catalog.>=(pg_catalog.timestamptz, pg_catalog.timestamptz),   OPERATOR 5 pg_catalog.>(pg_catalog.timestamptz, pg_catalog.timestamptz),   FUNCTION 1 pg_catalog.timestamptz_cmp(pg_catalog.timestamptz, pg_catalog.timestamptz),   OPERATOR 1 pg_catalog.<(pg_catalog.timestamptz, pg_catalog.date),   OPERATOR 2 pg_catalog.<=(pg_catalog.timestamptz, pg_catalog.date),   OPERATOR 3 pg_catalog.=(pg_catalog.timestamptz, pg_catalog.date),   OPERATOR 4 pg_catalog.>=(pg_catalog.timestamptz, pg_catalog.date),   OPERATOR 5 pg_catalog.>(pg_catalog.timestamptz, pg_catalog.date),   FUNCTION 1 pg_catalog.timestamptz_cmp_date(pg_catalog.timestamptz, pg_catalog.date),   OPERATOR 1 pg_catalog.<(pg_catalog.timestamptz, pg_catalog.timestamp),   OPERATOR 2 pg_catalog.<=(pg_catalog.timestamptz, pg_catalog.timestamp),   OPERATOR 3 pg_catalog.=(pg_catalog.timestamptz, pg_catalog.timestamp),   OPERATOR 4 pg_catalog.>=(pg_catalog.timestamptz, pg_catalog.timestamp),   OPERATOR 5 pg_catalog.>(pg_catalog.timestamptz, pg_catalog.timestamp),   FUNCTION 1 pg_catalog.timestamptz_cmp_timestamp(pg_catalog.timestamptz, pg_catalog."timestamp");
CREATE OPERATOR CLASS timestamptz_ops DEFAULT FOR TYPE pg_catalog.timestamptz USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.timestamptz, pg_catalog.timestamptz),   OPERATOR 2 pg_catalog.<=(pg_catalog.timestamptz, pg_catalog.timestamptz),   OPERATOR 3 pg_catalog.=(pg_catalog.timestamptz, pg_catalog.timestamptz),   OPERATOR 4 pg_catalog.>=(pg_catalog.timestamptz, pg_catalog.timestamptz),   OPERATOR 5 pg_catalog.>(pg_catalog.timestamptz, pg_catalog.timestamptz),   FUNCTION 1 pg_catalog.timestamptz_cmp(pg_catalog.timestamptz, pg_catalog.timestamptz),   OPERATOR 1 pg_catalog.<(pg_catalog.timestamptz, pg_catalog.date),   OPERATOR 2 pg_catalog.<=(pg_catalog.timestamptz, pg_catalog.date),   OPERATOR 3 pg_catalog.=(pg_catalog.timestamptz, pg_catalog.date),   OPERATOR 4 pg_catalog.>=(pg_catalog.timestamptz, pg_catalog.date),   OPERATOR 5 pg_catalog.>(pg_catalog.timestamptz, pg_catalog.date),   FUNCTION 1 pg_catalog.timestamptz_cmp_date(pg_catalog.timestamptz, pg_catalog.date),   OPERATOR 1 pg_catalog.<(pg_catalog.timestamptz, pg_catalog.timestamp),   OPERATOR 2 pg_catalog.<=(pg_catalog.timestamptz, pg_catalog.timestamp),   OPERATOR 3 pg_catalog.=(pg_catalog.timestamptz, pg_catalog.timestamp),   OPERATOR 4 pg_catalog.>=(pg_catalog.timestamptz, pg_catalog.timestamp),   OPERATOR 5 pg_catalog.>(pg_catalog.timestamptz, pg_catalog.timestamp),   FUNCTION 1 pg_catalog.timestamptz_cmp_timestamp(pg_catalog.timestamptz, pg_catalog."timestamp");
CREATE OPERATOR CLASS timestamptz_ops DEFAULT FOR TYPE pg_catalog.timestamptz USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.timestamptz, pg_catalog.timestamptz),   FUNCTION 1 pg_catalog.hashfloat8(pg_catalog.float8);
CREATE OPERATOR CLASS timetz_ops DEFAULT FOR TYPE pg_catalog.timetz USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.timetz, pg_catalog.timetz),   OPERATOR 2 pg_catalog.<=(pg_catalog.timetz, pg_catalog.timetz),   OPERATOR 3 pg_catalog.=(pg_catalog.timetz, pg_catalog.timetz),   OPERATOR 4 pg_catalog.>=(pg_catalog.timetz, pg_catalog.timetz),   OPERATOR 5 pg_catalog.>(pg_catalog.timetz, pg_catalog.timetz),   FUNCTION 1 pg_catalog.timetz_cmp(pg_catalog.timetz, pg_catalog.timetz);
CREATE OPERATOR CLASS timetz_ops DEFAULT FOR TYPE pg_catalog.timetz USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.timetz, pg_catalog.timetz),   OPERATOR 2 pg_catalog.<=(pg_catalog.timetz, pg_catalog.timetz),   OPERATOR 3 pg_catalog.=(pg_catalog.timetz, pg_catalog.timetz),   OPERATOR 4 pg_catalog.>=(pg_catalog.timetz, pg_catalog.timetz),   OPERATOR 5 pg_catalog.>(pg_catalog.timetz, pg_catalog.timetz),   FUNCTION 1 pg_catalog.timetz_cmp(pg_catalog.timetz, pg_catalog.timetz);
CREATE OPERATOR CLASS timetz_ops DEFAULT FOR TYPE pg_catalog.timetz USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.timetz, pg_catalog.timetz),   FUNCTION 1 pg_catalog.timetz_hash(pg_catalog.timetz);
CREATE OPERATOR CLASS tinterval_ops DEFAULT FOR TYPE pg_catalog.tinterval USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.tinterval, pg_catalog.tinterval),   OPERATOR 2 pg_catalog.<=(pg_catalog.tinterval, pg_catalog.tinterval),   OPERATOR 3 pg_catalog.=(pg_catalog.tinterval, pg_catalog.tinterval),   OPERATOR 4 pg_catalog.>=(pg_catalog.tinterval, pg_catalog.tinterval),   OPERATOR 5 pg_catalog.>(pg_catalog.tinterval, pg_catalog.tinterval),   FUNCTION 1 pg_catalog.bttintervalcmp(pg_catalog.tinterval, pg_catalog.tinterval);
CREATE OPERATOR CLASS tinterval_ops DEFAULT FOR TYPE pg_catalog.tinterval USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.tinterval, pg_catalog.tinterval),   OPERATOR 2 pg_catalog.<=(pg_catalog.tinterval, pg_catalog.tinterval),   OPERATOR 3 pg_catalog.=(pg_catalog.tinterval, pg_catalog.tinterval),   OPERATOR 4 pg_catalog.>=(pg_catalog.tinterval, pg_catalog.tinterval),   OPERATOR 5 pg_catalog.>(pg_catalog.tinterval, pg_catalog.tinterval),   FUNCTION 1 pg_catalog.bttintervalcmp(pg_catalog.tinterval, pg_catalog.tinterval);
CREATE OPERATOR CLASS varbit_ops DEFAULT FOR TYPE pg_catalog.varbit USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.varbit, pg_catalog.varbit),   OPERATOR 2 pg_catalog.<=(pg_catalog.varbit, pg_catalog.varbit),   OPERATOR 3 pg_catalog.=(pg_catalog.varbit, pg_catalog.varbit),   OPERATOR 4 pg_catalog.>=(pg_catalog.varbit, pg_catalog.varbit),   OPERATOR 5 pg_catalog.>(pg_catalog.varbit, pg_catalog.varbit),   FUNCTION 1 pg_catalog.varbitcmp(pg_catalog.varbit, pg_catalog.varbit);
CREATE OPERATOR CLASS varbit_ops DEFAULT FOR TYPE pg_catalog.varbit USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.varbit, pg_catalog.varbit),   OPERATOR 2 pg_catalog.<=(pg_catalog.varbit, pg_catalog.varbit),   OPERATOR 3 pg_catalog.=(pg_catalog.varbit, pg_catalog.varbit),   OPERATOR 4 pg_catalog.>=(pg_catalog.varbit, pg_catalog.varbit),   OPERATOR 5 pg_catalog.>(pg_catalog.varbit, pg_catalog.varbit),   FUNCTION 1 pg_catalog.varbitcmp(pg_catalog.varbit, pg_catalog.varbit);
CREATE OPERATOR CLASS varchar_ops  FOR TYPE pg_catalog.text USING bitmap AS   OPERATOR 1 pg_catalog.<(pg_catalog.text, pg_catalog.text),   OPERATOR 2 pg_catalog.<=(pg_catalog.text, pg_catalog.text),   OPERATOR 3 pg_catalog.=(pg_catalog.text, pg_catalog.text),   OPERATOR 4 pg_catalog.>=(pg_catalog.text, pg_catalog.text),   OPERATOR 5 pg_catalog.>(pg_catalog.text, pg_catalog.text),   FUNCTION 1 pg_catalog.bttextcmp(pg_catalog.text, pg_catalog.text);
CREATE OPERATOR CLASS varchar_ops  FOR TYPE pg_catalog.text USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.text, pg_catalog.text),   OPERATOR 2 pg_catalog.<=(pg_catalog.text, pg_catalog.text),   OPERATOR 3 pg_catalog.=(pg_catalog.text, pg_catalog.text),   OPERATOR 4 pg_catalog.>=(pg_catalog.text, pg_catalog.text),   OPERATOR 5 pg_catalog.>(pg_catalog.text, pg_catalog.text),   FUNCTION 1 pg_catalog.bttextcmp(pg_catalog.text, pg_catalog.text);
CREATE OPERATOR CLASS varchar_ops  FOR TYPE pg_catalog.text USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.text, pg_catalog.text),   FUNCTION 1 pg_catalog.hashtext(pg_catalog.text);
CREATE OPERATOR CLASS varchar_pattern_ops  FOR TYPE pg_catalog.text USING bitmap AS   OPERATOR 1 pg_catalog.~<~(pg_catalog.text, pg_catalog.text),   OPERATOR 2 pg_catalog.~<=~(pg_catalog.text, pg_catalog.text),   OPERATOR 3 pg_catalog.~=~(pg_catalog.text, pg_catalog.text),   OPERATOR 4 pg_catalog.~>=~(pg_catalog.text, pg_catalog.text),   OPERATOR 5 pg_catalog.~>~(pg_catalog.text, pg_catalog.text),   FUNCTION 1 pg_catalog.bttext_pattern_cmp(pg_catalog.text, pg_catalog.text);
CREATE OPERATOR CLASS varchar_pattern_ops  FOR TYPE pg_catalog.text USING btree AS   OPERATOR 1 pg_catalog.~<~(pg_catalog.text, pg_catalog.text),   OPERATOR 2 pg_catalog.~<=~(pg_catalog.text, pg_catalog.text),   OPERATOR 3 pg_catalog.~=~(pg_catalog.text, pg_catalog.text),   OPERATOR 4 pg_catalog.~>=~(pg_catalog.text, pg_catalog.text),   OPERATOR 5 pg_catalog.~>~(pg_catalog.text, pg_catalog.text),   FUNCTION 1 pg_catalog.bttext_pattern_cmp(pg_catalog.text, pg_catalog.text);
CREATE OPERATOR CLASS varchar_pattern_ops  FOR TYPE pg_catalog.text USING hash AS   OPERATOR 1 pg_catalog.~=~(pg_catalog.text, pg_catalog.text),   FUNCTION 1 pg_catalog.hashvarlena(pg_catalog.internal);
CREATE OPERATOR CLASS xid_ops DEFAULT FOR TYPE pg_catalog.xid USING hash AS   OPERATOR 1 pg_catalog.=(pg_catalog.xid, pg_catalog.xid),   FUNCTION 1 pg_catalog.hashint4(pg_catalog.int4);
CREATE OPERATOR CLASS xlogloc_ops DEFAULT FOR TYPE pg_catalog.gpxlogloc USING btree AS   OPERATOR 1 pg_catalog.<(pg_catalog.gpxlogloc, pg_catalog.gpxlogloc),   OPERATOR 2 pg_catalog.<=(pg_catalog.gpxlogloc, pg_catalog.gpxlogloc),   OPERATOR 3 pg_catalog.=(pg_catalog.gpxlogloc, pg_catalog.gpxlogloc),   OPERATOR 4 pg_catalog.>=(pg_catalog.gpxlogloc, pg_catalog.gpxlogloc),   OPERATOR 5 pg_catalog.>(pg_catalog.gpxlogloc, pg_catalog.gpxlogloc),   FUNCTION 1 pg_catalog.btgpxlogloccmp(pg_catalog.gpxlogloc, pg_catalog.gpxlogloc);
CREATE OPERATOR pg_catalog.!!(   PROCEDURE = pg_catalog.numeric_fac,   RIGHTARG = pg_catalog.int8 );
CREATE OPERATOR pg_catalog.!!=(   PROCEDURE = pg_catalog.int4notin,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.text );
CREATE OPERATOR pg_catalog.!!=(   PROCEDURE = pg_catalog.oidnotin,   LEFTARG = pg_catalog.oid,   RIGHTARG = pg_catalog.text );
CREATE OPERATOR pg_catalog.!(   PROCEDURE = pg_catalog.numeric_fac,   LEFTARG = pg_catalog.int8 );
CREATE OPERATOR pg_catalog.!~(   PROCEDURE = pg_catalog.bpcharregexne,   LEFTARG = pg_catalog.bpchar,   RIGHTARG = pg_catalog.text,   NEGATOR = ~,   RESTRICT = pg_catalog.regexnesel,   JOIN = pg_catalog.regexnejoinsel );
CREATE OPERATOR pg_catalog.!~(   PROCEDURE = pg_catalog.nameregexne,   LEFTARG = pg_catalog.name,   RIGHTARG = pg_catalog.text,   NEGATOR = ~,   RESTRICT = pg_catalog.regexnesel,   JOIN = pg_catalog.regexnejoinsel );
CREATE OPERATOR pg_catalog.!~(   PROCEDURE = pg_catalog.textregexne,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text,   NEGATOR = ~,   RESTRICT = pg_catalog.regexnesel,   JOIN = pg_catalog.regexnejoinsel );
CREATE OPERATOR pg_catalog.!~*(   PROCEDURE = pg_catalog.bpcharicregexne,   LEFTARG = pg_catalog.bpchar,   RIGHTARG = pg_catalog.text,   NEGATOR = ~*,   RESTRICT = pg_catalog.icregexnesel,   JOIN = pg_catalog.icregexnejoinsel );
CREATE OPERATOR pg_catalog.!~*(   PROCEDURE = pg_catalog.nameicregexne,   LEFTARG = pg_catalog.name,   RIGHTARG = pg_catalog.text,   NEGATOR = ~*,   RESTRICT = pg_catalog.icregexnesel,   JOIN = pg_catalog.icregexnejoinsel );
CREATE OPERATOR pg_catalog.!~*(   PROCEDURE = pg_catalog.texticregexne,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text,   NEGATOR = ~*,   RESTRICT = pg_catalog.icregexnesel,   JOIN = pg_catalog.icregexnejoinsel );
CREATE OPERATOR pg_catalog.!~~(   PROCEDURE = pg_catalog.bpcharnlike,   LEFTARG = pg_catalog.bpchar,   RIGHTARG = pg_catalog.text,   NEGATOR = ~~,   RESTRICT = pg_catalog.nlikesel,   JOIN = pg_catalog.nlikejoinsel );
CREATE OPERATOR pg_catalog.!~~(   PROCEDURE = pg_catalog.byteanlike,   LEFTARG = pg_catalog.bytea,   RIGHTARG = pg_catalog.bytea,   NEGATOR = ~~,   RESTRICT = pg_catalog.nlikesel,   JOIN = pg_catalog.nlikejoinsel );
CREATE OPERATOR pg_catalog.!~~(   PROCEDURE = pg_catalog.namenlike,   LEFTARG = pg_catalog.name,   RIGHTARG = pg_catalog.text,   NEGATOR = ~~,   RESTRICT = pg_catalog.nlikesel,   JOIN = pg_catalog.nlikejoinsel );
CREATE OPERATOR pg_catalog.!~~(   PROCEDURE = pg_catalog.textnlike,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text,   NEGATOR = ~~,   RESTRICT = pg_catalog.nlikesel,   JOIN = pg_catalog.nlikejoinsel );
CREATE OPERATOR pg_catalog.!~~*(   PROCEDURE = pg_catalog.bpcharicnlike,   LEFTARG = pg_catalog.bpchar,   RIGHTARG = pg_catalog.text,   NEGATOR = ~~*,   RESTRICT = pg_catalog.icnlikesel,   JOIN = pg_catalog.icnlikejoinsel );
CREATE OPERATOR pg_catalog.!~~*(   PROCEDURE = pg_catalog.nameicnlike,   LEFTARG = pg_catalog.name,   RIGHTARG = pg_catalog.text,   NEGATOR = ~~*,   RESTRICT = pg_catalog.icnlikesel,   JOIN = pg_catalog.icnlikejoinsel );
CREATE OPERATOR pg_catalog.!~~*(   PROCEDURE = pg_catalog.texticnlike,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text,   NEGATOR = ~~*,   RESTRICT = pg_catalog.icnlikesel,   JOIN = pg_catalog.icnlikejoinsel );
CREATE OPERATOR pg_catalog.##(   PROCEDURE = pg_catalog.close_lb,   LEFTARG = pg_catalog.line,   RIGHTARG = pg_catalog.box );
CREATE OPERATOR pg_catalog.##(   PROCEDURE = pg_catalog.close_ls,   LEFTARG = pg_catalog.line,   RIGHTARG = pg_catalog.lseg );
CREATE OPERATOR pg_catalog.##(   PROCEDURE = pg_catalog.close_lseg,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.lseg );
CREATE OPERATOR pg_catalog.##(   PROCEDURE = pg_catalog.close_pb,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.box );
CREATE OPERATOR pg_catalog.##(   PROCEDURE = pg_catalog.close_pl,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.line );
CREATE OPERATOR pg_catalog.##(   PROCEDURE = pg_catalog.close_ps,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.lseg );
CREATE OPERATOR pg_catalog.##(   PROCEDURE = pg_catalog.close_sb,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.box );
CREATE OPERATOR pg_catalog.##(   PROCEDURE = pg_catalog.close_sl,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.line );
CREATE OPERATOR pg_catalog.#(   PROCEDURE = pg_catalog.bitxor,   LEFTARG = pg_catalog."bit",   RIGHTARG = pg_catalog."bit" );
CREATE OPERATOR pg_catalog.#(   PROCEDURE = pg_catalog.box_intersect,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box );
CREATE OPERATOR pg_catalog.#(   PROCEDURE = pg_catalog.int2xor,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int2 );
CREATE OPERATOR pg_catalog.#(   PROCEDURE = pg_catalog.int4xor,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.#(   PROCEDURE = pg_catalog.int8xor,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int8 );
CREATE OPERATOR pg_catalog.#(   PROCEDURE = pg_catalog.line_interpt,   LEFTARG = pg_catalog.line,   RIGHTARG = pg_catalog.line );
CREATE OPERATOR pg_catalog.#(   PROCEDURE = pg_catalog.lseg_interpt,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.lseg );
CREATE OPERATOR pg_catalog.#(   PROCEDURE = pg_catalog.path_npoints,   RIGHTARG = pg_catalog.path );
CREATE OPERATOR pg_catalog.#(   PROCEDURE = pg_catalog.poly_npoints,   RIGHTARG = pg_catalog.polygon );
CREATE OPERATOR pg_catalog.#<(   PROCEDURE = pg_catalog.tintervallenlt,   LEFTARG = pg_catalog.tinterval,   RIGHTARG = pg_catalog.reltime );
CREATE OPERATOR pg_catalog.#<=(   PROCEDURE = pg_catalog.tintervallenle,   LEFTARG = pg_catalog.tinterval,   RIGHTARG = pg_catalog.reltime,   NEGATOR = #> );
CREATE OPERATOR pg_catalog.#<>(   PROCEDURE = pg_catalog.tintervallenne,   LEFTARG = pg_catalog.tinterval,   RIGHTARG = pg_catalog.reltime,   NEGATOR = #= );
CREATE OPERATOR pg_catalog.#=(   PROCEDURE = pg_catalog.tintervalleneq,   LEFTARG = pg_catalog.tinterval,   RIGHTARG = pg_catalog.reltime );
CREATE OPERATOR pg_catalog.#>(   PROCEDURE = pg_catalog.tintervallengt,   LEFTARG = pg_catalog.tinterval,   RIGHTARG = pg_catalog.reltime );
CREATE OPERATOR pg_catalog.#>=(   PROCEDURE = pg_catalog.tintervallenge,   LEFTARG = pg_catalog.tinterval,   RIGHTARG = pg_catalog.reltime,   NEGATOR = #< );
CREATE OPERATOR pg_catalog.%(   PROCEDURE = pg_catalog.int24mod,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.%(   PROCEDURE = pg_catalog.int2mod,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int2 );
CREATE OPERATOR pg_catalog.%(   PROCEDURE = pg_catalog.int42mod,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int2 );
CREATE OPERATOR pg_catalog.%(   PROCEDURE = pg_catalog.int4mod,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.%(   PROCEDURE = pg_catalog.int8mod,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int8 );
CREATE OPERATOR pg_catalog.%(   PROCEDURE = pg_catalog.numeric_mod,   LEFTARG = pg_catalog."numeric",   RIGHTARG = pg_catalog."numeric" );
CREATE OPERATOR pg_catalog.&&(   PROCEDURE = pg_catalog.arrayoverlap,   LEFTARG = pg_catalog.anyarray,   RIGHTARG = pg_catalog.anyarray,   RESTRICT = pg_catalog.areasel,   JOIN = pg_catalog.areajoinsel );
CREATE OPERATOR pg_catalog.&&(   PROCEDURE = pg_catalog.box_overlap,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   RESTRICT = pg_catalog.areasel,   JOIN = pg_catalog.areajoinsel );
CREATE OPERATOR pg_catalog.&&(   PROCEDURE = pg_catalog.circle_overlap,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle,   RESTRICT = pg_catalog.areasel,   JOIN = pg_catalog.areajoinsel );
CREATE OPERATOR pg_catalog.&&(   PROCEDURE = pg_catalog.poly_overlap,   LEFTARG = pg_catalog.polygon,   RIGHTARG = pg_catalog.polygon,   RESTRICT = pg_catalog.areasel,   JOIN = pg_catalog.areajoinsel );
CREATE OPERATOR pg_catalog.&&(   PROCEDURE = pg_catalog.tintervalov,   LEFTARG = pg_catalog.tinterval,   RIGHTARG = pg_catalog.tinterval );
CREATE OPERATOR pg_catalog.&(   PROCEDURE = pg_catalog.bitand,   LEFTARG = pg_catalog."bit",   RIGHTARG = pg_catalog."bit" );
CREATE OPERATOR pg_catalog.&(   PROCEDURE = pg_catalog.inetand,   LEFTARG = pg_catalog.inet,   RIGHTARG = pg_catalog.inet );
CREATE OPERATOR pg_catalog.&(   PROCEDURE = pg_catalog.int2and,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int2 );
CREATE OPERATOR pg_catalog.&(   PROCEDURE = pg_catalog.int4and,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.&(   PROCEDURE = pg_catalog.int8and,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int8 );
CREATE OPERATOR pg_catalog.&<(   PROCEDURE = pg_catalog.box_overleft,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.&<(   PROCEDURE = pg_catalog.circle_overleft,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.&<(   PROCEDURE = pg_catalog.poly_overleft,   LEFTARG = pg_catalog.polygon,   RIGHTARG = pg_catalog.polygon,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.&<|(   PROCEDURE = pg_catalog.box_overbelow,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.&<|(   PROCEDURE = pg_catalog.circle_overbelow,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.&<|(   PROCEDURE = pg_catalog.poly_overbelow,   LEFTARG = pg_catalog.polygon,   RIGHTARG = pg_catalog.polygon,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.&>(   PROCEDURE = pg_catalog.box_overright,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.&>(   PROCEDURE = pg_catalog.circle_overright,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.&>(   PROCEDURE = pg_catalog.poly_overright,   LEFTARG = pg_catalog.polygon,   RIGHTARG = pg_catalog.polygon,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.box_mul,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.point );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.cash_mul_flt4,   LEFTARG = pg_catalog.money,   RIGHTARG = pg_catalog.float4 );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.cash_mul_flt8,   LEFTARG = pg_catalog.money,   RIGHTARG = pg_catalog.float8 );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.cash_mul_int2,   LEFTARG = pg_catalog.money,   RIGHTARG = pg_catalog.int2 );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.cash_mul_int4,   LEFTARG = pg_catalog.money,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.circle_mul_pt,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.point );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.float48mul,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.float8 );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.float4mul,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.float4 );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.float84mul,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float4,   COMMUTATOR = * );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.float8mul,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float8 );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.flt4_mul_cash,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.money,   COMMUTATOR = * );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.flt8_mul_cash,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.money,   COMMUTATOR = * );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.int24mul,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.int2_mul_cash,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.money,   COMMUTATOR = * );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.int2mul,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int2 );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.int42mul,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int2,   COMMUTATOR = * );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.int48mul,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int8,   COMMUTATOR = * );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.int4_mul_cash,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.money,   COMMUTATOR = * );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.int4mul,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.int84mul,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.int8mul,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int8 );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.interval_mul,   LEFTARG = pg_catalog."interval",   RIGHTARG = pg_catalog.float8 );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.mul_d_interval,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog."interval",   COMMUTATOR = * );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.numeric_mul,   LEFTARG = pg_catalog."numeric",   RIGHTARG = pg_catalog."numeric" );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.path_mul_pt,   LEFTARG = pg_catalog.path,   RIGHTARG = pg_catalog.point );
CREATE OPERATOR pg_catalog.*(   PROCEDURE = pg_catalog.point_mul,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.point );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.aclinsert,   LEFTARG = pg_catalog._aclitem,   RIGHTARG = pg_catalog.aclitem );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.box_add,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.point );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.cash_pl,   LEFTARG = pg_catalog.money,   RIGHTARG = pg_catalog.money );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.circle_add_pt,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.point );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.date_pl_interval,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog."interval" );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.date_pli,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.datetime_pl,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog."time" );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.datetimetz_pl,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog.timetz );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.float48pl,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.float8 );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.float4pl,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.float4 );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.float4up,   RIGHTARG = pg_catalog.float4 );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.float84pl,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float4,   COMMUTATOR = + );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.float8pl,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float8 );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.float8up,   RIGHTARG = pg_catalog.float8 );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.inetpl,   LEFTARG = pg_catalog.inet,   RIGHTARG = pg_catalog.int8 );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.int24pl,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.int2pl,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int2 );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.int2up,   RIGHTARG = pg_catalog.int2 );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.int42pl,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int2,   COMMUTATOR = + );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.int48pl,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int8,   COMMUTATOR = + );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.int4pl,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.int4up,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.int84pl,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.int8pl,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int8 );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.int8pl_inet,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.inet,   COMMUTATOR = + );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.int8up,   RIGHTARG = pg_catalog.int8 );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.integer_pl_date,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.date,   COMMUTATOR = + );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.interval_pl,   LEFTARG = pg_catalog."interval",   RIGHTARG = pg_catalog."interval" );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.interval_pl_date,   LEFTARG = pg_catalog."interval",   RIGHTARG = pg_catalog.date,   COMMUTATOR = + );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.interval_pl_time,   LEFTARG = pg_catalog."interval",   RIGHTARG = pg_catalog."time",   COMMUTATOR = + );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.interval_pl_timestamp,   LEFTARG = pg_catalog."interval",   RIGHTARG = pg_catalog."timestamp",   COMMUTATOR = + );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.interval_pl_timestamptz,   LEFTARG = pg_catalog."interval",   RIGHTARG = pg_catalog.timestamptz,   COMMUTATOR = + );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.interval_pl_timetz,   LEFTARG = pg_catalog."interval",   RIGHTARG = pg_catalog.timetz,   COMMUTATOR = + );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.numeric_add,   LEFTARG = pg_catalog."numeric",   RIGHTARG = pg_catalog."numeric" );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.numeric_uplus,   RIGHTARG = pg_catalog."numeric" );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.path_add,   LEFTARG = pg_catalog.path,   RIGHTARG = pg_catalog.path );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.path_add_pt,   LEFTARG = pg_catalog.path,   RIGHTARG = pg_catalog.point );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.point_add,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.point );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.time_pl_interval,   LEFTARG = pg_catalog."time",   RIGHTARG = pg_catalog."interval" );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.timedate_pl,   LEFTARG = pg_catalog."time",   RIGHTARG = pg_catalog.date,   COMMUTATOR = + );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.timepl,   LEFTARG = pg_catalog.abstime,   RIGHTARG = pg_catalog.reltime );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.timestamp_pl_interval,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog."interval" );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.timestamptz_pl_interval,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog."interval" );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.timetz_pl_interval,   LEFTARG = pg_catalog.timetz,   RIGHTARG = pg_catalog."interval" );
CREATE OPERATOR pg_catalog.+(   PROCEDURE = pg_catalog.timetzdate_pl,   LEFTARG = pg_catalog.timetz,   RIGHTARG = pg_catalog.date,   COMMUTATOR = + );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.aclremove,   LEFTARG = pg_catalog._aclitem,   RIGHTARG = pg_catalog.aclitem );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.box_sub,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.point );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.cash_mi,   LEFTARG = pg_catalog.money,   RIGHTARG = pg_catalog.money );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.circle_sub_pt,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.point );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.date_mi,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog.date );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.date_mi_interval,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog."interval" );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.date_mii,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.float48mi,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.float8 );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.float4mi,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.float4 );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.float4um,   RIGHTARG = pg_catalog.float4 );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.float84mi,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float4 );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.float8mi,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float8 );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.float8um,   RIGHTARG = pg_catalog.float8 );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.inetmi,   LEFTARG = pg_catalog.inet,   RIGHTARG = pg_catalog.inet );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.inetmi_int8,   LEFTARG = pg_catalog.inet,   RIGHTARG = pg_catalog.int8 );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.int24mi,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.int2mi,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int2 );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.int2um,   RIGHTARG = pg_catalog.int2 );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.int42mi,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int2 );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.int48mi,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int8 );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.int4mi,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.int4um,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.int84mi,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.int8mi,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int8 );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.int8um,   RIGHTARG = pg_catalog.int8 );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.interval_mi,   LEFTARG = pg_catalog."interval",   RIGHTARG = pg_catalog."interval" );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.interval_um,   RIGHTARG = pg_catalog."interval" );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.numeric_sub,   LEFTARG = pg_catalog."numeric",   RIGHTARG = pg_catalog."numeric" );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.numeric_uminus,   RIGHTARG = pg_catalog."numeric" );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.path_sub_pt,   LEFTARG = pg_catalog.path,   RIGHTARG = pg_catalog.point );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.point_sub,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.point );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.time_mi_interval,   LEFTARG = pg_catalog."time",   RIGHTARG = pg_catalog."interval" );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.time_mi_time,   LEFTARG = pg_catalog."time",   RIGHTARG = pg_catalog."time" );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.timemi,   LEFTARG = pg_catalog.abstime,   RIGHTARG = pg_catalog.reltime );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.timestamp_mi,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog."timestamp" );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.timestamp_mi_interval,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog."interval" );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.timestamptz_mi,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog.timestamptz );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.timestamptz_mi_interval,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog."interval" );
CREATE OPERATOR pg_catalog.-(   PROCEDURE = pg_catalog.timetz_mi_interval,   LEFTARG = pg_catalog.timetz,   RIGHTARG = pg_catalog."interval" );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.box_div,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.point );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.cash_div_flt4,   LEFTARG = pg_catalog.money,   RIGHTARG = pg_catalog.float4 );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.cash_div_flt8,   LEFTARG = pg_catalog.money,   RIGHTARG = pg_catalog.float8 );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.cash_div_int2,   LEFTARG = pg_catalog.money,   RIGHTARG = pg_catalog.int2 );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.cash_div_int4,   LEFTARG = pg_catalog.money,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.circle_div_pt,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.point );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.float48div,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.float8 );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.float4div,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.float4 );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.float84div,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float4 );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.float8div,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float8 );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.int24div,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.int2div,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int2 );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.int42div,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int2 );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.int48div,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int8 );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.int4div,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.int84div,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.int8div,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int8 );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.interval_div,   LEFTARG = pg_catalog."interval",   RIGHTARG = pg_catalog.float8 );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.numeric_div,   LEFTARG = pg_catalog."numeric",   RIGHTARG = pg_catalog."numeric" );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.path_div_pt,   LEFTARG = pg_catalog.path,   RIGHTARG = pg_catalog.point );
CREATE OPERATOR pg_catalog./(   PROCEDURE = pg_catalog.point_div,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.point );
CREATE OPERATOR pg_catalog.<#>(   PROCEDURE = pg_catalog.mktinterval,   LEFTARG = pg_catalog.abstime,   RIGHTARG = pg_catalog.abstime );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.abstimelt,   LEFTARG = pg_catalog.abstime,   RIGHTARG = pg_catalog.abstime,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.array_lt,   LEFTARG = pg_catalog.anyarray,   RIGHTARG = pg_catalog.anyarray,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.bitlt,   LEFTARG = pg_catalog."bit",   RIGHTARG = pg_catalog."bit",   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.boollt,   LEFTARG = pg_catalog.bool,   RIGHTARG = pg_catalog.bool,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.box_lt,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   COMMUTATOR = >,   NEGATOR = >=,   RESTRICT = pg_catalog.areasel,   JOIN = pg_catalog.areajoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.bpcharlt,   LEFTARG = pg_catalog.bpchar,   RIGHTARG = pg_catalog.bpchar,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.bytealt,   LEFTARG = pg_catalog.bytea,   RIGHTARG = pg_catalog.bytea,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.cash_lt,   LEFTARG = pg_catalog.money,   RIGHTARG = pg_catalog.money,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.charlt,   LEFTARG = pg_catalog."char",   RIGHTARG = pg_catalog."char",   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.circle_lt,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle,   RESTRICT = pg_catalog.areasel,   JOIN = pg_catalog.areajoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.date_lt,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog.date,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.date_lt_timestamp,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog."timestamp",   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.date_lt_timestamptz,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog.timestamptz,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.float48lt,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.float8,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.float4lt,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.float4,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.float84lt,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float4,   COMMUTATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.float8lt,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float8,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.gpxlogloclt,   LEFTARG = pg_catalog.gpxlogloc,   RIGHTARG = pg_catalog.gpxlogloc,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.int24lt,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int4,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.int28lt,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int8,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.int2lt,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int2,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.int42lt,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int2,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.int48lt,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int8,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.int4lt,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int4,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.int82lt,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int2,   COMMUTATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.int84lt,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int4,   COMMUTATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.int8lt,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int8,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.interval_lt,   LEFTARG = pg_catalog."interval",   RIGHTARG = pg_catalog."interval",   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.lseg_lt,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.lseg );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.macaddr_lt,   LEFTARG = pg_catalog.macaddr,   RIGHTARG = pg_catalog.macaddr,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.namelt,   LEFTARG = pg_catalog.name,   RIGHTARG = pg_catalog.name,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.network_lt,   LEFTARG = pg_catalog.inet,   RIGHTARG = pg_catalog.inet,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.numeric_lt,   LEFTARG = pg_catalog."numeric",   RIGHTARG = pg_catalog."numeric",   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.oidlt,   LEFTARG = pg_catalog.oid,   RIGHTARG = pg_catalog.oid,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.oidvectorlt,   LEFTARG = pg_catalog.oidvector,   RIGHTARG = pg_catalog.oidvector,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.path_n_lt,   LEFTARG = pg_catalog.path,   RIGHTARG = pg_catalog.path );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.reltimelt,   LEFTARG = pg_catalog.reltime,   RIGHTARG = pg_catalog.reltime,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.text_lt,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.tidlt,   LEFTARG = pg_catalog.tid,   RIGHTARG = pg_catalog.tid,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.time_lt,   LEFTARG = pg_catalog."time",   RIGHTARG = pg_catalog."time",   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.timestamp_lt,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog."timestamp",   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.timestamp_lt_date,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog.date,   COMMUTATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.timestamp_lt_timestamptz,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog.timestamptz,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.timestamptz_lt,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog.timestamptz,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.timestamptz_lt_date,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog.date,   COMMUTATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.timestamptz_lt_timestamp,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog."timestamp",   COMMUTATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.timetz_lt,   LEFTARG = pg_catalog.timetz,   RIGHTARG = pg_catalog.timetz,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.tintervallt,   LEFTARG = pg_catalog.tinterval,   RIGHTARG = pg_catalog.tinterval,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<(   PROCEDURE = pg_catalog.varbitlt,   LEFTARG = pg_catalog.varbit,   RIGHTARG = pg_catalog.varbit,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<->(   PROCEDURE = pg_catalog.box_distance,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box );
CREATE OPERATOR pg_catalog.<->(   PROCEDURE = pg_catalog.circle_distance,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle );
CREATE OPERATOR pg_catalog.<->(   PROCEDURE = pg_catalog.dist_cpoly,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.polygon );
CREATE OPERATOR pg_catalog.<->(   PROCEDURE = pg_catalog.dist_lb,   LEFTARG = pg_catalog.line,   RIGHTARG = pg_catalog.box );
CREATE OPERATOR pg_catalog.<->(   PROCEDURE = pg_catalog.dist_pb,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.box );
CREATE OPERATOR pg_catalog.<->(   PROCEDURE = pg_catalog.dist_pc,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.circle );
CREATE OPERATOR pg_catalog.<->(   PROCEDURE = pg_catalog.dist_pl,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.line );
CREATE OPERATOR pg_catalog.<->(   PROCEDURE = pg_catalog.dist_ppath,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.path );
CREATE OPERATOR pg_catalog.<->(   PROCEDURE = pg_catalog.dist_ps,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.lseg );
CREATE OPERATOR pg_catalog.<->(   PROCEDURE = pg_catalog.dist_sb,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.box );
CREATE OPERATOR pg_catalog.<->(   PROCEDURE = pg_catalog.dist_sl,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.line );
CREATE OPERATOR pg_catalog.<->(   PROCEDURE = pg_catalog.line_distance,   LEFTARG = pg_catalog.line,   RIGHTARG = pg_catalog.line );
CREATE OPERATOR pg_catalog.<->(   PROCEDURE = pg_catalog.lseg_distance,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.lseg );
CREATE OPERATOR pg_catalog.<->(   PROCEDURE = pg_catalog.path_distance,   LEFTARG = pg_catalog.path,   RIGHTARG = pg_catalog.path );
CREATE OPERATOR pg_catalog.<->(   PROCEDURE = pg_catalog.point_distance,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.point );
CREATE OPERATOR pg_catalog.<->(   PROCEDURE = pg_catalog.poly_distance,   LEFTARG = pg_catalog.polygon,   RIGHTARG = pg_catalog.polygon );
CREATE OPERATOR pg_catalog.<<(   PROCEDURE = pg_catalog.bitshiftleft,   LEFTARG = pg_catalog."bit",   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.<<(   PROCEDURE = pg_catalog.box_left,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.<<(   PROCEDURE = pg_catalog.circle_left,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.<<(   PROCEDURE = pg_catalog.int2shl,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.<<(   PROCEDURE = pg_catalog.int4shl,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.<<(   PROCEDURE = pg_catalog.int8shl,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.<<(   PROCEDURE = pg_catalog.network_sub,   LEFTARG = pg_catalog.inet,   RIGHTARG = pg_catalog.inet );
CREATE OPERATOR pg_catalog.<<(   PROCEDURE = pg_catalog.point_left,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.point,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.<<(   PROCEDURE = pg_catalog.poly_left,   LEFTARG = pg_catalog.polygon,   RIGHTARG = pg_catalog.polygon,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.<<(   PROCEDURE = pg_catalog.tintervalct,   LEFTARG = pg_catalog.tinterval,   RIGHTARG = pg_catalog.tinterval );
CREATE OPERATOR pg_catalog.<<=(   PROCEDURE = pg_catalog.network_subeq,   LEFTARG = pg_catalog.inet,   RIGHTARG = pg_catalog.inet );
CREATE OPERATOR pg_catalog.<<|(   PROCEDURE = pg_catalog.box_below,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.<<|(   PROCEDURE = pg_catalog.circle_below,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.<<|(   PROCEDURE = pg_catalog.poly_below,   LEFTARG = pg_catalog.polygon,   RIGHTARG = pg_catalog.polygon,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.abstimele,   LEFTARG = pg_catalog.abstime,   RIGHTARG = pg_catalog.abstime,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.array_le,   LEFTARG = pg_catalog.anyarray,   RIGHTARG = pg_catalog.anyarray,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.bitle,   LEFTARG = pg_catalog."bit",   RIGHTARG = pg_catalog."bit",   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.boolle,   LEFTARG = pg_catalog.bool,   RIGHTARG = pg_catalog.bool,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.box_le,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   COMMUTATOR = >=,   NEGATOR = >,   RESTRICT = pg_catalog.areasel,   JOIN = pg_catalog.areajoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.bpcharle,   LEFTARG = pg_catalog.bpchar,   RIGHTARG = pg_catalog.bpchar,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.byteale,   LEFTARG = pg_catalog.bytea,   RIGHTARG = pg_catalog.bytea,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.cash_le,   LEFTARG = pg_catalog.money,   RIGHTARG = pg_catalog.money,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.charle,   LEFTARG = pg_catalog."char",   RIGHTARG = pg_catalog."char",   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.circle_le,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle,   NEGATOR = >,   RESTRICT = pg_catalog.areasel,   JOIN = pg_catalog.areajoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.date_le,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog.date,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.date_le_timestamp,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog."timestamp",   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.date_le_timestamptz,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog.timestamptz,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.float48le,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.float8,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.float4le,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.float4,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.float84le,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float4,   COMMUTATOR = >=,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.float8le,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float8,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.gpxloglocle,   LEFTARG = pg_catalog.gpxlogloc,   RIGHTARG = pg_catalog.gpxlogloc,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.int24le,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int4,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.int28le,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int8,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.int2le,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int2,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.int42le,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int2,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.int48le,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int8,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.int4le,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int4,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.int82le,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int2,   COMMUTATOR = >=,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.int84le,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int4,   COMMUTATOR = >=,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.int8le,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int8,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.interval_le,   LEFTARG = pg_catalog."interval",   RIGHTARG = pg_catalog."interval",   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.lseg_le,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.lseg );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.macaddr_le,   LEFTARG = pg_catalog.macaddr,   RIGHTARG = pg_catalog.macaddr,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.namele,   LEFTARG = pg_catalog.name,   RIGHTARG = pg_catalog.name,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.network_le,   LEFTARG = pg_catalog.inet,   RIGHTARG = pg_catalog.inet,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.numeric_le,   LEFTARG = pg_catalog."numeric",   RIGHTARG = pg_catalog."numeric",   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.oidle,   LEFTARG = pg_catalog.oid,   RIGHTARG = pg_catalog.oid,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.oidvectorle,   LEFTARG = pg_catalog.oidvector,   RIGHTARG = pg_catalog.oidvector,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.path_n_le,   LEFTARG = pg_catalog.path,   RIGHTARG = pg_catalog.path );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.reltimele,   LEFTARG = pg_catalog.reltime,   RIGHTARG = pg_catalog.reltime,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.text_le,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.tidle,   LEFTARG = pg_catalog.tid,   RIGHTARG = pg_catalog.tid,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.time_le,   LEFTARG = pg_catalog."time",   RIGHTARG = pg_catalog."time",   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.timestamp_le,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog."timestamp",   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.timestamp_le_date,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog.date,   COMMUTATOR = >=,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.timestamp_le_timestamptz,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog.timestamptz,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.timestamptz_le,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog.timestamptz,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.timestamptz_le_date,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog.date,   COMMUTATOR = >=,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.timestamptz_le_timestamp,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog."timestamp",   COMMUTATOR = >=,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.timetz_le,   LEFTARG = pg_catalog.timetz,   RIGHTARG = pg_catalog.timetz,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.tintervalle,   LEFTARG = pg_catalog.tinterval,   RIGHTARG = pg_catalog.tinterval,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<=(   PROCEDURE = pg_catalog.varbitle,   LEFTARG = pg_catalog.varbit,   RIGHTARG = pg_catalog.varbit,   NEGATOR = >,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.abstimene,   LEFTARG = pg_catalog.abstime,   RIGHTARG = pg_catalog.abstime,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.array_ne,   LEFTARG = pg_catalog.anyarray,   RIGHTARG = pg_catalog.anyarray,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.bitne,   LEFTARG = pg_catalog."bit",   RIGHTARG = pg_catalog."bit",   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.boolne,   LEFTARG = pg_catalog.bool,   RIGHTARG = pg_catalog.bool,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.bpcharne,   LEFTARG = pg_catalog.bpchar,   RIGHTARG = pg_catalog.bpchar,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.byteane,   LEFTARG = pg_catalog.bytea,   RIGHTARG = pg_catalog.bytea,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.cash_ne,   LEFTARG = pg_catalog.money,   RIGHTARG = pg_catalog.money,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.charne,   LEFTARG = pg_catalog."char",   RIGHTARG = pg_catalog."char",   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.circle_ne,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.date_ne,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog.date,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.date_ne_timestamp,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog."timestamp",   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.date_ne_timestamptz,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog.timestamptz,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.float48ne,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.float8,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.float4ne,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.float4,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.float84ne,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float4,   COMMUTATOR = <>,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.float8ne,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float8,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.gpxloglocne,   LEFTARG = pg_catalog.gpxlogloc,   RIGHTARG = pg_catalog.gpxlogloc,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.int24ne,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int4,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.int28ne,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int8,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.int2ne,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int2,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.int42ne,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int2,   COMMUTATOR = <>,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.int48ne,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int8,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.int4ne,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int4,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.int82ne,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int2,   COMMUTATOR = <>,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.int84ne,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int4,   COMMUTATOR = <>,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.int8ne,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int8,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.interval_ne,   LEFTARG = pg_catalog."interval",   RIGHTARG = pg_catalog."interval",   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.lseg_ne,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.lseg,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.macaddr_ne,   LEFTARG = pg_catalog.macaddr,   RIGHTARG = pg_catalog.macaddr,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.namene,   LEFTARG = pg_catalog.name,   RIGHTARG = pg_catalog.name,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.network_ne,   LEFTARG = pg_catalog.inet,   RIGHTARG = pg_catalog.inet,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.numeric_ne,   LEFTARG = pg_catalog."numeric",   RIGHTARG = pg_catalog."numeric",   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.oidne,   LEFTARG = pg_catalog.oid,   RIGHTARG = pg_catalog.oid,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.oidvectorne,   LEFTARG = pg_catalog.oidvector,   RIGHTARG = pg_catalog.oidvector,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.point_ne,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.point,   NEGATOR = ~=,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.reltimene,   LEFTARG = pg_catalog.reltime,   RIGHTARG = pg_catalog.reltime,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.textne,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.tidne,   LEFTARG = pg_catalog.tid,   RIGHTARG = pg_catalog.tid,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.time_ne,   LEFTARG = pg_catalog."time",   RIGHTARG = pg_catalog."time",   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.timestamp_ne,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog."timestamp",   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.timestamp_ne_date,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog.date,   COMMUTATOR = <>,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.timestamp_ne_timestamptz,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog.timestamptz,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.timestamptz_ne,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog.timestamptz,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.timestamptz_ne_date,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog.date,   COMMUTATOR = <>,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.timestamptz_ne_timestamp,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog."timestamp",   COMMUTATOR = <>,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.timetz_ne,   LEFTARG = pg_catalog.timetz,   RIGHTARG = pg_catalog.timetz,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.tintervalne,   LEFTARG = pg_catalog.tinterval,   RIGHTARG = pg_catalog.tinterval,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<>(   PROCEDURE = pg_catalog.varbitne,   LEFTARG = pg_catalog.varbit,   RIGHTARG = pg_catalog.varbit,   NEGATOR = =,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.<?>(   PROCEDURE = pg_catalog.intinterval,   LEFTARG = pg_catalog.abstime,   RIGHTARG = pg_catalog.tinterval );
CREATE OPERATOR pg_catalog.<@(   PROCEDURE = pg_catalog.arraycontained,   LEFTARG = pg_catalog.anyarray,   RIGHTARG = pg_catalog.anyarray,   COMMUTATOR = @>,   RESTRICT = pg_catalog.contsel,   JOIN = pg_catalog.contjoinsel );
CREATE OPERATOR pg_catalog.<@(   PROCEDURE = pg_catalog.box_contained,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   RESTRICT = pg_catalog.contsel,   JOIN = pg_catalog.contjoinsel );
CREATE OPERATOR pg_catalog.<@(   PROCEDURE = pg_catalog.circle_contained,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle,   RESTRICT = pg_catalog.contsel,   JOIN = pg_catalog.contjoinsel );
CREATE OPERATOR pg_catalog.<@(   PROCEDURE = pg_catalog.on_pb,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.box );
CREATE OPERATOR pg_catalog.<@(   PROCEDURE = pg_catalog.on_pl,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.line );
CREATE OPERATOR pg_catalog.<@(   PROCEDURE = pg_catalog.on_ppath,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.path );
CREATE OPERATOR pg_catalog.<@(   PROCEDURE = pg_catalog.on_ps,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.lseg );
CREATE OPERATOR pg_catalog.<@(   PROCEDURE = pg_catalog.on_sb,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.box );
CREATE OPERATOR pg_catalog.<@(   PROCEDURE = pg_catalog.on_sl,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.line );
CREATE OPERATOR pg_catalog.<@(   PROCEDURE = pg_catalog.poly_contained,   LEFTARG = pg_catalog.polygon,   RIGHTARG = pg_catalog.polygon,   RESTRICT = pg_catalog.contsel,   JOIN = pg_catalog.contjoinsel );
CREATE OPERATOR pg_catalog.<@(   PROCEDURE = pg_catalog.pt_contained_circle,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.circle );
CREATE OPERATOR pg_catalog.<@(   PROCEDURE = pg_catalog.pt_contained_poly,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.polygon );
CREATE OPERATOR pg_catalog.<^(   PROCEDURE = pg_catalog.box_below_eq,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.<^(   PROCEDURE = pg_catalog.point_below,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.point,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.abstimeeq,   LEFTARG = pg_catalog.abstime,   RIGHTARG = pg_catalog.abstime,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.aclitemeq,   LEFTARG = pg_catalog.aclitem,   RIGHTARG = pg_catalog.aclitem,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.array_eq,   LEFTARG = pg_catalog.anyarray,   RIGHTARG = pg_catalog.anyarray,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.biteq,   LEFTARG = pg_catalog."bit",   RIGHTARG = pg_catalog."bit",   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.booleq,   LEFTARG = pg_catalog.bool,   RIGHTARG = pg_catalog.bool,   NEGATOR = <>,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.box_eq,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.bpchareq,   LEFTARG = pg_catalog.bpchar,   RIGHTARG = pg_catalog.bpchar,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.byteaeq,   LEFTARG = pg_catalog.bytea,   RIGHTARG = pg_catalog.bytea,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.cash_eq,   LEFTARG = pg_catalog.money,   RIGHTARG = pg_catalog.money,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.chareq,   LEFTARG = pg_catalog."char",   RIGHTARG = pg_catalog."char",   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.cideq,   LEFTARG = pg_catalog.cid,   RIGHTARG = pg_catalog.cid,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.circle_eq,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.date_eq,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog.date,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.date_eq_timestamp,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog."timestamp",   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.date_eq_timestamptz,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog.timestamptz,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.float48eq,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.float8,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.float4eq,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.float4,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.float84eq,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float4,   COMMUTATOR = =,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.float8eq,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float8,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.gpxlogloceq,   LEFTARG = pg_catalog.gpxlogloc,   RIGHTARG = pg_catalog.gpxlogloc,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.int24eq,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int4,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.int28eq,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int8,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.int2eq,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int2,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.int2vectoreq,   LEFTARG = pg_catalog.int2vector,   RIGHTARG = pg_catalog.int2vector,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.int42eq,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int2,   COMMUTATOR = =,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.int48eq,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int8,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.int4eq,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int4,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.int82eq,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int2,   COMMUTATOR = =,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.int84eq,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int4,   COMMUTATOR = =,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.int8eq,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int8,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.interval_eq,   LEFTARG = pg_catalog."interval",   RIGHTARG = pg_catalog."interval",   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.line_eq,   LEFTARG = pg_catalog.line,   RIGHTARG = pg_catalog.line,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.lseg_eq,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.lseg,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.macaddr_eq,   LEFTARG = pg_catalog.macaddr,   RIGHTARG = pg_catalog.macaddr,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.nameeq,   LEFTARG = pg_catalog.name,   RIGHTARG = pg_catalog.name,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.network_eq,   LEFTARG = pg_catalog.inet,   RIGHTARG = pg_catalog.inet,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.numeric_eq,   LEFTARG = pg_catalog."numeric",   RIGHTARG = pg_catalog."numeric",   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.oideq,   LEFTARG = pg_catalog.oid,   RIGHTARG = pg_catalog.oid,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.oidvectoreq,   LEFTARG = pg_catalog.oidvector,   RIGHTARG = pg_catalog.oidvector,   NEGATOR = <>,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.path_n_eq,   LEFTARG = pg_catalog.path,   RIGHTARG = pg_catalog.path,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.reltimeeq,   LEFTARG = pg_catalog.reltime,   RIGHTARG = pg_catalog.reltime,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.texteq,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.tideq,   LEFTARG = pg_catalog.tid,   RIGHTARG = pg_catalog.tid,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.time_eq,   LEFTARG = pg_catalog."time",   RIGHTARG = pg_catalog."time",   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.timestamp_eq,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog."timestamp",   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.timestamp_eq_date,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog.date,   COMMUTATOR = =,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.timestamp_eq_timestamptz,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog.timestamptz,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.timestamptz_eq,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog.timestamptz,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.timestamptz_eq_date,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog.date,   COMMUTATOR = =,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.timestamptz_eq_timestamp,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog."timestamp",   COMMUTATOR = =,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.timetz_eq,   LEFTARG = pg_catalog.timetz,   RIGHTARG = pg_catalog.timetz,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.tintervaleq,   LEFTARG = pg_catalog.tinterval,   RIGHTARG = pg_catalog.tinterval,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.varbiteq,   LEFTARG = pg_catalog.varbit,   RIGHTARG = pg_catalog.varbit,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   SORT1 = <,   SORT2 = <,   LTCMP = <,   GTCMP = > );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.xideq,   LEFTARG = pg_catalog.xid,   RIGHTARG = pg_catalog.xid,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES );
CREATE OPERATOR pg_catalog.=(   PROCEDURE = pg_catalog.xideqint4,   LEFTARG = pg_catalog.xid,   RIGHTARG = pg_catalog.int4,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.abstimegt,   LEFTARG = pg_catalog.abstime,   RIGHTARG = pg_catalog.abstime,   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.array_gt,   LEFTARG = pg_catalog.anyarray,   RIGHTARG = pg_catalog.anyarray,   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.bitgt,   LEFTARG = pg_catalog."bit",   RIGHTARG = pg_catalog."bit",   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.boolgt,   LEFTARG = pg_catalog.bool,   RIGHTARG = pg_catalog.bool,   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.box_gt,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   RESTRICT = pg_catalog.areasel,   JOIN = pg_catalog.areajoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.bpchargt,   LEFTARG = pg_catalog.bpchar,   RIGHTARG = pg_catalog.bpchar,   COMMUTATOR = <,   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.byteagt,   LEFTARG = pg_catalog.bytea,   RIGHTARG = pg_catalog.bytea,   COMMUTATOR = <,   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.cash_gt,   LEFTARG = pg_catalog.money,   RIGHTARG = pg_catalog.money,   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.chargt,   LEFTARG = pg_catalog."char",   RIGHTARG = pg_catalog."char",   COMMUTATOR = <,   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.circle_gt,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle,   COMMUTATOR = <,   RESTRICT = pg_catalog.areasel,   JOIN = pg_catalog.areajoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.date_gt,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog.date,   COMMUTATOR = <,   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.date_gt_timestamp,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog."timestamp",   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.date_gt_timestamptz,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog.timestamptz,   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.float48gt,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.float8,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.float4gt,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.float4,   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.float84gt,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float4,   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.float8gt,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float8,   COMMUTATOR = <,   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.gpxloglocgt,   LEFTARG = pg_catalog.gpxlogloc,   RIGHTARG = pg_catalog.gpxlogloc,   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.int24gt,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int4,   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.int28gt,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int8,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.int2gt,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int2,   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.int42gt,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int2,   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.int48gt,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int8,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.int4gt,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int4,   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.int82gt,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int2,   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.int84gt,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int4,   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.int8gt,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int8,   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.interval_gt,   LEFTARG = pg_catalog."interval",   RIGHTARG = pg_catalog."interval",   COMMUTATOR = <,   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.lseg_gt,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.lseg,   COMMUTATOR = <,   NEGATOR = <= );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.macaddr_gt,   LEFTARG = pg_catalog.macaddr,   RIGHTARG = pg_catalog.macaddr,   COMMUTATOR = <,   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.namegt,   LEFTARG = pg_catalog.name,   RIGHTARG = pg_catalog.name,   COMMUTATOR = <,   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.network_gt,   LEFTARG = pg_catalog.inet,   RIGHTARG = pg_catalog.inet,   COMMUTATOR = <,   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.numeric_gt,   LEFTARG = pg_catalog."numeric",   RIGHTARG = pg_catalog."numeric",   COMMUTATOR = <,   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.oidgt,   LEFTARG = pg_catalog.oid,   RIGHTARG = pg_catalog.oid,   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.oidvectorgt,   LEFTARG = pg_catalog.oidvector,   RIGHTARG = pg_catalog.oidvector,   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.path_n_gt,   LEFTARG = pg_catalog.path,   RIGHTARG = pg_catalog.path,   COMMUTATOR = < );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.reltimegt,   LEFTARG = pg_catalog.reltime,   RIGHTARG = pg_catalog.reltime,   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.text_gt,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text,   COMMUTATOR = <,   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.tidgt,   LEFTARG = pg_catalog.tid,   RIGHTARG = pg_catalog.tid,   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.time_gt,   LEFTARG = pg_catalog."time",   RIGHTARG = pg_catalog."time",   COMMUTATOR = <,   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.timestamp_gt,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog."timestamp",   COMMUTATOR = <,   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.timestamp_gt_date,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog.date,   COMMUTATOR = <,   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.timestamp_gt_timestamptz,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog.timestamptz,   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.timestamptz_gt,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog.timestamptz,   COMMUTATOR = <,   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.timestamptz_gt_date,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog.date,   COMMUTATOR = <,   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.timestamptz_gt_timestamp,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog."timestamp",   COMMUTATOR = <,   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.timetz_gt,   LEFTARG = pg_catalog.timetz,   RIGHTARG = pg_catalog.timetz,   COMMUTATOR = <,   NEGATOR = <=,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.tintervalgt,   LEFTARG = pg_catalog.tinterval,   RIGHTARG = pg_catalog.tinterval,   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>(   PROCEDURE = pg_catalog.varbitgt,   LEFTARG = pg_catalog.varbit,   RIGHTARG = pg_catalog.varbit,   COMMUTATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.abstimege,   LEFTARG = pg_catalog.abstime,   RIGHTARG = pg_catalog.abstime,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.array_ge,   LEFTARG = pg_catalog.anyarray,   RIGHTARG = pg_catalog.anyarray,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.bitge,   LEFTARG = pg_catalog."bit",   RIGHTARG = pg_catalog."bit",   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.boolge,   LEFTARG = pg_catalog.bool,   RIGHTARG = pg_catalog.bool,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.box_ge,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   RESTRICT = pg_catalog.areasel,   JOIN = pg_catalog.areajoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.bpcharge,   LEFTARG = pg_catalog.bpchar,   RIGHTARG = pg_catalog.bpchar,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.byteage,   LEFTARG = pg_catalog.bytea,   RIGHTARG = pg_catalog.bytea,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.cash_ge,   LEFTARG = pg_catalog.money,   RIGHTARG = pg_catalog.money,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.charge,   LEFTARG = pg_catalog."char",   RIGHTARG = pg_catalog."char",   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.circle_ge,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.areasel,   JOIN = pg_catalog.areajoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.date_ge,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog.date,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.date_ge_timestamp,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog."timestamp",   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.date_ge_timestamptz,   LEFTARG = pg_catalog.date,   RIGHTARG = pg_catalog.timestamptz,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.float48ge,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.float8,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.float4ge,   LEFTARG = pg_catalog.float4,   RIGHTARG = pg_catalog.float4,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.float84ge,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float4,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.float8ge,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float8,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.gpxloglocge,   LEFTARG = pg_catalog.gpxlogloc,   RIGHTARG = pg_catalog.gpxlogloc,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.int24ge,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int4,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.int28ge,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int8,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.int2ge,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int2,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.int42ge,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int2,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.int48ge,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int8,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.int4ge,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int4,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.int82ge,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int2,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.int84ge,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int4,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.int8ge,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int8,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.interval_ge,   LEFTARG = pg_catalog."interval",   RIGHTARG = pg_catalog."interval",   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.lseg_ge,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.lseg,   COMMUTATOR = <=,   NEGATOR = < );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.macaddr_ge,   LEFTARG = pg_catalog.macaddr,   RIGHTARG = pg_catalog.macaddr,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.namege,   LEFTARG = pg_catalog.name,   RIGHTARG = pg_catalog.name,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.network_ge,   LEFTARG = pg_catalog.inet,   RIGHTARG = pg_catalog.inet,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.numeric_ge,   LEFTARG = pg_catalog."numeric",   RIGHTARG = pg_catalog."numeric",   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.oidge,   LEFTARG = pg_catalog.oid,   RIGHTARG = pg_catalog.oid,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.oidvectorge,   LEFTARG = pg_catalog.oidvector,   RIGHTARG = pg_catalog.oidvector,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.path_n_ge,   LEFTARG = pg_catalog.path,   RIGHTARG = pg_catalog.path,   COMMUTATOR = <= );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.reltimege,   LEFTARG = pg_catalog.reltime,   RIGHTARG = pg_catalog.reltime,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.text_ge,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.tidge,   LEFTARG = pg_catalog.tid,   RIGHTARG = pg_catalog.tid,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.time_ge,   LEFTARG = pg_catalog."time",   RIGHTARG = pg_catalog."time",   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.timestamp_ge,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog."timestamp",   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.timestamp_ge_date,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog.date,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.timestamp_ge_timestamptz,   LEFTARG = pg_catalog."timestamp",   RIGHTARG = pg_catalog.timestamptz,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.timestamptz_ge,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog.timestamptz,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.timestamptz_ge_date,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog.date,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.timestamptz_ge_timestamp,   LEFTARG = pg_catalog.timestamptz,   RIGHTARG = pg_catalog."timestamp",   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.timetz_ge,   LEFTARG = pg_catalog.timetz,   RIGHTARG = pg_catalog.timetz,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.tintervalge,   LEFTARG = pg_catalog.tinterval,   RIGHTARG = pg_catalog.tinterval,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>=(   PROCEDURE = pg_catalog.varbitge,   LEFTARG = pg_catalog.varbit,   RIGHTARG = pg_catalog.varbit,   COMMUTATOR = <=,   NEGATOR = <,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.>>(   PROCEDURE = pg_catalog.bitshiftright,   LEFTARG = pg_catalog."bit",   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.>>(   PROCEDURE = pg_catalog.box_right,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.>>(   PROCEDURE = pg_catalog.circle_right,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.>>(   PROCEDURE = pg_catalog.int2shr,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.>>(   PROCEDURE = pg_catalog.int4shr,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.>>(   PROCEDURE = pg_catalog.int8shr,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.>>(   PROCEDURE = pg_catalog.network_sup,   LEFTARG = pg_catalog.inet,   RIGHTARG = pg_catalog.inet,   COMMUTATOR = << );
CREATE OPERATOR pg_catalog.>>(   PROCEDURE = pg_catalog.point_right,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.point,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.>>(   PROCEDURE = pg_catalog.poly_right,   LEFTARG = pg_catalog.polygon,   RIGHTARG = pg_catalog.polygon,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.>>=(   PROCEDURE = pg_catalog.network_supeq,   LEFTARG = pg_catalog.inet,   RIGHTARG = pg_catalog.inet,   COMMUTATOR = <<= );
CREATE OPERATOR pg_catalog.>^(   PROCEDURE = pg_catalog.box_above_eq,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.>^(   PROCEDURE = pg_catalog.point_above,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.point,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.?#(   PROCEDURE = pg_catalog.box_overlap,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   RESTRICT = pg_catalog.areasel,   JOIN = pg_catalog.areajoinsel );
CREATE OPERATOR pg_catalog.?#(   PROCEDURE = pg_catalog.inter_lb,   LEFTARG = pg_catalog.line,   RIGHTARG = pg_catalog.box );
CREATE OPERATOR pg_catalog.?#(   PROCEDURE = pg_catalog.inter_sb,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.box );
CREATE OPERATOR pg_catalog.?#(   PROCEDURE = pg_catalog.inter_sl,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.line );
CREATE OPERATOR pg_catalog.?#(   PROCEDURE = pg_catalog.line_intersect,   LEFTARG = pg_catalog.line,   RIGHTARG = pg_catalog.line );
CREATE OPERATOR pg_catalog.?#(   PROCEDURE = pg_catalog.lseg_intersect,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.lseg );
CREATE OPERATOR pg_catalog.?#(   PROCEDURE = pg_catalog.path_inter,   LEFTARG = pg_catalog.path,   RIGHTARG = pg_catalog.path );
CREATE OPERATOR pg_catalog.?-(   PROCEDURE = pg_catalog.line_horizontal,   RIGHTARG = pg_catalog.line );
CREATE OPERATOR pg_catalog.?-(   PROCEDURE = pg_catalog.lseg_horizontal,   RIGHTARG = pg_catalog.lseg );
CREATE OPERATOR pg_catalog.?-(   PROCEDURE = pg_catalog.point_horiz,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.point );
CREATE OPERATOR pg_catalog.?-|(   PROCEDURE = pg_catalog.line_perp,   LEFTARG = pg_catalog.line,   RIGHTARG = pg_catalog.line );
CREATE OPERATOR pg_catalog.?-|(   PROCEDURE = pg_catalog.lseg_perp,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.lseg );
CREATE OPERATOR pg_catalog.?|(   PROCEDURE = pg_catalog.line_vertical,   RIGHTARG = pg_catalog.line );
CREATE OPERATOR pg_catalog.?|(   PROCEDURE = pg_catalog.lseg_vertical,   RIGHTARG = pg_catalog.lseg );
CREATE OPERATOR pg_catalog.?|(   PROCEDURE = pg_catalog.point_vert,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.point );
CREATE OPERATOR pg_catalog.?||(   PROCEDURE = pg_catalog.line_parallel,   LEFTARG = pg_catalog.line,   RIGHTARG = pg_catalog.line );
CREATE OPERATOR pg_catalog.?||(   PROCEDURE = pg_catalog.lseg_parallel,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.lseg );
CREATE OPERATOR pg_catalog.@(   PROCEDURE = pg_catalog.box_contained,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   RESTRICT = pg_catalog.contsel,   JOIN = pg_catalog.contjoinsel );
CREATE OPERATOR pg_catalog.@(   PROCEDURE = pg_catalog.circle_contained,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle,   RESTRICT = pg_catalog.contsel,   JOIN = pg_catalog.contjoinsel );
CREATE OPERATOR pg_catalog.@(   PROCEDURE = pg_catalog.float4abs,   RIGHTARG = pg_catalog.float4 );
CREATE OPERATOR pg_catalog.@(   PROCEDURE = pg_catalog.float8abs,   RIGHTARG = pg_catalog.float8 );
CREATE OPERATOR pg_catalog.@(   PROCEDURE = pg_catalog.int2abs,   RIGHTARG = pg_catalog.int2 );
CREATE OPERATOR pg_catalog.@(   PROCEDURE = pg_catalog.int4abs,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.@(   PROCEDURE = pg_catalog.int8abs,   RIGHTARG = pg_catalog.int8 );
CREATE OPERATOR pg_catalog.@(   PROCEDURE = pg_catalog.numeric_abs,   RIGHTARG = pg_catalog."numeric" );
CREATE OPERATOR pg_catalog.@(   PROCEDURE = pg_catalog.on_pb,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.box );
CREATE OPERATOR pg_catalog.@(   PROCEDURE = pg_catalog.on_pl,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.line );
CREATE OPERATOR pg_catalog.@(   PROCEDURE = pg_catalog.on_ppath,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.path );
CREATE OPERATOR pg_catalog.@(   PROCEDURE = pg_catalog.on_ps,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.lseg );
CREATE OPERATOR pg_catalog.@(   PROCEDURE = pg_catalog.on_sb,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.box );
CREATE OPERATOR pg_catalog.@(   PROCEDURE = pg_catalog.on_sl,   LEFTARG = pg_catalog.lseg,   RIGHTARG = pg_catalog.line );
CREATE OPERATOR pg_catalog.@(   PROCEDURE = pg_catalog.poly_contained,   LEFTARG = pg_catalog.polygon,   RIGHTARG = pg_catalog.polygon,   RESTRICT = pg_catalog.contsel,   JOIN = pg_catalog.contjoinsel );
CREATE OPERATOR pg_catalog.@(   PROCEDURE = pg_catalog.pt_contained_circle,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.circle );
CREATE OPERATOR pg_catalog.@(   PROCEDURE = pg_catalog.pt_contained_poly,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.polygon );
CREATE OPERATOR pg_catalog.@-@(   PROCEDURE = pg_catalog.lseg_length,   RIGHTARG = pg_catalog.lseg );
CREATE OPERATOR pg_catalog.@-@(   PROCEDURE = pg_catalog.path_length,   RIGHTARG = pg_catalog.path );
CREATE OPERATOR pg_catalog.@>(   PROCEDURE = pg_catalog.aclcontains,   LEFTARG = pg_catalog._aclitem,   RIGHTARG = pg_catalog.aclitem );
CREATE OPERATOR pg_catalog.@>(   PROCEDURE = pg_catalog.arraycontains,   LEFTARG = pg_catalog.anyarray,   RIGHTARG = pg_catalog.anyarray,   RESTRICT = pg_catalog.contsel,   JOIN = pg_catalog.contjoinsel );
CREATE OPERATOR pg_catalog.@>(   PROCEDURE = pg_catalog.box_contain,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   COMMUTATOR = <@,   RESTRICT = pg_catalog.contsel,   JOIN = pg_catalog.contjoinsel );
CREATE OPERATOR pg_catalog.@>(   PROCEDURE = pg_catalog.circle_contain,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle,   COMMUTATOR = <@,   RESTRICT = pg_catalog.contsel,   JOIN = pg_catalog.contjoinsel );
CREATE OPERATOR pg_catalog.@>(   PROCEDURE = pg_catalog.circle_contain_pt,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.point,   COMMUTATOR = <@ );
CREATE OPERATOR pg_catalog.@>(   PROCEDURE = pg_catalog.path_contain_pt,   LEFTARG = pg_catalog.path,   RIGHTARG = pg_catalog.point,   COMMUTATOR = <@ );
CREATE OPERATOR pg_catalog.@>(   PROCEDURE = pg_catalog.poly_contain,   LEFTARG = pg_catalog.polygon,   RIGHTARG = pg_catalog.polygon,   COMMUTATOR = <@,   RESTRICT = pg_catalog.contsel,   JOIN = pg_catalog.contjoinsel );
CREATE OPERATOR pg_catalog.@>(   PROCEDURE = pg_catalog.poly_contain_pt,   LEFTARG = pg_catalog.polygon,   RIGHTARG = pg_catalog.point,   COMMUTATOR = <@ );
CREATE OPERATOR pg_catalog.@@(   PROCEDURE = pg_catalog.box_center,   RIGHTARG = pg_catalog.box );
CREATE OPERATOR pg_catalog.@@(   PROCEDURE = pg_catalog.circle_center,   RIGHTARG = pg_catalog.circle );
CREATE OPERATOR pg_catalog.@@(   PROCEDURE = pg_catalog.lseg_center,   RIGHTARG = pg_catalog.lseg );
CREATE OPERATOR pg_catalog.@@(   PROCEDURE = pg_catalog.path_center,   RIGHTARG = pg_catalog.path );
CREATE OPERATOR pg_catalog.@@(   PROCEDURE = pg_catalog.poly_center,   RIGHTARG = pg_catalog.polygon );
CREATE OPERATOR pg_catalog.^(   PROCEDURE = pg_catalog.dpow,   LEFTARG = pg_catalog.float8,   RIGHTARG = pg_catalog.float8 );
CREATE OPERATOR pg_catalog.^(   PROCEDURE = pg_catalog.numeric_power,   LEFTARG = pg_catalog."numeric",   RIGHTARG = pg_catalog."numeric" );
CREATE OPERATOR pg_catalog.|&>(   PROCEDURE = pg_catalog.box_overabove,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.|&>(   PROCEDURE = pg_catalog.circle_overabove,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.|&>(   PROCEDURE = pg_catalog.poly_overabove,   LEFTARG = pg_catalog.polygon,   RIGHTARG = pg_catalog.polygon,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.|(   PROCEDURE = pg_catalog.bitor,   LEFTARG = pg_catalog."bit",   RIGHTARG = pg_catalog."bit" );
CREATE OPERATOR pg_catalog.|(   PROCEDURE = pg_catalog.inetor,   LEFTARG = pg_catalog.inet,   RIGHTARG = pg_catalog.inet );
CREATE OPERATOR pg_catalog.|(   PROCEDURE = pg_catalog.int2or,   LEFTARG = pg_catalog.int2,   RIGHTARG = pg_catalog.int2 );
CREATE OPERATOR pg_catalog.|(   PROCEDURE = pg_catalog.int4or,   LEFTARG = pg_catalog.int4,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.|(   PROCEDURE = pg_catalog.int8or,   LEFTARG = pg_catalog.int8,   RIGHTARG = pg_catalog.int8 );
CREATE OPERATOR pg_catalog.|(   PROCEDURE = pg_catalog.tintervalstart,   RIGHTARG = pg_catalog.tinterval );
CREATE OPERATOR pg_catalog.|/(   PROCEDURE = pg_catalog.dsqrt,   RIGHTARG = pg_catalog.float8 );
CREATE OPERATOR pg_catalog.|>>(   PROCEDURE = pg_catalog.box_above,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.|>>(   PROCEDURE = pg_catalog.circle_above,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.|>>(   PROCEDURE = pg_catalog.poly_above,   LEFTARG = pg_catalog.polygon,   RIGHTARG = pg_catalog.polygon,   RESTRICT = pg_catalog.positionsel,   JOIN = pg_catalog.positionjoinsel );
CREATE OPERATOR pg_catalog.||(   PROCEDURE = pg_catalog.array_append,   LEFTARG = pg_catalog.anyarray,   RIGHTARG = pg_catalog.anyelement );
CREATE OPERATOR pg_catalog.||(   PROCEDURE = pg_catalog.array_cat,   LEFTARG = pg_catalog.anyarray,   RIGHTARG = pg_catalog.anyarray );
CREATE OPERATOR pg_catalog.||(   PROCEDURE = pg_catalog.array_prepend,   LEFTARG = pg_catalog.anyelement,   RIGHTARG = pg_catalog.anyarray );
CREATE OPERATOR pg_catalog.||(   PROCEDURE = pg_catalog.bitcat,   LEFTARG = pg_catalog."bit",   RIGHTARG = pg_catalog."bit" );
CREATE OPERATOR pg_catalog.||(   PROCEDURE = pg_catalog.byteacat,   LEFTARG = pg_catalog.bytea,   RIGHTARG = pg_catalog.bytea );
CREATE OPERATOR pg_catalog.||(   PROCEDURE = pg_catalog.textcat,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text );
CREATE OPERATOR pg_catalog.||/(   PROCEDURE = pg_catalog.dcbrt,   RIGHTARG = pg_catalog.float8 );
CREATE OPERATOR pg_catalog.~(   PROCEDURE = pg_catalog.aclcontains,   LEFTARG = pg_catalog._aclitem,   RIGHTARG = pg_catalog.aclitem );
CREATE OPERATOR pg_catalog.~(   PROCEDURE = pg_catalog.bitnot,   RIGHTARG = pg_catalog."bit" );
CREATE OPERATOR pg_catalog.~(   PROCEDURE = pg_catalog.box_contain,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   COMMUTATOR = @,   RESTRICT = pg_catalog.contsel,   JOIN = pg_catalog.contjoinsel );
CREATE OPERATOR pg_catalog.~(   PROCEDURE = pg_catalog.bpcharregexeq,   LEFTARG = pg_catalog.bpchar,   RIGHTARG = pg_catalog.text,   RESTRICT = pg_catalog.regexeqsel,   JOIN = pg_catalog.regexeqjoinsel );
CREATE OPERATOR pg_catalog.~(   PROCEDURE = pg_catalog.circle_contain,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle,   COMMUTATOR = @,   RESTRICT = pg_catalog.contsel,   JOIN = pg_catalog.contjoinsel );
CREATE OPERATOR pg_catalog.~(   PROCEDURE = pg_catalog.circle_contain_pt,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.point,   COMMUTATOR = @ );
CREATE OPERATOR pg_catalog.~(   PROCEDURE = pg_catalog.inetnot,   RIGHTARG = pg_catalog.inet );
CREATE OPERATOR pg_catalog.~(   PROCEDURE = pg_catalog.int2not,   RIGHTARG = pg_catalog.int2 );
CREATE OPERATOR pg_catalog.~(   PROCEDURE = pg_catalog.int4not,   RIGHTARG = pg_catalog.int4 );
CREATE OPERATOR pg_catalog.~(   PROCEDURE = pg_catalog.int8not,   RIGHTARG = pg_catalog.int8 );
CREATE OPERATOR pg_catalog.~(   PROCEDURE = pg_catalog.nameregexeq,   LEFTARG = pg_catalog.name,   RIGHTARG = pg_catalog.text,   RESTRICT = pg_catalog.regexeqsel,   JOIN = pg_catalog.regexeqjoinsel );
CREATE OPERATOR pg_catalog.~(   PROCEDURE = pg_catalog.path_contain_pt,   LEFTARG = pg_catalog.path,   RIGHTARG = pg_catalog.point,   COMMUTATOR = @ );
CREATE OPERATOR pg_catalog.~(   PROCEDURE = pg_catalog.poly_contain,   LEFTARG = pg_catalog.polygon,   RIGHTARG = pg_catalog.polygon,   COMMUTATOR = @,   RESTRICT = pg_catalog.contsel,   JOIN = pg_catalog.contjoinsel );
CREATE OPERATOR pg_catalog.~(   PROCEDURE = pg_catalog.poly_contain_pt,   LEFTARG = pg_catalog.polygon,   RIGHTARG = pg_catalog.point,   COMMUTATOR = @ );
CREATE OPERATOR pg_catalog.~(   PROCEDURE = pg_catalog.textregexeq,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text,   RESTRICT = pg_catalog.regexeqsel,   JOIN = pg_catalog.regexeqjoinsel );
CREATE OPERATOR pg_catalog.~*(   PROCEDURE = pg_catalog.bpcharicregexeq,   LEFTARG = pg_catalog.bpchar,   RIGHTARG = pg_catalog.text,   RESTRICT = pg_catalog.icregexeqsel,   JOIN = pg_catalog.icregexeqjoinsel );
CREATE OPERATOR pg_catalog.~*(   PROCEDURE = pg_catalog.nameicregexeq,   LEFTARG = pg_catalog.name,   RIGHTARG = pg_catalog.text,   RESTRICT = pg_catalog.icregexeqsel,   JOIN = pg_catalog.icregexeqjoinsel );
CREATE OPERATOR pg_catalog.~*(   PROCEDURE = pg_catalog.texticregexeq,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text,   RESTRICT = pg_catalog.icregexeqsel,   JOIN = pg_catalog.icregexeqjoinsel );
CREATE OPERATOR pg_catalog.~<=~(   PROCEDURE = pg_catalog.bpchar_pattern_le,   LEFTARG = pg_catalog.bpchar,   RIGHTARG = pg_catalog.bpchar,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.~<=~(   PROCEDURE = pg_catalog.name_pattern_le,   LEFTARG = pg_catalog.name,   RIGHTARG = pg_catalog.name,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.~<=~(   PROCEDURE = pg_catalog.text_pattern_le,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.~<>~(   PROCEDURE = pg_catalog.bpchar_pattern_ne,   LEFTARG = pg_catalog.bpchar,   RIGHTARG = pg_catalog.bpchar,   NEGATOR = ~=~,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.~<>~(   PROCEDURE = pg_catalog.name_pattern_ne,   LEFTARG = pg_catalog.name,   RIGHTARG = pg_catalog.name,   NEGATOR = ~=~,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.~<>~(   PROCEDURE = pg_catalog.textne,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text,   NEGATOR = ~=~,   RESTRICT = pg_catalog.neqsel,   JOIN = pg_catalog.neqjoinsel );
CREATE OPERATOR pg_catalog.~<~(   PROCEDURE = pg_catalog.bpchar_pattern_lt,   LEFTARG = pg_catalog.bpchar,   RIGHTARG = pg_catalog.bpchar,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.~<~(   PROCEDURE = pg_catalog.name_pattern_lt,   LEFTARG = pg_catalog.name,   RIGHTARG = pg_catalog.name,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.~<~(   PROCEDURE = pg_catalog.text_pattern_lt,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text,   RESTRICT = pg_catalog.scalarltsel,   JOIN = pg_catalog.scalarltjoinsel );
CREATE OPERATOR pg_catalog.~=(   PROCEDURE = pg_catalog.box_same,   LEFTARG = pg_catalog.box,   RIGHTARG = pg_catalog.box,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel );
CREATE OPERATOR pg_catalog.~=(   PROCEDURE = pg_catalog.circle_same,   LEFTARG = pg_catalog.circle,   RIGHTARG = pg_catalog.circle,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel );
CREATE OPERATOR pg_catalog.~=(   PROCEDURE = pg_catalog.point_eq,   LEFTARG = pg_catalog.point,   RIGHTARG = pg_catalog.point,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel );
CREATE OPERATOR pg_catalog.~=(   PROCEDURE = pg_catalog.poly_same,   LEFTARG = pg_catalog.polygon,   RIGHTARG = pg_catalog.polygon,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel );
CREATE OPERATOR pg_catalog.~=(   PROCEDURE = pg_catalog.tintervalsame,   LEFTARG = pg_catalog.tinterval,   RIGHTARG = pg_catalog.tinterval,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel );
CREATE OPERATOR pg_catalog.~=~(   PROCEDURE = pg_catalog.bpchar_pattern_eq,   LEFTARG = pg_catalog.bpchar,   RIGHTARG = pg_catalog.bpchar,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = ~<~,   SORT2 = ~<~,   LTCMP = ~<~,   GTCMP = ~>~ );
CREATE OPERATOR pg_catalog.~=~(   PROCEDURE = pg_catalog.name_pattern_eq,   LEFTARG = pg_catalog.name,   RIGHTARG = pg_catalog.name,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = ~<~,   SORT2 = ~<~,   LTCMP = ~<~,   GTCMP = ~>~ );
CREATE OPERATOR pg_catalog.~=~(   PROCEDURE = pg_catalog.texteq,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text,   RESTRICT = pg_catalog.eqsel,   JOIN = pg_catalog.eqjoinsel,   HASHES,   SORT1 = ~<~,   SORT2 = ~<~,   LTCMP = ~<~,   GTCMP = ~>~ );
CREATE OPERATOR pg_catalog.~>=~(   PROCEDURE = pg_catalog.bpchar_pattern_ge,   LEFTARG = pg_catalog.bpchar,   RIGHTARG = pg_catalog.bpchar,   COMMUTATOR = ~<=~,   NEGATOR = ~<~,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.~>=~(   PROCEDURE = pg_catalog.name_pattern_ge,   LEFTARG = pg_catalog.name,   RIGHTARG = pg_catalog.name,   COMMUTATOR = ~<=~,   NEGATOR = ~<~,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.~>=~(   PROCEDURE = pg_catalog.text_pattern_ge,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text,   COMMUTATOR = ~<=~,   NEGATOR = ~<~,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.~>~(   PROCEDURE = pg_catalog.bpchar_pattern_gt,   LEFTARG = pg_catalog.bpchar,   RIGHTARG = pg_catalog.bpchar,   COMMUTATOR = ~<~,   NEGATOR = ~<=~,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.~>~(   PROCEDURE = pg_catalog.name_pattern_gt,   LEFTARG = pg_catalog.name,   RIGHTARG = pg_catalog.name,   COMMUTATOR = ~<~,   NEGATOR = ~<=~,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.~>~(   PROCEDURE = pg_catalog.text_pattern_gt,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text,   COMMUTATOR = ~<~,   NEGATOR = ~<=~,   RESTRICT = pg_catalog.scalargtsel,   JOIN = pg_catalog.scalargtjoinsel );
CREATE OPERATOR pg_catalog.~~(   PROCEDURE = pg_catalog.bpcharlike,   LEFTARG = pg_catalog.bpchar,   RIGHTARG = pg_catalog.text,   RESTRICT = pg_catalog.likesel,   JOIN = pg_catalog.likejoinsel );
CREATE OPERATOR pg_catalog.~~(   PROCEDURE = pg_catalog.bytealike,   LEFTARG = pg_catalog.bytea,   RIGHTARG = pg_catalog.bytea,   RESTRICT = pg_catalog.likesel,   JOIN = pg_catalog.likejoinsel );
CREATE OPERATOR pg_catalog.~~(   PROCEDURE = pg_catalog.namelike,   LEFTARG = pg_catalog.name,   RIGHTARG = pg_catalog.text,   RESTRICT = pg_catalog.likesel,   JOIN = pg_catalog.likejoinsel );
CREATE OPERATOR pg_catalog.~~(   PROCEDURE = pg_catalog.textlike,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text,   RESTRICT = pg_catalog.likesel,   JOIN = pg_catalog.likejoinsel );
CREATE OPERATOR pg_catalog.~~*(   PROCEDURE = pg_catalog.bpchariclike,   LEFTARG = pg_catalog.bpchar,   RIGHTARG = pg_catalog.text,   RESTRICT = pg_catalog.iclikesel,   JOIN = pg_catalog.iclikejoinsel );
CREATE OPERATOR pg_catalog.~~*(   PROCEDURE = pg_catalog.nameiclike,   LEFTARG = pg_catalog.name,   RIGHTARG = pg_catalog.text,   RESTRICT = pg_catalog.iclikesel,   JOIN = pg_catalog.iclikejoinsel );
CREATE OPERATOR pg_catalog.~~*(   PROCEDURE = pg_catalog.texticlike,   LEFTARG = pg_catalog.text,   RIGHTARG = pg_catalog.text,   RESTRICT = pg_catalog.iclikesel,   JOIN = pg_catalog.iclikejoinsel );
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.areajoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'areajoinsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.areasel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'areasel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.contjoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'contjoinsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.contsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'contsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.eqjoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'eqjoinsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.eqsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'eqsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.iclikejoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'iclikejoinsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.iclikesel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'iclikesel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.icnlikejoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'icnlikejoinsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.icnlikesel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'icnlikesel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.icregexeqjoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'icregexeqjoinsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.icregexeqsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'icregexeqsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.icregexnejoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'icregexnejoinsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.icregexnesel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'icregexnesel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.likejoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'likejoinsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.likesel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'likesel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.neqjoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'neqjoinsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.neqsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'neqsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.nlikejoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'nlikejoinsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.nlikesel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'nlikesel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.positionjoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'positionjoinsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.positionsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'positionsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.regexeqjoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'regexeqjoinsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.regexeqsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'regexeqsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.regexnejoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'regexnejoinsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.regexnesel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'regexnesel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.scalargtjoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'scalargtjoinsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.scalargtsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'scalargtsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.scalarltjoinsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int2) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'scalarltjoinsel';
CREATE OR REPLACE OR REPLACE FUNCTION pg_catalog.scalarltsel(pg_catalog.internal, pg_catalog.oid, pg_catalog.internal, pg_catalog.int4) RETURNS pg_catalog.float8 LANGUAGE internal STABLE STRICT AS 'scalarltsel';
CREATE TYPE pg_catalog."any"(   INPUT = pg_catalog.any_in,   OUTPUT = pg_catalog.any_out,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 ); DROP TYPE pg_catalog._any;
CREATE TYPE pg_catalog."any";
CREATE TYPE pg_catalog."bit"(   INPUT = pg_catalog.bit_in,   OUTPUT = pg_catalog.bit_out,   RECEIVE = pg_catalog.bit_recv,   SEND = pg_catalog.bit_send,   INTERNALLENGTH = VARIABLE,   STORAGE = extended,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog."bit";
CREATE TYPE pg_catalog."char"(   INPUT = pg_catalog.charin,   OUTPUT = pg_catalog.charout,   RECEIVE = pg_catalog.charrecv,   SEND = pg_catalog.charsend,   INTERNALLENGTH = 1,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = char );
CREATE TYPE pg_catalog."char";
CREATE TYPE pg_catalog."interval"(   INPUT = pg_catalog.interval_in,   OUTPUT = pg_catalog.interval_out,   RECEIVE = pg_catalog.interval_recv,   SEND = pg_catalog.interval_send,   INTERNALLENGTH = 16,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = double );
CREATE TYPE pg_catalog."interval";
CREATE TYPE pg_catalog."numeric"(   INPUT = pg_catalog.numeric_in,   OUTPUT = pg_catalog.numeric_out,   RECEIVE = pg_catalog.numeric_recv,   SEND = pg_catalog.numeric_send,   INTERNALLENGTH = VARIABLE,   STORAGE = main,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog."numeric";
CREATE TYPE pg_catalog."time"(   INPUT = pg_catalog.time_in,   OUTPUT = pg_catalog.time_out,   RECEIVE = pg_catalog.time_recv,   SEND = pg_catalog.time_send,   INTERNALLENGTH = 8,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = double );
CREATE TYPE pg_catalog."time";
CREATE TYPE pg_catalog."timestamp"(   INPUT = pg_catalog.timestamp_in,   OUTPUT = pg_catalog.timestamp_out,   RECEIVE = pg_catalog.timestamp_recv,   SEND = pg_catalog.timestamp_send,   INTERNALLENGTH = 8,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = double );
CREATE TYPE pg_catalog."timestamp";
CREATE TYPE pg_catalog."varchar"(   INPUT = pg_catalog.varcharin,   OUTPUT = pg_catalog.varcharout,   RECEIVE = pg_catalog.varcharrecv,   SEND = pg_catalog.varcharsend,   INTERNALLENGTH = VARIABLE,   STORAGE = extended,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog."varchar";
CREATE TYPE pg_catalog.abstime(   INPUT = pg_catalog.abstimein,   OUTPUT = pg_catalog.abstimeout,   RECEIVE = pg_catalog.abstimerecv,   SEND = pg_catalog.abstimesend,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.abstime;
CREATE TYPE pg_catalog.aclitem(   INPUT = pg_catalog.aclitemin,   OUTPUT = pg_catalog.aclitemout,   INTERNALLENGTH = 12,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.aclitem;
CREATE TYPE pg_catalog.anyarray(   INPUT = pg_catalog.anyarray_in,   OUTPUT = pg_catalog.anyarray_out,   RECEIVE = pg_catalog.anyarray_recv,   SEND = pg_catalog.anyarray_send,   INTERNALLENGTH = VARIABLE,   STORAGE = extended,   DELIMITER = ',',   ALIGNMENT = double ); DROP TYPE pg_catalog._anyarray;
CREATE TYPE pg_catalog.anyarray;
CREATE TYPE pg_catalog.anyelement(   INPUT = pg_catalog.anyelement_in,   OUTPUT = pg_catalog.anyelement_out,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 ); DROP TYPE pg_catalog._anyelement;
CREATE TYPE pg_catalog.anyelement;
CREATE TYPE pg_catalog.anytable(   INPUT = pg_catalog.anytable_in,   OUTPUT = pg_catalog.anytable_out,   INTERNALLENGTH = VARIABLE,   STORAGE = extended,   DELIMITER = ',',   ALIGNMENT = double ); DROP TYPE pg_catalog._anytable;
CREATE TYPE pg_catalog.anytable;
CREATE TYPE pg_catalog.bool(   INPUT = pg_catalog.boolin,   OUTPUT = pg_catalog.boolout,   RECEIVE = pg_catalog.boolrecv,   SEND = pg_catalog.boolsend,   INTERNALLENGTH = 1,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = char );
CREATE TYPE pg_catalog.bool;
CREATE TYPE pg_catalog.box(   INPUT = pg_catalog.box_in,   OUTPUT = pg_catalog.box_out,   RECEIVE = pg_catalog.box_recv,   SEND = pg_catalog.box_send,   INTERNALLENGTH = 32,   STORAGE = plain,   ELEMENT = point,   DELIMITER = ';',   ALIGNMENT = double );
CREATE TYPE pg_catalog.box;
CREATE TYPE pg_catalog.bpchar(   INPUT = pg_catalog.bpcharin,   OUTPUT = pg_catalog.bpcharout,   RECEIVE = pg_catalog.bpcharrecv,   SEND = pg_catalog.bpcharsend,   INTERNALLENGTH = VARIABLE,   STORAGE = extended,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.bpchar;
CREATE TYPE pg_catalog.bytea(   INPUT = pg_catalog.byteain,   OUTPUT = pg_catalog.byteaout,   RECEIVE = pg_catalog.bytearecv,   SEND = pg_catalog.byteasend,   INTERNALLENGTH = VARIABLE,   STORAGE = extended,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.bytea;
CREATE TYPE pg_catalog.cid(   INPUT = pg_catalog.cidin,   OUTPUT = pg_catalog.cidout,   RECEIVE = pg_catalog.cidrecv,   SEND = pg_catalog.cidsend,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.cid;
CREATE TYPE pg_catalog.cidr(   INPUT = pg_catalog.cidr_in,   OUTPUT = pg_catalog.cidr_out,   RECEIVE = pg_catalog.cidr_recv,   SEND = pg_catalog.cidr_send,   INTERNALLENGTH = VARIABLE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.cidr;
CREATE TYPE pg_catalog.circle(   INPUT = pg_catalog.circle_in,   OUTPUT = pg_catalog.circle_out,   RECEIVE = pg_catalog.circle_recv,   SEND = pg_catalog.circle_send,   INTERNALLENGTH = 24,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = double );
CREATE TYPE pg_catalog.circle;
CREATE TYPE pg_catalog.cstring(   INPUT = pg_catalog.cstring_in,   OUTPUT = pg_catalog.cstring_out,   RECEIVE = pg_catalog.cstring_recv,   SEND = pg_catalog.cstring_send,   INTERNALLENGTH = -2,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = char ); DROP TYPE pg_catalog._cstring;
CREATE TYPE pg_catalog.cstring;
CREATE TYPE pg_catalog.date(   INPUT = pg_catalog.date_in,   OUTPUT = pg_catalog.date_out,   RECEIVE = pg_catalog.date_recv,   SEND = pg_catalog.date_send,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.date;
CREATE TYPE pg_catalog.float4(   INPUT = pg_catalog.float4in,   OUTPUT = pg_catalog.float4out,   RECEIVE = pg_catalog.float4recv,   SEND = pg_catalog.float4send,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.float4;
CREATE TYPE pg_catalog.float8(   INPUT = pg_catalog.float8in,   OUTPUT = pg_catalog.float8out,   RECEIVE = pg_catalog.float8recv,   SEND = pg_catalog.float8send,   INTERNALLENGTH = 8,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = double );
CREATE TYPE pg_catalog.float8;
CREATE TYPE pg_catalog.gpaotid(   INPUT = pg_catalog.gpaotidin,   OUTPUT = pg_catalog.gpaotidout,   RECEIVE = pg_catalog.gpaotidrecv,   SEND = pg_catalog.gpaotidsend,   INTERNALLENGTH = 6,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int2 );
CREATE TYPE pg_catalog.gpaotid;
CREATE TYPE pg_catalog.gpxlogloc(   INPUT = pg_catalog.gpxloglocin,   OUTPUT = pg_catalog.gpxloglocout,   RECEIVE = pg_catalog.gpxloglocrecv,   SEND = pg_catalog.gpxloglocsend,   INTERNALLENGTH = 8,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.gpxlogloc;
CREATE TYPE pg_catalog.inet(   INPUT = pg_catalog.inet_in,   OUTPUT = pg_catalog.inet_out,   RECEIVE = pg_catalog.inet_recv,   SEND = pg_catalog.inet_send,   INTERNALLENGTH = VARIABLE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.inet;
CREATE TYPE pg_catalog.int2(   INPUT = pg_catalog.int2in,   OUTPUT = pg_catalog.int2out,   RECEIVE = pg_catalog.int2recv,   SEND = pg_catalog.int2send,   INTERNALLENGTH = 2,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int2 );
CREATE TYPE pg_catalog.int2;
CREATE TYPE pg_catalog.int2vector(   INPUT = pg_catalog.int2vectorin,   OUTPUT = pg_catalog.int2vectorout,   RECEIVE = pg_catalog.int2vectorrecv,   SEND = pg_catalog.int2vectorsend,   INTERNALLENGTH = VARIABLE,   STORAGE = plain,   ELEMENT = int2,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.int2vector;
CREATE TYPE pg_catalog.int4(   INPUT = pg_catalog.int4in,   OUTPUT = pg_catalog.int4out,   RECEIVE = pg_catalog.int4recv,   SEND = pg_catalog.int4send,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.int4;
CREATE TYPE pg_catalog.int8(   INPUT = pg_catalog.int8in,   OUTPUT = pg_catalog.int8out,   RECEIVE = pg_catalog.int8recv,   SEND = pg_catalog.int8send,   INTERNALLENGTH = 8,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = double );
CREATE TYPE pg_catalog.int8;
CREATE TYPE pg_catalog.internal(   INPUT = pg_catalog.internal_in,   OUTPUT = pg_catalog.internal_out,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 ); DROP TYPE pg_catalog._internal;
CREATE TYPE pg_catalog.internal;
CREATE TYPE pg_catalog.language_handler(   INPUT = pg_catalog.language_handler_in,   OUTPUT = pg_catalog.language_handler_out,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 ); DROP TYPE pg_catalog._language_handler;
CREATE TYPE pg_catalog.language_handler;
CREATE TYPE pg_catalog.line(   INPUT = pg_catalog.line_in,   OUTPUT = pg_catalog.line_out,   RECEIVE = pg_catalog.line_recv,   SEND = pg_catalog.line_send,   INTERNALLENGTH = 32,   STORAGE = plain,   ELEMENT = float8,   DELIMITER = ',',   ALIGNMENT = double );
CREATE TYPE pg_catalog.line;
CREATE TYPE pg_catalog.lseg(   INPUT = pg_catalog.lseg_in,   OUTPUT = pg_catalog.lseg_out,   RECEIVE = pg_catalog.lseg_recv,   SEND = pg_catalog.lseg_send,   INTERNALLENGTH = 32,   STORAGE = plain,   ELEMENT = point,   DELIMITER = ',',   ALIGNMENT = double );
CREATE TYPE pg_catalog.lseg;
CREATE TYPE pg_catalog.macaddr(   INPUT = pg_catalog.macaddr_in,   OUTPUT = pg_catalog.macaddr_out,   RECEIVE = pg_catalog.macaddr_recv,   SEND = pg_catalog.macaddr_send,   INTERNALLENGTH = 6,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.macaddr;
CREATE TYPE pg_catalog.money(   INPUT = pg_catalog.cash_in,   OUTPUT = pg_catalog.cash_out,   RECEIVE = pg_catalog.cash_recv,   SEND = pg_catalog.cash_send,   INTERNALLENGTH = 4,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.money;
CREATE TYPE pg_catalog.name(   INPUT = pg_catalog.namein,   OUTPUT = pg_catalog.nameout,   RECEIVE = pg_catalog.namerecv,   SEND = pg_catalog.namesend,   INTERNALLENGTH = 64,   STORAGE = plain,   ELEMENT = char,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.name;
CREATE TYPE pg_catalog.oid(   INPUT = pg_catalog.oidin,   OUTPUT = pg_catalog.oidout,   RECEIVE = pg_catalog.oidrecv,   SEND = pg_catalog.oidsend,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.oid;
CREATE TYPE pg_catalog.oidvector(   INPUT = pg_catalog.oidvectorin,   OUTPUT = pg_catalog.oidvectorout,   RECEIVE = pg_catalog.oidvectorrecv,   SEND = pg_catalog.oidvectorsend,   INTERNALLENGTH = VARIABLE,   STORAGE = plain,   ELEMENT = oid,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.oidvector;
CREATE TYPE pg_catalog.opaque(   INPUT = pg_catalog.opaque_in,   OUTPUT = pg_catalog.opaque_out,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 ); DROP TYPE pg_catalog._opaque;
CREATE TYPE pg_catalog.opaque;
CREATE TYPE pg_catalog.path(   INPUT = pg_catalog.path_in,   OUTPUT = pg_catalog.path_out,   RECEIVE = pg_catalog.path_recv,   SEND = pg_catalog.path_send,   INTERNALLENGTH = VARIABLE,   STORAGE = extended,   DELIMITER = ',',   ALIGNMENT = double );
CREATE TYPE pg_catalog.path;
CREATE TYPE pg_catalog.point(   INPUT = pg_catalog.point_in,   OUTPUT = pg_catalog.point_out,   RECEIVE = pg_catalog.point_recv,   SEND = pg_catalog.point_send,   INTERNALLENGTH = 16,   STORAGE = plain,   ELEMENT = float8,   DELIMITER = ',',   ALIGNMENT = double );
CREATE TYPE pg_catalog.point;
CREATE TYPE pg_catalog.polygon(   INPUT = pg_catalog.poly_in,   OUTPUT = pg_catalog.poly_out,   RECEIVE = pg_catalog.poly_recv,   SEND = pg_catalog.poly_send,   INTERNALLENGTH = VARIABLE,   STORAGE = extended,   DELIMITER = ',',   ALIGNMENT = double );
CREATE TYPE pg_catalog.polygon;
CREATE TYPE pg_catalog.record(   INPUT = pg_catalog.record_in,   OUTPUT = pg_catalog.record_out,   RECEIVE = pg_catalog.record_recv,   SEND = pg_catalog.record_send,   INTERNALLENGTH = VARIABLE,   STORAGE = extended,   DELIMITER = ',',   ALIGNMENT = double ); DROP TYPE pg_catalog._record;
CREATE TYPE pg_catalog.record;
CREATE TYPE pg_catalog.refcursor(   INPUT = dummy_cast_functions.textin,   OUTPUT = dummy_cast_functions.textout,   RECEIVE = dummy_cast_functions.textrecv,   SEND = dummy_cast_functions.textsend,   INTERNALLENGTH = VARIABLE,   STORAGE = extended,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.refcursor;
CREATE TYPE pg_catalog.regclass(   INPUT = pg_catalog.regclassin,   OUTPUT = pg_catalog.regclassout,   RECEIVE = pg_catalog.regclassrecv,   SEND = pg_catalog.regclasssend,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.regclass;
CREATE TYPE pg_catalog.regoper(   INPUT = pg_catalog.regoperin,   OUTPUT = pg_catalog.regoperout,   RECEIVE = pg_catalog.regoperrecv,   SEND = pg_catalog.regopersend,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.regoper;
CREATE TYPE pg_catalog.regoperator(   INPUT = pg_catalog.regoperatorin,   OUTPUT = pg_catalog.regoperatorout,   RECEIVE = pg_catalog.regoperatorrecv,   SEND = pg_catalog.regoperatorsend,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.regoperator;
CREATE TYPE pg_catalog.regproc(   INPUT = pg_catalog.regprocin,   OUTPUT = pg_catalog.regprocout,   RECEIVE = pg_catalog.regprocrecv,   SEND = pg_catalog.regprocsend,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.regproc;
CREATE TYPE pg_catalog.regprocedure(   INPUT = pg_catalog.regprocedurein,   OUTPUT = pg_catalog.regprocedureout,   RECEIVE = pg_catalog.regprocedurerecv,   SEND = pg_catalog.regproceduresend,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.regprocedure;
CREATE TYPE pg_catalog.regtype(   INPUT = pg_catalog.regtypein,   OUTPUT = pg_catalog.regtypeout,   RECEIVE = pg_catalog.regtyperecv,   SEND = pg_catalog.regtypesend,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.regtype;
CREATE TYPE pg_catalog.reltime(   INPUT = pg_catalog.reltimein,   OUTPUT = pg_catalog.reltimeout,   RECEIVE = pg_catalog.reltimerecv,   SEND = pg_catalog.reltimesend,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.reltime;
CREATE TYPE pg_catalog.smgr(   INPUT = pg_catalog.smgrin,   OUTPUT = pg_catalog.smgrout,   INTERNALLENGTH = 2,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int2 ); DROP TYPE pg_catalog._smgr;
CREATE TYPE pg_catalog.smgr;
CREATE TYPE pg_catalog.text(   INPUT = pg_catalog.textin,   OUTPUT = pg_catalog.textout,   RECEIVE = pg_catalog.textrecv,   SEND = pg_catalog.textsend,   INTERNALLENGTH = VARIABLE,   STORAGE = extended,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.text;
CREATE TYPE pg_catalog.tid(   INPUT = pg_catalog.tidin,   OUTPUT = pg_catalog.tidout,   RECEIVE = pg_catalog.tidrecv,   SEND = pg_catalog.tidsend,   INTERNALLENGTH = 6,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int2 );
CREATE TYPE pg_catalog.tid;
CREATE TYPE pg_catalog.timestamptz(   INPUT = pg_catalog.timestamptz_in,   OUTPUT = pg_catalog.timestamptz_out,   RECEIVE = pg_catalog.timestamptz_recv,   SEND = pg_catalog.timestamptz_send,   INTERNALLENGTH = 8,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = double );
CREATE TYPE pg_catalog.timestamptz;
CREATE TYPE pg_catalog.timetz(   INPUT = pg_catalog.timetz_in,   OUTPUT = pg_catalog.timetz_out,   RECEIVE = pg_catalog.timetz_recv,   SEND = pg_catalog.timetz_send,   INTERNALLENGTH = 12,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = double );
CREATE TYPE pg_catalog.timetz;
CREATE TYPE pg_catalog.tinterval(   INPUT = pg_catalog.tintervalin,   OUTPUT = pg_catalog.tintervalout,   RECEIVE = pg_catalog.tintervalrecv,   SEND = pg_catalog.tintervalsend,   INTERNALLENGTH = 12,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.tinterval;
CREATE TYPE pg_catalog.trigger(   INPUT = pg_catalog.trigger_in,   OUTPUT = pg_catalog.trigger_out,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 ); DROP TYPE pg_catalog._trigger;
CREATE TYPE pg_catalog.trigger;
CREATE TYPE pg_catalog.unknown(   INPUT = pg_catalog.unknownin,   OUTPUT = pg_catalog.unknownout,   RECEIVE = pg_catalog.unknownrecv,   SEND = pg_catalog.unknownsend,   INTERNALLENGTH = -2,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = char ); DROP TYPE pg_catalog._unknown;
CREATE TYPE pg_catalog.unknown;
CREATE TYPE pg_catalog.varbit(   INPUT = pg_catalog.varbit_in,   OUTPUT = pg_catalog.varbit_out,   RECEIVE = pg_catalog.varbit_recv,   SEND = pg_catalog.varbit_send,   INTERNALLENGTH = VARIABLE,   STORAGE = extended,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.varbit;
CREATE TYPE pg_catalog.void(   INPUT = pg_catalog.void_in,   OUTPUT = pg_catalog.void_out,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 ); DROP TYPE pg_catalog._void;
CREATE TYPE pg_catalog.void;
CREATE TYPE pg_catalog.xid(   INPUT = pg_catalog.xidin,   OUTPUT = pg_catalog.xidout,   RECEIVE = pg_catalog.xidrecv,   SEND = pg_catalog.xidsend,   INTERNALLENGTH = 4,   PASSEDBYVALUE,   STORAGE = plain,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.xid;
CREATE TYPE pg_catalog.xml(   INPUT = pg_catalog.xml_in,   OUTPUT = pg_catalog.xml_out,   RECEIVE = pg_catalog.xml_recv,   SEND = pg_catalog.xml_send,   INTERNALLENGTH = VARIABLE,   STORAGE = extended,   DELIMITER = ',',   ALIGNMENT = int4 );
CREATE TYPE pg_catalog.xml;
CREATE UNIQUE INDEX gp_configuration_content_definedprimary_index ON pg_catalog.gp_configuration USING btree(content, definedprimary);
CREATE UNIQUE INDEX gp_configuration_dbid_index ON pg_catalog.gp_configuration USING btree(dbid);
CREATE UNIQUE INDEX gp_fastsequence_objid_objmod_index ON pg_catalog.gp_fastsequence USING btree(objid, objmod);
CREATE UNIQUE INDEX gp_interfaces_interface_index ON pg_catalog.gp_interfaces USING btree(interfaceid);
CREATE UNIQUE INDEX gp_policy_localoid_index ON pg_catalog.gp_distribution_policy USING btree(localoid);
CREATE UNIQUE INDEX gp_relation_node_index ON pg_catalog.gp_relation_node USING btree(relfilenode_oid, segment_file_num);
CREATE UNIQUE INDEX gp_san_config_mountid_index ON pg_catalog.gp_san_configuration USING btree(mountid);
CREATE UNIQUE INDEX gp_segment_config_content_preferred_role_index ON pg_catalog.gp_segment_configuration USING btree(content, preferred_role);
CREATE UNIQUE INDEX gp_segment_config_dbid_index ON pg_catalog.gp_segment_configuration USING btree(dbid);
CREATE UNIQUE INDEX gp_verification_history_vertoken_index ON pg_catalog.gp_verification_history USING btree(vertoken);
CREATE UNIQUE INDEX pg_aggregate_fnoid_index ON pg_catalog.pg_aggregate USING btree(aggfnoid);
CREATE UNIQUE INDEX pg_am_name_index ON pg_catalog.pg_am USING btree(amname);
CREATE UNIQUE INDEX pg_am_oid_index ON pg_catalog.pg_am USING btree(oid);
CREATE UNIQUE INDEX pg_amop_opc_strat_index ON pg_catalog.pg_amop USING btree(amopclaid, amopsubtype, amopstrategy);
CREATE UNIQUE INDEX pg_amop_opr_opc_index ON pg_catalog.pg_amop USING btree(amopopr, amopclaid);
CREATE UNIQUE INDEX pg_amproc_opc_proc_index ON pg_catalog.pg_amproc USING btree(amopclaid, amprocsubtype, amprocnum);
CREATE UNIQUE INDEX pg_appendonly_alter_column_relid_index ON pg_catalog.pg_appendonly_alter_column USING btree(relid, changenum);
CREATE UNIQUE INDEX pg_appendonly_relid_index ON pg_catalog.pg_appendonly USING btree(relid);
CREATE UNIQUE INDEX pg_attrdef_adrelid_adnum_index ON pg_catalog.pg_attrdef USING btree(adrelid, adnum);
CREATE UNIQUE INDEX pg_attrdef_oid_index ON pg_catalog.pg_attrdef USING btree(oid);
CREATE UNIQUE INDEX pg_attribute_encoding_attrelid_attnum_index ON pg_catalog.pg_attribute_encoding USING btree(attrelid, attnum);
CREATE UNIQUE INDEX pg_attribute_relid_attnam_index ON pg_catalog.pg_attribute USING btree(attrelid, attname);
CREATE UNIQUE INDEX pg_attribute_relid_attnum_index ON pg_catalog.pg_attribute USING btree(attrelid, attnum);
CREATE UNIQUE INDEX pg_auth_members_member_role_index ON pg_catalog.pg_auth_members USING btree(member, roleid);
CREATE UNIQUE INDEX pg_auth_members_role_member_index ON pg_catalog.pg_auth_members USING btree(roleid, member);
CREATE UNIQUE INDEX pg_authid_oid_index ON pg_catalog.pg_authid USING btree(oid);
CREATE UNIQUE INDEX pg_authid_rolname_index ON pg_catalog.pg_authid USING btree(rolname);
CREATE UNIQUE INDEX pg_autovacuum_vacrelid_index ON pg_catalog.pg_autovacuum USING btree(vacrelid);
CREATE UNIQUE INDEX pg_cast_oid_index ON pg_catalog.pg_cast USING btree(oid);
CREATE UNIQUE INDEX pg_cast_source_target_index ON pg_catalog.pg_cast USING btree(castsource, casttarget);
CREATE UNIQUE INDEX pg_class_oid_index ON pg_catalog.pg_class USING btree(oid);
CREATE UNIQUE INDEX pg_class_relname_nsp_index ON pg_catalog.pg_class USING btree(relname, relnamespace);
CREATE UNIQUE INDEX pg_compression_compname_index ON pg_catalog.pg_compression USING btree(compname);
CREATE UNIQUE INDEX pg_compression_oid_index ON pg_catalog.pg_compression USING btree(oid);
CREATE UNIQUE INDEX pg_constraint_oid_index ON pg_catalog.pg_constraint USING btree(oid);
CREATE UNIQUE INDEX pg_conversion_default_index ON pg_catalog.pg_conversion USING btree(connamespace, conforencoding, contoencoding, oid);
CREATE UNIQUE INDEX pg_conversion_name_nsp_index ON pg_catalog.pg_conversion USING btree(conname, connamespace);
CREATE UNIQUE INDEX pg_conversion_oid_index ON pg_catalog.pg_conversion USING btree(oid);
CREATE UNIQUE INDEX pg_database_datname_index ON pg_catalog.pg_database USING btree(datname);
CREATE UNIQUE INDEX pg_database_oid_index ON pg_catalog.pg_database USING btree(oid);
CREATE UNIQUE INDEX pg_description_o_c_o_index ON pg_catalog.pg_description USING btree(objoid, classoid, objsubid);
CREATE UNIQUE INDEX pg_extprotocol_oid_index ON pg_catalog.pg_extprotocol USING btree(oid);
CREATE UNIQUE INDEX pg_extprotocol_ptcname_index ON pg_catalog.pg_extprotocol USING btree(ptcname);
CREATE UNIQUE INDEX pg_exttable_reloid_index ON pg_catalog.pg_exttable USING btree(reloid);
CREATE UNIQUE INDEX pg_filespace_entry_fsdb_index ON pg_catalog.pg_filespace_entry USING btree(fsefsoid, fsedbid);
CREATE UNIQUE INDEX pg_filespace_fsname_index ON pg_catalog.pg_filespace USING btree(fsname);
CREATE UNIQUE INDEX pg_filespace_oid_index ON pg_catalog.pg_filespace USING btree(oid);
CREATE UNIQUE INDEX pg_foreign_data_wrapper_name_index ON pg_catalog.pg_foreign_data_wrapper USING btree(fdwname);
CREATE UNIQUE INDEX pg_foreign_data_wrapper_oid_index ON pg_catalog.pg_foreign_data_wrapper USING btree(oid);
CREATE UNIQUE INDEX pg_foreign_server_name_index ON pg_catalog.pg_foreign_server USING btree(srvname);
CREATE UNIQUE INDEX pg_foreign_server_oid_index ON pg_catalog.pg_foreign_server USING btree(oid);
CREATE UNIQUE INDEX pg_foreign_table_reloid_index ON pg_catalog.pg_foreign_table USING btree(reloid);
CREATE UNIQUE INDEX pg_index_indexrelid_index ON pg_catalog.pg_index USING btree(indexrelid);
CREATE UNIQUE INDEX pg_inherits_relid_seqno_index ON pg_catalog.pg_inherits USING btree(inhrelid, inhseqno);
CREATE UNIQUE INDEX pg_language_lanname_index ON pg_catalog.pg_language USING btree(lanname);
CREATE UNIQUE INDEX pg_language_oid_index ON pg_catalog.pg_language USING btree(oid);
CREATE UNIQUE INDEX pg_largeobject_loid_pn_index ON pg_catalog.pg_largeobject USING btree(loid, pageno);
CREATE UNIQUE INDEX pg_namespace_nspname_index ON pg_catalog.pg_namespace USING btree(nspname);
CREATE UNIQUE INDEX pg_namespace_oid_index ON pg_catalog.pg_namespace USING btree(oid);
CREATE UNIQUE INDEX pg_opclass_am_name_nsp_index ON pg_catalog.pg_opclass USING btree(opcamid, opcname, opcnamespace);
CREATE UNIQUE INDEX pg_opclass_oid_index ON pg_catalog.pg_opclass USING btree(oid);
CREATE UNIQUE INDEX pg_operator_oid_index ON pg_catalog.pg_operator USING btree(oid);
CREATE UNIQUE INDEX pg_operator_oprname_l_r_n_index ON pg_catalog.pg_operator USING btree(oprname, oprleft, oprright, oprnamespace);
CREATE UNIQUE INDEX pg_partition_encoding_parencoid_parencattnum_index ON pg_catalog.pg_partition_encoding USING btree(parencoid, parencattnum);
CREATE UNIQUE INDEX pg_partition_oid_index ON pg_catalog.pg_partition USING btree(oid);
CREATE UNIQUE INDEX pg_partition_rule_oid_index ON pg_catalog.pg_partition_rule USING btree(oid);
CREATE UNIQUE INDEX pg_pltemplate_name_index ON pg_catalog.pg_pltemplate USING btree(tmplname);
CREATE UNIQUE INDEX pg_proc_callback_profnoid_promethod_index ON pg_catalog.pg_proc_callback USING btree(profnoid, promethod);
CREATE UNIQUE INDEX pg_proc_oid_index ON pg_catalog.pg_proc USING btree(oid);
CREATE UNIQUE INDEX pg_proc_proname_args_nsp_index ON pg_catalog.pg_proc USING btree(proname, proargtypes, pronamespace);
CREATE UNIQUE INDEX pg_resourcetype_oid_index ON pg_catalog.pg_resourcetype USING btree(oid);
CREATE UNIQUE INDEX pg_resourcetype_resname_index ON pg_catalog.pg_resourcetype USING btree(resname);
CREATE UNIQUE INDEX pg_resourcetype_restypid_index ON pg_catalog.pg_resourcetype USING btree(restypid);
CREATE UNIQUE INDEX pg_resqueue_oid_index ON pg_catalog.pg_resqueue USING btree(oid);
CREATE UNIQUE INDEX pg_resqueue_rsqname_index ON pg_catalog.pg_resqueue USING btree(rsqname);
CREATE UNIQUE INDEX pg_resqueuecapability_oid_index ON pg_catalog.pg_resqueuecapability USING btree(oid);
CREATE UNIQUE INDEX pg_rewrite_oid_index ON pg_catalog.pg_rewrite USING btree(oid);
CREATE UNIQUE INDEX pg_rewrite_rel_rulename_index ON pg_catalog.pg_rewrite USING btree(ev_class, rulename);
CREATE UNIQUE INDEX pg_shdescription_o_c_index ON pg_catalog.pg_shdescription USING btree(objoid, classoid);
CREATE UNIQUE INDEX pg_statistic_relid_att_index ON pg_catalog.pg_statistic USING btree(starelid, staattnum);
CREATE UNIQUE INDEX pg_statlastop_classid_objid_staactionname_index ON pg_catalog.pg_stat_last_operation USING btree(classid, objid, staactionname);
CREATE UNIQUE INDEX pg_statlastshop_classid_objid_staactionname_index ON pg_catalog.pg_stat_last_shoperation USING btree(classid, objid, staactionname);
CREATE UNIQUE INDEX pg_tablespace_oid_index ON pg_catalog.pg_tablespace USING btree(oid);
CREATE UNIQUE INDEX pg_tablespace_spcname_index ON pg_catalog.pg_tablespace USING btree(spcname);
CREATE UNIQUE INDEX pg_trigger_oid_index ON pg_catalog.pg_trigger USING btree(oid);
CREATE UNIQUE INDEX pg_trigger_tgrelid_tgname_index ON pg_catalog.pg_trigger USING btree(tgrelid, tgname);
CREATE UNIQUE INDEX pg_type_encoding_typid_index ON pg_catalog.pg_type_encoding USING btree(typid);
CREATE UNIQUE INDEX pg_type_oid_index ON pg_catalog.pg_type USING btree(oid);
CREATE UNIQUE INDEX pg_type_typname_nsp_index ON pg_catalog.pg_type USING btree(typname, typnamespace);
CREATE UNIQUE INDEX pg_user_mapping_oid_index ON pg_catalog.pg_user_mapping USING btree(oid);
CREATE UNIQUE INDEX pg_user_mapping_user_server_index ON pg_catalog.pg_user_mapping USING btree(umuser, umserver);
CREATE UNIQUE INDEX pg_window_fnoid_index ON pg_catalog.pg_window USING btree(winfnoid);
