%YAML 1.1
---

# ============================================================================
# Support of "C" language functions was enabled in the 1.0.0.2 version of
# the Greenplum YAML specification by adding the new "LIBRARY" attribute
# to MAP/TRANSITION/CONSOLIDATE/FINALIZE specifications.
# ============================================================================
VERSION:   1.0.0.2
USER:      @db_user@

DEFINE:

  # ==========================================================================
  # This is the input used by all our examples
  # ==========================================================================
  - INPUT:
      NAME:      smalldoc
      FILE:      @hostname@:@abs_srcdir@/data/smalldoc.txt
      COLUMNS:   [line text]

  # ==========================================================================
  # For comparison purposes we also show how to do the same thing
  #  1) Using user defined C functions
  #  2) Using the builtin "SUM" reducer
  #  3) Using builtin functions to define a custom reducer
  #  4) Using a straight callout to SQL
  # ==========================================================================
  
  # ==========================================================================
  # 1) Using user defined C functions
  #
  # See the code in lib/gpmrdemo.c for details
  #
  # Note: There is an assumption that the gpmrdemo.so has already been installed
  # across the cluster in $GPHOME/lib/postgresql.
  # ==========================================================================
  - MAP:
      NAME:        wordsplit
      PARAMETERS: [line text]
      RETURNS:    [key text, value int4]
      LANGUAGE:   C
      LIBRARY:    $libdir/gpmrdemo.so
      FUNCTION:   wordsplit

  - TRANSITION:
      NAME:       int4_accum
      PARAMETERS: [state int8, value int4]
      RETURNS:    [state int8]
      LANGUAGE:   C
      LIBRARY:    $libdir/gpmrdemo.so
      FUNCTION:   int4_accum

  - CONSOLIDATE:
      NAME:       int8_add
      PARAMETERS: [value1 int8, value2 int8]
      RETURNS:    [value int8]
      LANGUAGE:   C
      LIBRARY:    $libdir/gpmrdemo.so
      FUNCTION:   int8_add

  - REDUCE:
      NAME:        c_sum
      TRANSITION:  int4_accum
      CONSOLIDATE: int8_add

  # This task isn't strictly necessary, we could have simply defined
  # the REDUCE in the RUN block below.
  - TASK:
      NAME:        sum_mr_task
      SOURCE:      smalldoc
      MAP:         wordsplit
      REDUCE:      c_sum


  # ==========================================================================
  # 2) SUM as a builtin reducer
  #
  # Note: the use of the builtin SUM reducer
  # ==========================================================================
  - TASK:
      NAME:       sum_builtin_task
      SOURCE:     smalldoc
      MAP:        wordsplit
      REDUCE:     SUM

  # ==========================================================================      
  # 3) Using builtin functions to define a custom reducer
  #
  # Note: the transition function and consolidate function are not defined
  # anywhere in the yaml, they are pre-existing functions within the database.
  # This only works because the functions "int4_sum" and "int8mi" are uniquely
  # defined in the database (in contrast to a function like "convert" which
  # has multiple overloaded arguments).  It is also important to ensure that
  # the output type of the transition function is the same as the input types
  # of the consolidate function.
  #
  # in this case int4_sum(a int8, b int4) => c int8
  #     'a': is the input state, it must be as same as the return type 'c'
  #     'b': is the input value, the input we are passing into the function
  #        (the value column) should be castable to this datatype.
  #
  # ... int8mi(x int8, y int8) => z int8
  #     'x' and 'y' are input states produced by the transition function.
  #     'z' is the return type of the function.
  #     'x', 'y', and 'z' must all be the same datatype as 'c'
  # ==========================================================================
  - REDUCE:
      NAME:        sum_builtin2
      TRANSITION:  int4_sum
      CONSOLIDATE: int8mi

  - TASK:
      NAME:        sum_bulitin2_task
      SOURCE:      smalldoc
      MAP:         wordsplit
      REDUCE:      sum_builtin2

  # ==========================================================================
  # 4) A direct callout to SQL
  #
  # Note: we can use either a TASK or an INPUT as a SOURCE
  # for execution.
  # ==========================================================================
  - INPUT:
      NAME:      sum_sql
      QUERY:     |
        SELECT key, sum(value)
        FROM (select regexp_split_to_table(line, ' ') as key, 1 as value from smalldoc) m
        WHERE key != ''
        GROUP BY key;

  # ==========================================================================
  # Define the outputs for all the examples above.
  # ==========================================================================
  - OUTPUT:
      NAME:     out_1
      FILE:     @abs_srcdir@/output/c_function.1
      MODE:     replace
      DELIMITER: '|'

  - OUTPUT:
      NAME:     out_2
      FILE:     @abs_srcdir@/output/c_function.2
      MODE:     replace
      DELIMITER: '|'

  - OUTPUT:
      NAME:     out_3
      FILE:     @abs_srcdir@/output/c_function.3
      MODE:     replace
      DELIMITER: '|'      

  - OUTPUT:
      NAME:     out_4
      FILE:     @abs_srcdir@/output/c_function.4
      MODE:     replace
      DELIMITER: '|'      

      
      
# ============================================================================
# The execute block is what is responsible for actually calling
# each of the above examples and associating them with specific
# outputs.
# ============================================================================
EXECUTE:
  - RUN:
      SOURCE:   sum_mr_task
      TARGET:   out_1

  - RUN:
      SOURCE:   sum_builtin_task
      TARGET:   out_2
      
  - RUN:
      SOURCE:   sum_builtin_task
      TARGET:   out_3

  - RUN:
      SOURCE:   sum_sql
      TARGET:   out_4
