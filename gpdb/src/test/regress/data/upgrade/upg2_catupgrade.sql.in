--
-- Catalog Upgrade Script
--
-- AK: This script is not backwards compatible with older upgrade content. The
-- older upgrade content is provided in source control for ease of reference; however,
-- they may rely on functions or function behavior in this driver script that is no
-- longer present. Because of this, attempts to build an upgrade that spans multiple major 
-- versions will have to be careful, as the various upgrade scripts cannot be naively concatenated.
--
--   This script has 3 parts
--   1. Pre-upgrade setup
--   2. Execute the main upgrade script
--   3. Post-upgrade cleanup and commit
--
--   In pre-upgrade, we
--     1. set psql to "stop on error"
--     2. create helper function
--
--  In the main execution script, it'll perform DDL/DML to transform the catalog
--  to the next version of the catalog
--
--  In the post-upgrade step, we
--     1. add PIN dependency to newly created catalog objects
--     2. drop the helper functions


-------------------------------------
-- Pre upgrade
--   set plsql to "stop on error"
--   create temp helper routines
------------------------------------
\set ON_ERROR_STOP ON

-- We need plpgsql
create language plpgsql;

-- Use this pl/pgsql function to execute DML on cat tab on all segs
create or replace function @gpupgradeschemaname@.catDML(stmt text) returns int as $$
declare
  contentid integer;
begin
  SELECT INTO contentid current_setting('gp_contentid');
  IF contentid = -1 THEN
    PERFORM @gpupgradeschemaname@.catDML(stmt) FROM gp_dist_random('gp_id');
  END IF;

  execute stmt;
  return 1;
end;
$$ language 'plpgsql';

-- Use this pl/pgsql function to remove the default table privilege
create or replace function @gpupgradeschemaname@.removeDefaultPrivilege(tablenm text) returns int as $$
declare
  username name;
  stmt text;
begin
  select rolname into username from pg_authid where oid = 10;
  stmt := 'revoke all on table @gpupgradeschemaname@.' || tablenm || ' from ' || quote_ident(username);
  execute stmt;
  return 1;
end;
$$ language 'plpgsql';

-------------------------------------
-- Execute the main upgrade script
-------------------------------------
\set upg2script `echo $GPHOME/share/postgresql/upgrade/upg2_catupgrade_43.sql`
\i :upg2script

-------------------------------------
-- Blow away the gp_toolkit schema
-------------------------------------
DROP SCHEMA if exists gp_toolkit cascade;
CREATE SCHEMA gp_toolkit ;

----------------------------------------
-- Post upgrade step
--   add PIN dependency to newly created catalog objects
--   drop temp helper routine
----------------------------------------
select @gpupgradeschemaname@.catDML(
'INSERT INTO @gpupgradeschemaname@.pg_depend SELECT 0,0,0, tableoid,oid,0, ''p'' FROM @gpupgradeschemaname@.pg_proc
        where (tableoid,oid) not in (Select refclassid, refobjid from @gpupgradeschemaname@.pg_depend where deptype = ''p'')
          and oid < 10000'
);
select @gpupgradeschemaname@.catDML(
'INSERT INTO @gpupgradeschemaname@.pg_depend SELECT 0,0,0, tableoid,oid,0, ''p'' FROM @gpupgradeschemaname@.pg_class
        where (tableoid,oid) not in (Select refclassid, refobjid from @gpupgradeschemaname@.pg_depend where deptype = ''p'')
          and oid < 10000'
);
select @gpupgradeschemaname@.catDML(
'INSERT INTO @gpupgradeschemaname@.pg_depend SELECT 0,0,0, tableoid,oid,0, ''p'' FROM @gpupgradeschemaname@.pg_type
        where (tableoid,oid) not in (Select refclassid, refobjid from @gpupgradeschemaname@.pg_depend where deptype = ''p'')
          and oid < 10000'
);
select @gpupgradeschemaname@.catDML(
'INSERT INTO @gpupgradeschemaname@.pg_depend SELECT 0,0,0, tableoid,oid,0, ''p'' FROM @gpupgradeschemaname@.pg_operator
        where (tableoid,oid) not in (Select refclassid, refobjid from @gpupgradeschemaname@.pg_depend where deptype = ''p'')
          and oid < 10000'
);
select @gpupgradeschemaname@.catDML(
'INSERT INTO @gpupgradeschemaname@.pg_depend SELECT 0,0,0, tableoid,oid,0, ''p'' FROM @gpupgradeschemaname@.pg_cast
        where (tableoid,oid) not in (Select refclassid, refobjid from @gpupgradeschemaname@.pg_depend where deptype = ''p'')
          and oid < 10000'
);

drop function @gpupgradeschemaname@.catDML(stmt text);
drop function @gpupgradeschemaname@.removeDefaultPrivilege(tablenm text);
\unset ON_ERROR_STOP
