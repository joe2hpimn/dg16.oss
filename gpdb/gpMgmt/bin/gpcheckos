#!/usr/bin/env python 

'''
gpcheckos -- check os for consistency and compatibility with GPDB.

Usage: gpcheckos [--version] [-?v] [-m] [-h host] [-f hostfile] [-c checkfile]
          --version : print version information
          -?        : print this help screen
          -v        : verbose mode
          -h host   : the host to connect to (multiple -h is okay)
          -f file   : a file listing all hosts to connect to
          -m        : check for query dispatcher settings
'''

import os, sys

sys.path.append(sys.path[0] + '/lib')
try:
    import getopt, popen2, pickle, time
    from datetime import datetime, timedelta
    from gppylib.util import ssh_utils
    from gppylib.gpparseopts import OptParser
    from gppylib.gpcoverage import GpCoverage
except ImportError, e:
    sys.exit('Error: unable to import module: ' + str(e))

def run(cmd):
    f = None
    ok = False
    out = []
    try:
        f = os.popen(cmd)
        for line in f:
            out.append(line)
        ok = not f.close()
    finally:
        if f: f.close()

    return (ok, out)

###############################
###  This is the content of the file ./lib/gpsys.py
gpsys = '''#!/usr/bin/env python 
"""
gpsys.py -- print system properties

Usage: gpsys.py [-p] [-t] [-d gphome]

	-p  : print system properties in Python pickled format
        -t  : print system properties in Text (default).
	-d  : GPHOME dir
"""

import os, platform, sys, getopt, pickle, socket, subprocess
from datetime import datetime

opt = {}
opt['-p'] = False
opt['-d'] = ''

def makeCommand(cmd):
    if not opt['-d']: return ''
    return ('GPHOME=%s && export GPHOME '
            '&& PATH=$GPHOME/bin:$PATH && export PATH '
            '&& LD_LIBRARY_PATH=$GPHOME/lib:$LD_LIBRARY_PATH && export LD_LIBRARY_PATH '
            '&& %s'
            % (opt['-d'], cmd))

################
def usage(exitarg):
    print __doc__
    sys.exit(exitarg)


def parseCommandLine():
    global opt
    try:
        (options, args) = getopt.getopt(sys.argv[1:], 'ptd:')
    except Exception, e:
        usage('Error: ' + str(e))

    for (switch, val) in options:
        if switch == '-p':	opt['-p'] = True
        elif switch == '-t':    opt['-p'] = False
	elif switch == '-d':	opt['-d'] = val


def run(cmd):
    f = None
    ok = False
    out = []
    try:
        f = os.popen(cmd)
        for line in f:
            out.append(line)
        ok = not f.close()
    finally:
        if f: f.close()

    return (ok, out)

def add(res, prefix, lines):
    for line in lines:
        x = line.split(' ', 1)
        if len(x) == 2:
            x[0] = x[0].strip()
            x[1] = x[1].strip()
            if (x[0] and x[1]):
                if x[0][-1] == ':':
                    x[0] = x[0][:-1]
                elif x[1][0] == ':':
                    x[1] = x[1][1:]
                elif x[0][-1] == '=':
                    x[0] = x[0][:-1]
                elif x[1][0] == '=':
                    x[1] = x[1][1:]

                if x[0]:
                    res[prefix + x[0].lower().strip()] = x[1].strip()
    return res


def do_gppath(res):
    if opt['-d']: res['env.GPHOME'] = opt['-d']
    return True


def do_postgres_md5(res):
    cmd = makeCommand("cat $GPHOME/bin/postgres | "
                      "python -c 'import md5, sys; m = md5.new(); m.update(sys.stdin.read()); print m.hexdigest()'")
    if cmd:
        (ok, out) = run(cmd)
        if ok:
            for line in out:
                if len(line) == 33:
                    res['postgres.md5'] = line.lower().strip()
                    return True
    return False


def do_postgres_version(res):
    cmd = makeCommand("$GPHOME/bin/postgres --version")
    if cmd:
        (ok, out) = run(cmd)
        if ok and len(out) == 1: 
            res['postgres.version'] = out[0].strip()
            return True
    return False
            


def do_sysctl(res):
    (ok, out) = run('export PATH="/sbin:/usr/sbin:$PATH" && sysctl -a 2> /dev/null')
    if ok:
        add(res, 'sysctl.', out)
    return ok


def do_ulimit(res):
    shell = os.getenv('SHELL', '/bin/bash')
    (ok, out) = run('%s -c "ulimit -u && ulimit -n"' % shell)
    if ok:
        res['ulimit.nproc'] = out[0].strip()
        res['ulimit.nofile'] = out[1].strip()
    return ok


def do_sync(res):
    res['sync.time'] = datetime.today()

def do_platform(res):
    res['platform.platform'] = platform.platform()
    uname = platform.uname()
    res['platform.system'] = uname[0].lower()
    res['platform.node'] = uname[1]
    res['platform.release'] = uname[2]
    res['platform.version'] = uname[3]
    res['platform.machine'] = uname[4]
    res['platform.processor'] = uname[5]
    res['platform.hostname'] = socket.gethostname()
    s = res['platform.system']
    mem = 0
    if (s.find('sunos') >= 0): 
        (ok, out) = run("""sh -c "/usr/sbin/prtconf | awk '/^Memory/{print}'" """)
        if ok: 
            list = out[0].strip().split(' ')
            val = int(list[2])
            factor = list[3]
            if factor == 'Megabytes':
                mem = val * 1024 * 1024
        (ok, out) = run ("/usr/sbin/swap -s")
        if ok:
            if len(out) > 0:
                x = out[0].split()
                used = 0
                avail = 0
                if x[8][-1] == "k":
                    used = int (x[8][:-1]) * 1024
                else:
                    used = int (x[8])
                if x[10][-1] == "k":
                    avail = int (x[10][:-1]) * 1024
                else:
                    avail = int (x[10])
                swap = used + avail
                res['platform.swap'] = swap

    elif (s.find('linux') >= 0):
	ok, out = run("sh -c 'cat /proc/meminfo | grep MemTotal'")
        if ok:
            list = out[0].strip().split(' ')
            val = int(list[len(list) - 2])
            factor = list[len(list) - 1]
            if factor == 'kB': 
                mem = val * 1024
    elif (s.find('darwin') >= 0):
	(ok, out) = run("/usr/sbin/sysctl hw.physmem")
        if ok:
            list = out[0].strip().split(' ')
            mem = int(list[1])

    res['platform.memory'] = mem
    return True

def do_python(res):
    version = sys.version_info
    res['python.version'] = '%s.%s.%s' % version[0:3]

def do_system(res):
    SYSTEM_KEYS = ('rlim_fd_max', 'rlim_fd_cur', 
		'shmsys:shminfo_shmmax', 'semsys:seminfo_semmni')
    f = open('/etc/system', 'r')
    content = f.read()
    f.close()
    
    p = []
    lines = content.splitlines()
    for line in lines:
        line = line.strip()
        if line.startswith('set'):
            for key in SYSTEM_KEYS:
                if line.find(key) != -1:
		    res['system.%s' % key] = line[3:].split('=')[-1].strip()
                    break

    return True

def do_meminfo(res):
    if not os.path.exists('/proc/meminfo'):
        return False

    f = None
    try:
        f = open('/proc/meminfo', 'r')
        list = []
        for line in f:
            list.append(line)
        add(res, '/proc/meminfo', list)
        return True
    finally:
        if f: f.close()

def do_ndd(res):
    if not os.path.exists('/usr/sbin/ndd'):
        return False

    list = ('tcp_conn_req_max_q', 'tcp_conn_req_max_q0', 'tcp_largest_anon_port', \
                'tcp_smallest_anon_port', 'tcp_time_wait_interval')
    for key in list:
        (ok, out) = run('/usr/sbin/ndd /dev/tcp ' + key)
        if ok and len(out) == 1:
            res['ndd.' + key] = out[0].strip()

def do_solaris(res):
    if not os.path.exists('/etc/release'):
        return False
    f = open('/etc/release')
    lines = f.readlines();
    f.close();
    for i in lines:
	i = i.strip()
        if i.startswith('Solaris 10'):
            res['solaris.release'] = i
    cmd = ["ls -1 /var/sadm/patch ", "r"]
    f = os.popen("ls -1 /var/sadm/patch ", "r")
    files = f.readlines()
    f.close()
    res['solaris.patch_file'] = ' '.join(files)
    f = os.popen("/bin/showrev -p", "r")
    lines = f.readlines();
    f.close()
    patch = []
    for i in lines:
	i = i.strip() 
	i = i.split()
	if len(i) > 2:
	    patch.append(i[1]);
    res['solaris.patch'] = ' '.join(patch)

def do_zfs(res):
    (ok, out) = run('/sbin/zpool list -H')
    if ok and len(out) == 1:
        r = out[0].split()
        if len(r) == 7:
            res['zfs.health'] = r[5].strip()
            (ok, out) = run('/sbin/zfs get -H checksum %s' % r[0])
            if ok and len(out) == 1:
                r = out[0].split()
                if len(r) == 4:
                    res['zfs.checksum'] = r[2].strip()

parseCommandLine()
res = {}

do_gppath(res)
do_postgres_md5(res)
do_postgres_version(res)
do_python(res)
do_platform(res)
do_sync(res)
system = res['platform.system']
if system == 'sunos':
    do_zfs(res)
    do_system(res)
    do_ndd(res)
    do_solaris(res)
elif system == 'linux':
    do_sysctl(res)
    do_ulimit(res)
    do_meminfo(res)
elif system == 'darwin': 
    do_sysctl(res)
    do_ulimit(res)


if opt['-p']:
    print "BEGINDUMP"
    print pickle.dumps(res)
    print "ENDDUMP"
else:
    for i in res:
        print i, ' | ', res[i]

'''

def get_solaris_update():
    if not os.path.exists('/etc/release'):
        return False
    f = open('/etc/release')
    lines = f.readlines();
    f.close();
    for i in lines:
	i = i.strip()
        if i.startswith('Solaris 10'):
            res = ((i.split())[3])[6]
            return res
    return ""


script_name = os.path.split(__file__)[-1]
opt = {}
opt['-v'] = False
opt['-p'] = None
opt['-u'] = os.environ.get('LOGNAME') or os.environ.get('USER')
opt['-h'] = []
opt['-f'] = False
opt['-m'] = False

GPHOME = os.environ.get('GPHOME')


masterconf = '''
python.version                          str     >= 2.5.0
env.GPHOME                              str     = %s
''' % GPHOME

linuxconf = '''
sysctl.kernel.shmmax			int	>= 500000000
sysctl.kernel.shmmni			int	>= 4096
sysctl.kernel.shmall			int	= 4000000000
sysctl.kernel.sem			intlist = 250 64000 100 512
sysctl.net.ipv4.tcp_tw_recycle		int	= 1
sysctl.net.ipv4.tcp_max_syn_backlog	int	= 4096
sysctl.net.ipv4.ip_local_port_range	intlist = 1025 65535
sysctl.net.core.netdev_max_backlog	int	= 10000
sysctl.vm.overcommit_memory		int	= 2
ulimit.nofile				int	>= 65536
ulimit.nproc				int	>= 131072
'''


sunosconf10u4 = '''
zfs.health                         str          = ONLINE
zfs.checksum                       str          = on 
ndd.tcp_conn_req_max_q			int	= 4096
ndd.tcp_conn_req_max_q0			int	= 4096
ndd.tcp_largest_anon_port		int	= 65535
ndd.tcp_smallest_anon_port		int	= 4096
ndd.tcp_time_wait_interval		int	between 500 1000
system.rlim_fd_max			int	= 262144
system.rlim_fd_cur			int	= 65536
system.shmsys:shminfo_shmmax		int	>= 0x2000000
system.semsys:seminfo_semmni		int	= 1024
solaris.release				str	= Solaris 10 8/07 s10x_u4wos_12b X86
platform.version				str	contains Generic_127112-11
solaris.patch				str	contains 125370-06
solaris.patch                       str   contains 127112-11
solaris.patch                       str   contains 125205-07
solaris.patch                       str   contains 121431-20
solaris.patch                       str   contains 125417-04
solaris.patch                       str   contains 127729-07
solaris.patch                       str   contains 137889-04 

'''

sunosconf10u5 = '''
zfs.health                         str          = ONLINE
zfs.checksum                       str          = on 
ndd.tcp_conn_req_max_q			int	= 4096
ndd.tcp_conn_req_max_q0			int	= 4096
ndd.tcp_largest_anon_port		int	= 65535
ndd.tcp_smallest_anon_port		int	= 4096
ndd.tcp_time_wait_interval		int	between 500 1000
system.rlim_fd_max			int	= 262144
system.rlim_fd_cur			int	= 65536
system.shmsys:shminfo_shmmax		int	>= 0x2000000
system.semsys:seminfo_semmni		int	= 1024
solaris.release				str	= Solaris 10 5/08 s10x_u5wos_10 X86
platform.version				str	contains Generic_127128-11
solaris.patch				str	contains 138158-01
solaris.patch				str	contains 138307-01
solaris.patch				str	contains 128401-01
solaris.patch				str	contains 138049-01
solaris.patch				str	contains 121005-04
solaris.patch				str	contains 138053-01
solaris.patch				str	contains 126654-02
solaris.patch				str	contains 127867-03
solaris.patch				str	contains 126134-03
solaris.patch				str	contains 138043-01
solaris.patch				str	contains 138076-01
solaris.patch				str	contains 138047-01
solaris.patch				str	contains 127965-05
solaris.patch				str	contains 138065-01
solaris.patch				str	contains 138057-01
solaris.patch				str	contains 127891-03
solaris.patch				str	contains 118825-02
solaris.patch				str	contains 138160-01
solaris.patch				str	contains 128307-04
solaris.patch				str	contains IDR138594-01


'''

def to_int(s):
    s = s.strip()
    try:
        if s.startswith('0x'):
            s = int(s[2:], 16)
        else:
            s = int(s)
    except ValueError, TypeError:
        s = -1;
    return s

def to_intlist(s):
    s = s.strip()
    r = []
    try:
        for i in s.split():
            i = to_int(i)
            r.append(i)
    except ValueError, TypeError:
        r = []
    return r

def to_str(s):
    return s.strip()

def cmp_eq(a, b): return a == b
def cmp_gt(a, b): return a > b
def cmp_gte(a, b): return a >= b
def cmp_lt(a, b): return a < b
def cmp_lte(a, b): return a <= b
def cmp_between(a, b): 
    if len(b) >= 2:
        return b[0] <= a and a <= b[1]
    else:
        return False
def cmp_contains(a, b): return a.find(b) >= 0

class Config:

    def __init__(self):
        self.etab = {}

    def loads(self, s, fname=None, overwrite=True):
        cnt = 0
        for line in s.split('\n'):
            cnt = cnt + 1
            if not line:
                continue

            if line.startswith('#'):
                continue

            try:
                (key, keytype, op, values) = line.split(None, 3);
            except KeytypeError:
                sys.exit('while processing: %s\nerror: bad config line at %s %s'
                         % (line, cnt, fname and 'in file ' + fname or ''))

            if keytype == 'int':
                keytype = 'to_int'
            elif keytype == 'intlist':
                keytype = 'to_intlist'
	    elif keytype == 'str':
		keytype = 'to_str'
            else:
                sys.exit('while processing: %s\nerror: bad config line at %s %s'
                         % (line, cnt, fname and 'in file ' + fname or ''))
            
            if op == '=': 		fop = 'cmp_eq'
            elif op == '>': 		fop = 'cmp_gt'
            elif op == '>=':		fop = 'cmp_gte'
            elif op == '<':		fop = 'cmp_lt'
            elif op == '<=':		fop = 'cmp_lte'
            elif op == 'between':	fop = 'cmp_between'
            elif op == 'contains':	fop = 'cmp_contains'
            else:
                sys.exit('while processing: %s\nerror: bad config line at %s %s'
                         % (line, cnt, fname and 'in file ' + fname or ''))

            valuetype = keytype
            if fop == 'cmp_between':
                if keytype != 'to_int':
                    sys.exit('while processing: %s\nerror: expect int for between operator at line %s %s'
                             % (line, cnt, fname and 'in file ' + fname or ''))
                if len(to_intlist(values)) != 2:
                    sys.exit('while processing: %s\nerror: expect intlist of 2 elements for between operator at line %s %s'
                             % (line, cnt, fname and 'in file ' + fname or ''))
                valuetype = 'to_intlist'

            if not overwrite and self.etab.get(key):
                print 'key', key, 'exists - passed'
                pass
            else:
                self.etab[key] = ('%s %s %s' % (key, op, values),
                                   '%s(%s("%%s"), %s("%s"))' % (fop, keytype, valuetype, values), 
                                   values)
    
        #print self.etab

    def getCheck(self, key):
        e = self.etab.get(key)
        if not e:
            return ('', lambda x: False)
        return (e[0], lambda x: eval(e[1] % x), e[2])

################
def usage(exitarg):
    parser = OptParser()
    try:
        parser.print_help()
    except:
        print __doc__
    sys.exit(exitarg)


#############
def print_version():
    print '%s version $Revision$' % script_name
    sys.exit(0)

#############
def parseCommandLine():
    global opt, argcmd
    try:
	(options, args) = getopt.getopt(sys.argv[1:], '?vmh:f:', ['version'])
    except Exception, e:
	usage('Error: ' + str(e))

    for (switch, val) in options:
	if (switch == '-?'):	      usage(0)
	elif (switch[1] in 'v'):      opt[switch] = True
	elif (switch[1] in 'f'):     opt[switch] = val
	elif (switch == '-h'):        opt[switch].append(val)
        elif (switch == '--version'): print_version()
        elif (switch == '-m'):        opt[switch] = True

    hf = (len(opt['-h']) and 1 or 0) + (opt['-f'] and 1 or 0)
    if hf != 1:
	usage('Error: please specify at least one of -h or -f args, but not both')

    if (len(args) >= 1):
	argcmd = " ".join(args)


##########
def sshGpSys():
    session = []
    fname = '/tmp/gpsys_$USER'
    for peer in opt['-h']:
        cmd = "cat > %s && chmod +x %s && %s -p" % (fname, fname, fname)
        if GPHOME:
            cmd = cmd + " -d %s" % GPHOME
        ssh = ssh_utils.ssh_prefix(peer)
	ssh = ssh + ' \'%s\' ' % cmd
        if opt['-v']: print '[INFO %s] %s' % (peer, cmd)
        p = popen2.Popen4(ssh)
	p.x_cmd = cmd;   p.x_ssh = ssh
	p.x_peer = peer
        p.tochild.write(gpsys);
	p.tochild.close()
	session.append(p)

    return session

def waitSession(session):
    errmsg = None
    permissionDenied = False
    for p in session:
        p.x_res = p.fromchild.read()
        i = p.x_res.find("BEGINDUMP")
        if i >= 0: p.x_res = p.x_res[i+10:]
        try:
            p.x_res = pickle.loads(p.x_res)
        except KeyboardInterrupt:
            raise
        except:
            if opt['-v']: print p.x_res
            permissionDenied = (p.x_res.find('Permission denied') >= 0)
            if permissionDenied:
                errmsg = ('[ERROR %s] ssh permission denied while %s\n\t%s' 
                          % (p.x_peer, p.x_ssh, p.x_res))
            else:
                noSuchFile = (p.x_res.find('No such file') >= 0)
                if noSuchFile:
                    errmsg = ('[ERROR %s] no such file error while %s\n\t%s' 
                              % (p.x_peer, p.x_ssh, p.x_res))
                else:
                    errmsg = ('[ERROR %s] bad output while %s\n\t%s' 
                              % (p.x_peer, p.x_ssh, p.x_res))
            print errmsg
        if opt['-v']: 
            keys = p.x_res.keys()
            keys.sort()
            for key in keys:
                print '[INFO %s] %s: %s' % (p.x_peer, key, p.x_res[key])
            print
	status = p.wait()
	if status:
	    errmsg = '[ERROR %s] Command failed. Exit status = %s. Command = %s' % (p.x_peer, status, p.x_ssh)
	    print errmsg
		
    if permissionDenied:
	print
	print 'hint: check if the host is alive'
	print 'hint: use gpssh-exkeys to setup public-key authentication between hosts'
	print
    if errmsg: sys.exit(1)


def perr(host, s):
    print '   ERROR: on %s - %s' % (host, s)
    

errors = {}
def error(host, key, value):
    global errors

    if host not in errors:
        errors[host] = {}

    index = key.find('.')
    if index == -1:
        type = 'others'
    else:
        type = key[0:index]
        key = key[index+1:]
    
    if not type in errors[host]:
        errors[host][type] = []

    errors[host][type].append((key, value))


def print_fix():
    global errors

    print ''
    for h in errors.keys():

        if 'sysctl' in errors[h]:
	    print
            print '[FIX %s] please add/modify the following line(s) in /etc/sysctl.conf' % h
            for (key, value) in errors[h]['sysctl']:
                print '%s = %s' % (key, value)

        if 'env' in errors[h]:
	    print
            for (key, value) in errors[h]['env']:
                print '[FIX %s] please set the %s environment variable' % (h, key)
            
        if 'postgres' in errors[h]:
	    print
            print '[FIX %s] please check the software version or installation' % h
            for (key, value) in errors[h]['postgres']:
                print 'check %s = %s' % (key, value)

        if 'python' in errors[h]:
            print
            print '[FIX %s] please check python version.' %h
            for (key, value) in errors[h]['python']:
                print 'check python %s is %s or above.' % (key, value)

        if 'ndd' in errors[h]:
	    print
            print '[FIX %s] please add/modify the following line(s) in /etc/rc2.d/S*gpdb_ndd' % h
            for (key, value) in errors[h]['ndd']:
                print '/usr/sbin/ndd -set /dev/tcp %s %s' % (key, value)

        if 'platform' in errors[h]:
	    print
            print '[FIX %s] please validate the OS configuration' % h
            for (key, value) in errors[h]['platform']:
                print 'check %s = %s' % (key, value)

        if 'system' in errors[h]:
	    print
            print '[FIX %s] please add/modify the following line(s) in /etc/system'  % h
            for (key, value) in errors[h]['system']:
                print 'set %s=%s' % (key, value)

        if 'ulimit' in errors[h]:
	    print
            print '[FIX %s] please add/modify the following line(s) in /etc/security/limits.conf' % h
            for (key, value) in errors[h]['ulimit']:
                print '* soft %s %s' % (key, value)
                print '* hard %s %s' % (key, value)

        if 'sync' in errors[h]:
            print
            print '[FIX %s] please synchronize system time across machines' % h
            for (key, value) in errors[h]['sync']:
                print 'check %s = %s' % (key, value)

        if 'zfs' in errors[h]:
            print 
            print '[FIX %s] please check the zfs'
            for (key, value) in errors[h]['zfs']:
                print 'check %s = %s' % (key, value)

        if 'others' in errors[h]:
	    print
            print '[FIX %s] please add/modify the line(s)' % h
            for (key, value) in errors[h]['others']:
                print '%s = %s' % (key, value)
            
                    
def match(session, key, value):
    ok = True
    print 'checking: %s = %s' % (key, value)
    for p in session:
        v = p.x_res.get(key, '')
        p.x_match = (v == value)
        if not p.x_match: 
            perr(p.x_peer, '%s mismatch (value %s should == %s)' % (key, v, value))
            error(p.x_peer, key, value)
            ok = False
    return ok

def matchList(session, key, value):
    ok = True
    print 'checking: %s = %s' % (key, value)
    vs = value.split()
    for p in session:
	v = p.x_res.get(key, '')
	l = v.split()
        p.x_match = (l == vs)
        if not p.x_match:
            perr(p.x_peer, '%s mismatch (value %s should == %s)' % (key, str(l), str(vs)))
            error(p.x_peer, key, value)
            ok = False
    return ok

def matchListMore(session, key, value):
    ok = True
    print 'checking: %s = %s' % (key, value)
    vs = value.split()
    for p in session:
	v = p.x_res.get(key, '')
	l = v.split()
        p.x_match = (l >= vs)
        if not p.x_match:
            perr(p.x_peer, '%s mismatch (value %s should == %s)' % (key, str(l), str(vs)))
            error(p.x_peer, key, value)
            ok = False
    return ok

def matchMore(session, key, value):
    ok = True
    print 'checking: %s >= %s' % (key, value)
    value = int(value)
    for p in session:
        v = p.x_res.get(key)
        if v == None:
            p.x_match = False
            perr(p.x_peer, '%s invalid (value not set, should be >= %s)' % (key, value))
            error(p.x_peer, key, value)
        else:
            try:
                if v.startswith('0x'): 
                    v = int(v[2:], 16)
                else:
                    v = int(v)
            except (TypeError, ValueError):
                v = 0
            p.x_match = (v >= value)
            if not p.x_match:
                perr(p.x_peer, '%s invalid (value %s should be >= %s)' % (key, v, value))
                error(p.x_peer, key, value)

def matchSyncTime(session, key, value):
    ok = True
    unow = value + timedelta(seconds=10)
    lnow = value + timedelta(seconds=-10)
    print 'checking: %s between (%s, %s)' % (key, lnow, unow)
    for p in session:
        v = p.x_res.get(key, datetime.today())
        p.x_match = (v > lnow and v < unow)
        if not p.x_match:
            perr(p.x_peer, '%s not sync (value %s should between (%s, %s))'  % (key, v, lnow, unow))
            error(p.x_peer, key, value)
            ok = False
    return ok

def matchHostname(session, key):
    ok = True
    for p in session:
        v = p.x_res.get(key, '')
        host = p.x_peer
        p.x_match = (v == host)
        if not p.x_match: 
            perr(p.x_peer, '%s mismatch (value %s should == %s)' % (key, v, host))
            error(p.x_peer, key, host)
            ok = False
    return ok

def matchConfig(session, conf):
    ok = True
    for key in conf.etab:
        (desc, check, correct_val) = conf.getCheck(key)
        print 'checking:', desc
        for p in session:
            val = p.x_res.get(key, '')
            p.x_match = check(val)
            if not p.x_match:
                perr(p.x_peer, '"%s" failed (current value is %s)' % (desc, val))
                error(p.x_peer, key, correct_val)
            ok = False
    return ok

coverage = GpCoverage()
coverage.start()

try:
    parseCommandLine()
    hostlist = ssh_utils.HostList()
    for h in opt['-h']:
        hostlist.add(h)
    if opt['-f']:
        hostlist.parseFile(opt['-f'])
    
    try:
        hostlist.checkSSH()
    except ssh_utils.SSHError, e:
        sys.exit('[ERROR] ' + str(e))

    opt['-h'] = hostlist.filterMultiHomedHosts()
    if len(opt['-h']) == 0:
        usage('[ERROR] missing hosts in -h and/or -f arguments')

    conf = Config()
    if opt['-m']:
        conf.loads(masterconf, opt['-m'])


    session = sshGpSys()
    waitSession(session)

    p0 = session[0]
    # check gphome
    #key = 'env.GPHOME'
    #for p in session:
    #    value = p.x_res.get(key)
    #    if not value:
    #        value = p.x_res.get('env.__GPHOME')
    #        perr(p.x_peer, 'GPHOME not set, default to ' + value)
    #        error(p.x_peer, key, 'GPHOME not set, default to ' + value)
    #    else:
    #        match(session, key, GPHOME)

    # check postgres 
    key = 'postgres.md5'
    value = p0.x_res.get(key)
    if not value: 
        perr(p0.x_peer, 'postgres binaries unavailable')
    else:
        match(session, key, value)
        # check postgres version
        key = 'postgres.version'
        value = p0.x_res.get(key)
        if not value: 
            perr(p0.x_peer, 'postgres version unavailable')
        else:
            match(session, key, value)

    #key = 'python.version'
    #matchListMore(session, key, '2.3.5')

    key = 'sync.time'
    value = p0.x_res.get(key)
    if not value:
        perr(p0.x_peer, 'sync time unavailable')
    else:
        matchSyncTime(session, key, value)

    key = 'platform.hostname'
    print 'checking: %s' % key
    matchHostname(session, key)

    # check memory matches
    key = 'platform.memory'
    value = p0.x_res.get(key)
    if not value:
        perr(p0.x_peer, 'physical memory unavailable')
    else:
        print 'checking: %s' % key
        match(session, key, value)
    physmem = value

    # check swap. Must be at least memory size
    key = 'platform.swap'
    value = p0.x_res.get(key)
    if value:
          if value < physmem: 
              perr(p0.x_peer, 'swap is less than memory size')

    key = 'platform.system'
    value = p0.x_res.get(key)
    print 'checking: %s = linux or sunos' % key
    if value == 'linux' and match(session, key, 'linux'):
        key = 'platform.release'
        v = session[0].x_res['platform.release']
        if v.find('2.6') != 0:
            perr(p0.x_peer, 'Linux version (version %s should be >= 2.6)' % v)
        elif match(session, key, v):
            conf.loads(linuxconf, overwrite=False)
            matchConfig(session, conf)
            print_fix()

    elif value == 'sunos' and match(session, key, 'sunos'):
        key = 'platform.release'
        v = session[0].x_res['platform.release']
        if v.find('5.10') != 0:
            perr(p0.x_peer, 'Solaris version (version %s should be >= 5.10)' % v)
        elif match(session, key, v):

            sunosupdate = get_solaris_update()
            sunosconf = None
            if (sunosupdate == ""):
                perr(p0.x_peer, "Invalid Solaris version in /etc/release. Assuming Solaris 10u5")
                sunosupdate = "5"
            if sunosupdate == "4":
                sunosconf = sunosconf10u4
            elif sunosupdate == "5":
                sunosconf = sunosconf10u5
            
	    if sunosconf == None:
		perr(p0.x_peer, 'Invalid Solaris version. Should be either Solaris 10 update 4 or update 5')
	    else:
            	conf.loads(sunosconf, overwrite=False)
            	matchConfig(session, conf)
            print_fix()
    elif value == 'darwin' and match(session, key, 'darwin'):
        matchConfig(session, conf)
        print_fix()
    else:
        perr(p0.x_peer, 'unknown system (key %s should be either Linux or SunOS)' % key)

    

except KeyboardInterrupt:
    sys.exit('\nInterrupted ...')
finally:
    coverage.stop()
    coverage.generate_report()


