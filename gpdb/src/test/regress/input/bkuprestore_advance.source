-- start_ignore
--
-- Greenplum DB backup test : Advanced features
--

-- Check database version and gp_dump, pg_dump
select version();
\! gp_dump --version
\! pg_dump --version

-- Create target database
drop database if exists regressbkuptestadv;
create database regressbkuptestadv;

-- Populate some data
\c regressbkuptestadv

-- Test primary key and not null
create table t1( i int primary key, j int not null, k int,
		check( j >= i)
		);
insert into t1 values (1, 1, 1), (2, 2, 2), (3, 4, NULL);

-- Greenplum does not really support Foreign key.  So disable the tests
-- create table t2( i int primary key, j int references t1(i));
-- insert into t2 values (1, 1), (2, 2);
--
-- create table t3( i int, j int, k int,
--		primary key (i, j) );
-- insert into t3 select * from t1;
--
-- create table t4( i int, j int, 
--		foreign key (i, j) references t3(i, j)
--		);
-- insert into t4 select * from t2;
--
-- create table t5( i int, j int, k int,
--		primary key (i, j) );
-- insert into t5 select * from t1;
--
-- create table t6( i int, j int, 
--		foreign key (i, j) references t5(i, j) on delete cascase, on update cascade
--		);
-- insert into t6 select * from t2;
--
-- create table t7( i int, j int, k int,
--		primary key (i, j) );
-- insert into t7 select * from t1;
--
-- create table t8( i int, j int, 
--		foreign key (i, j) references t7(i, j) on delete set null, -- on update set null
--		);
-- insert into t8 select * from t2;
--
-- create table t9( i int, j int, k int,
--		primary key (i, j) );
-- insert into t9 select * from t1;
--
-- create table t10( i int default 1 , j int default 1, 
--		foreign key (i, j) references t7(i, j) on delete set default, on update set default 
--		);
-- insert into t8 select * from t2;
-- insert into t8 values();

-- view
create view v1 as select * from t1 where i = j;

-- oid table
create table oidt(i int, j int) with oids;
insert into oidt values (1, 2);
insert into oidt values (3, 4);

-- index
create table idxt(i int, j int);
create index idxt1 on idxt(i);
create unique index idxt2 on idxt(j);

-- create aggregate needs a c function, not tested yet.
--
create function C3ToBit (s char(3)) 
	returns bit(3) as 
	$$ select '101'::bit(3); $$ 
	language sql immutable CONTAINS SQL returns NULL on NULL input;

create language plpgsql;
create function incr (i int) returns int as
$$
	BEGIN 
		return i + 1;
	END
$$ language plpgsql NO SQL;

create cast (char(3) as bit(3))
	with function C3ToBit (char(3)) ;

create domain us_postal_code as text
check (value ~ '^\\d{5}$' or value ~ '^\\d{5}-\\d{4}$');

-- inherited table
create table tt1 (i int, j int, upc us_postal_code) distributed by (j);
insert into tt1 values (1, 1, '53706'), (2, 1, '90210'), (3, 1, '55555-4444');

create table tt2 (state char(2)) inherits (tt1);
insert into tt2(i, j, upc, state) values (4, 4, '94041', 'CA');

-- roles
drop role if exists luser;
create role luser;
grant insert on idxt to luser;
grant select on idxt to luser;

-- rules
create table rt(i int, j int);
insert into rt values (1, 1);
create rule nodelrt as on delete to rt
	do instead nothing;
create rule insrt as on insert to rt
	do instead update rt set j = i+j;

-- sequence
create sequence seq increment by 10 minvalue 100 no maxvalue start with 100 cache 10;
select nextval('seq');

-- table space
-- table space is experimental, so disable the tests
-- \! rm -fr @abs_builddir@/results/tmptbspace1
-- \! rm -fr @abs_builddir@/results/tmptbspace2
-- \! mkdir @abs_builddir@/results/tmptbspace1
-- \! mkdir @abs_builddir@/results/tmptbspace2

-- create tablespace tbspace LOCATION '@abs_builddir@/results/tmptbspace1', '@abs_builddir@/results/tmptbspace2';
-- create table tbsptable (i int) tablespace tbspace;
-- insert into tbsptable values (1), (2), (3);

-- trigger
create table trig1(i int, j int);
create function trigf() returns trigger as 
	$$
	BEGIN
		insert into trig1 values (1, 1);
	END
	$$ LANGUAGE PLPGSQL MODIFIES SQL DATA;

create trigger trig after delete on trig1 for each row execute procedure trigf();
insert into trig1 values (1, 1), (2, 2);

-- back it up
\c regression

\! rm -fr @abs_builddir@/results/gpdump_adv
\! mkdir @abs_builddir@/results/gpdump_adv
\! gp_dump regressbkuptestadv --gp-d=@abs_builddir@/results/gpdump_adv

\! rm -fr @abs_builddir@/results/pgdump_adv
\! mkdir @abs_builddir@/results/pgdump_adv
\! pg_dump -Fc -f @abs_builddir@/results/pgdump_adv/bkuptestAdv_normal regressbkuptestadv 
\! pg_dump -Fc -x -f @abs_builddir@/results/pgdump_adv/bkuptestAdv_nopriv regressbkuptestadv 


-- now restore it.
drop database if exists regressrestoretesadv1;
create database regressrestoretestadv1;

\! gp_restore --gp-d=@abs_builddir@/results/gpdump_adv --gp-k=`find @abs_builddir@/results/gpdump_adv/gp* -exec basename '{}' \; | head -1 | cut -f 1 -d '.' | cut -f 5 -d '_'` -d regressrestoretestadv1

drop database if exists regressrestoretestadv2;
create database regressrestoretestadv2;
\! pg_restore -d regressrestoretestadv2 @abs_builddir@/results/pgdump_adv/bkuptestadv_normal

drop database if exists regressrestoretestadv3;
create database regressrestoretestadv3;
\! pg_restore -d regressrestoretestadv3 @abs_builddir@/results/pgdump_adv/bkuptestadv_nopriv

-- Create target database
drop database if exists regressbkuptestmisc;
create database regressbkuptestmisc encoding 'LATIN1';

-- Populate some data
\c regressbkuptestmisc

-- Alter table, 
create table t1(i int, j int, k int);
insert into t1 values (1, 1, 1), (2, 2, 2), (3, 4, NULL);

alter table t1 drop column j;
alter table t1 rename column k to col3;

create table t2(i int, j int, k int);
insert into t2 values (1, 1, 1), (2, 2, 2), (3, 4, NULL);

alter table t2 drop column j;
alter table t2 add column j varchar(30);

create table t3(i int, j int, k int);
insert into t3 values (1, 1, 1), (2, 2, 2), (3, 4, NULL);
analyze t3;

comment on table t3 is 'Analyzed table';

create table t4(i int, j int, k int);
insert into t4 values (1, 1, 1), (2, 2, 2), (3, 4, NULL);
truncate t4;
insert into t4 values (100, 100, 100), (200, 200, 200);

create table t5(i int, j int, k int);
insert into t5 values (1, 1, 1), (2, 2, 2), (3, 4, NULL);
insert into t5 values (1, 1, 1), (2, 2, 2), (3, 4, NULL);
delete from t5 where i <= 2;
insert into t5 values (1, 1, 1), (2, 2, 2), (3, 4, NULL);
vacuum t5;

-- back it up
\c regression 

\! rm -fr @abs_builddir@/results/gpdump_misc
\! mkdir @abs_builddir@/results/gpdump_misc
\! gp_dump regressbkuptestmisc --gp-d=@abs_builddir@/results/gpdump_misc

\! rm -fr @abs_builddir@/results/pgdump_misc
\! mkdir @abs_builddir@/results/pgdump_misc
\! pg_dump -Fc -f @abs_builddir@/results/pgdump_misc/bkuptestmisc_normal regressbkuptestmisc 

-- now restore it.
drop database if exists regressrestoretesmisc1;
create database regressrestoretestmisc1;

\! gp_restore --gp-d=@abs_builddir@/results/gpdump_misc --gp-k=`find @abs_builddir@/results/gpdump_misc/gp* -exec basename '{}' \; | head -1 | cut -f 1 -d '.' | cut -f 5 -d '_'` -d regressrestoretestmisc1

drop database if exists regressrestoretestmisc2;
create database regressrestoretestmisc2;
\! pg_restore -d regressrestoretestmisc2 @abs_builddir@/results/pgdump_misc/bkuptestmisc_normal
-- end_ignore
